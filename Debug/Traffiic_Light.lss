
Traffiic_Light.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004a7c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000136  00800060  00004a7c  00004b10  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000045  00800196  00800196  00004c46  2**0
                  ALLOC
  3 .stab         00005fe8  00000000  00000000  00004c48  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000022d9  00000000  00000000  0000ac30  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  0000cf09  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000210  00000000  00000000  0000d0c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000268a  00000000  00000000  0000d2d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014e0  00000000  00000000  0000f963  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000012a9  00000000  00000000  00010e43  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  000120ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002fe  00000000  00000000  000122cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000009aa  00000000  00000000  000125ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00012f74  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 d1 11 	jmp	0x23a2	; 0x23a2 <__vector_1>
       8:	0c 94 08 12 	jmp	0x2410	; 0x2410 <__vector_2>
       c:	0c 94 3f 12 	jmp	0x247e	; 0x247e <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 38 0e 	jmp	0x1c70	; 0x1c70 <__vector_6>
      1c:	0c 94 d8 08 	jmp	0x11b0	; 0x11b0 <__vector_7>
      20:	0c 94 0f 09 	jmp	0x121e	; 0x121e <__vector_8>
      24:	0c 94 46 09 	jmp	0x128c	; 0x128c <__vector_9>
      28:	0c 94 58 0d 	jmp	0x1ab0	; 0x1ab0 <__vector_10>
      2c:	0c 94 7d 0c 	jmp	0x18fa	; 0x18fa <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 76 19 	jmp	0x32ec	; 0x32ec <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e7       	ldi	r30, 0x7C	; 124
      68:	fa e4       	ldi	r31, 0x4A	; 74
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 39       	cpi	r26, 0x96	; 150
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a6 e9       	ldi	r26, 0x96	; 150
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ab 3d       	cpi	r26, 0xDB	; 219
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a7 24 	call	0x494e	; 0x494e <main>
      8a:	0c 94 3c 25 	jmp	0x4a78	; 0x4a78 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 25 04 	call	0x84a	; 0x84a <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 85 04 	call	0x90a	; 0x90a <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 85 04 	call	0x90a	; 0x90a <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 05 25 	jmp	0x4a0a	; 0x4a0a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 21 25 	jmp	0x4a42	; 0x4a42 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 11 25 	jmp	0x4a22	; 0x4a22 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 2d 25 	jmp	0x4a5a	; 0x4a5a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 11 25 	jmp	0x4a22	; 0x4a22 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 2d 25 	jmp	0x4a5a	; 0x4a5a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 05 25 	jmp	0x4a0a	; 0x4a0a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 21 25 	jmp	0x4a42	; 0x4a42 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 0d 25 	jmp	0x4a1a	; 0x4a1a <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 29 25 	jmp	0x4a52	; 0x4a52 <__epilogue_restores__+0x10>

0000078a <__nesf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 11 25 	jmp	0x4a22	; 0x4a22 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__nesf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__nesf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 ee 06 	call	0xddc	; 0xddc <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__nesf2+0x58>
     7e0:	81 e0       	ldi	r24, 0x01	; 1
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 2d 25 	jmp	0x4a5a	; 0x4a5a <__epilogue_restores__+0x18>

000007ea <__gtsf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 11 25 	jmp	0x4a22	; 0x4a22 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gtsf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gtsf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 ee 06 	call	0xddc	; 0xddc <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gtsf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 2d 25 	jmp	0x4a5a	; 0x4a5a <__epilogue_restores__+0x18>

0000084a <__gesf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 11 25 	jmp	0x4a22	; 0x4a22 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 ee 06 	call	0xddc	; 0xddc <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	8f ef       	ldi	r24, 0xFF	; 255
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 2d 25 	jmp	0x4a5a	; 0x4a5a <__epilogue_restores__+0x18>

000008aa <__ltsf2>:
     8aa:	a8 e1       	ldi	r26, 0x18	; 24
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 11 25 	jmp	0x4a22	; 0x4a22 <__prologue_saves__+0x18>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	2d 83       	std	Y+5, r18	; 0x05
     8c0:	3e 83       	std	Y+6, r19	; 0x06
     8c2:	4f 83       	std	Y+7, r20	; 0x07
     8c4:	58 87       	std	Y+8, r21	; 0x08
     8c6:	89 e0       	ldi	r24, 0x09	; 9
     8c8:	e8 2e       	mov	r14, r24
     8ca:	f1 2c       	mov	r15, r1
     8cc:	ec 0e       	add	r14, r28
     8ce:	fd 1e       	adc	r15, r29
     8d0:	ce 01       	movw	r24, r28
     8d2:	01 96       	adiw	r24, 0x01	; 1
     8d4:	b7 01       	movw	r22, r14
     8d6:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     8da:	8e 01       	movw	r16, r28
     8dc:	0f 5e       	subi	r16, 0xEF	; 239
     8de:	1f 4f       	sbci	r17, 0xFF	; 255
     8e0:	ce 01       	movw	r24, r28
     8e2:	05 96       	adiw	r24, 0x05	; 5
     8e4:	b8 01       	movw	r22, r16
     8e6:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     8ea:	89 85       	ldd	r24, Y+9	; 0x09
     8ec:	82 30       	cpi	r24, 0x02	; 2
     8ee:	40 f0       	brcs	.+16     	; 0x900 <__ltsf2+0x56>
     8f0:	89 89       	ldd	r24, Y+17	; 0x11
     8f2:	82 30       	cpi	r24, 0x02	; 2
     8f4:	28 f0       	brcs	.+10     	; 0x900 <__ltsf2+0x56>
     8f6:	c7 01       	movw	r24, r14
     8f8:	b8 01       	movw	r22, r16
     8fa:	0e 94 ee 06 	call	0xddc	; 0xddc <__fpcmp_parts_f>
     8fe:	01 c0       	rjmp	.+2      	; 0x902 <__ltsf2+0x58>
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	68 96       	adiw	r28, 0x18	; 24
     904:	e6 e0       	ldi	r30, 0x06	; 6
     906:	0c 94 2d 25 	jmp	0x4a5a	; 0x4a5a <__epilogue_restores__+0x18>

0000090a <__fixsfsi>:
     90a:	ac e0       	ldi	r26, 0x0C	; 12
     90c:	b0 e0       	ldi	r27, 0x00	; 0
     90e:	eb e8       	ldi	r30, 0x8B	; 139
     910:	f4 e0       	ldi	r31, 0x04	; 4
     912:	0c 94 15 25 	jmp	0x4a2a	; 0x4a2a <__prologue_saves__+0x20>
     916:	69 83       	std	Y+1, r22	; 0x01
     918:	7a 83       	std	Y+2, r23	; 0x02
     91a:	8b 83       	std	Y+3, r24	; 0x03
     91c:	9c 83       	std	Y+4, r25	; 0x04
     91e:	ce 01       	movw	r24, r28
     920:	01 96       	adiw	r24, 0x01	; 1
     922:	be 01       	movw	r22, r28
     924:	6b 5f       	subi	r22, 0xFB	; 251
     926:	7f 4f       	sbci	r23, 0xFF	; 255
     928:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     92c:	8d 81       	ldd	r24, Y+5	; 0x05
     92e:	82 30       	cpi	r24, 0x02	; 2
     930:	61 f1       	breq	.+88     	; 0x98a <__fixsfsi+0x80>
     932:	82 30       	cpi	r24, 0x02	; 2
     934:	50 f1       	brcs	.+84     	; 0x98a <__fixsfsi+0x80>
     936:	84 30       	cpi	r24, 0x04	; 4
     938:	21 f4       	brne	.+8      	; 0x942 <__fixsfsi+0x38>
     93a:	8e 81       	ldd	r24, Y+6	; 0x06
     93c:	88 23       	and	r24, r24
     93e:	51 f1       	breq	.+84     	; 0x994 <__fixsfsi+0x8a>
     940:	2e c0       	rjmp	.+92     	; 0x99e <__fixsfsi+0x94>
     942:	2f 81       	ldd	r18, Y+7	; 0x07
     944:	38 85       	ldd	r19, Y+8	; 0x08
     946:	37 fd       	sbrc	r19, 7
     948:	20 c0       	rjmp	.+64     	; 0x98a <__fixsfsi+0x80>
     94a:	6e 81       	ldd	r22, Y+6	; 0x06
     94c:	2f 31       	cpi	r18, 0x1F	; 31
     94e:	31 05       	cpc	r19, r1
     950:	1c f0       	brlt	.+6      	; 0x958 <__fixsfsi+0x4e>
     952:	66 23       	and	r22, r22
     954:	f9 f0       	breq	.+62     	; 0x994 <__fixsfsi+0x8a>
     956:	23 c0       	rjmp	.+70     	; 0x99e <__fixsfsi+0x94>
     958:	8e e1       	ldi	r24, 0x1E	; 30
     95a:	90 e0       	ldi	r25, 0x00	; 0
     95c:	82 1b       	sub	r24, r18
     95e:	93 0b       	sbc	r25, r19
     960:	29 85       	ldd	r18, Y+9	; 0x09
     962:	3a 85       	ldd	r19, Y+10	; 0x0a
     964:	4b 85       	ldd	r20, Y+11	; 0x0b
     966:	5c 85       	ldd	r21, Y+12	; 0x0c
     968:	04 c0       	rjmp	.+8      	; 0x972 <__fixsfsi+0x68>
     96a:	56 95       	lsr	r21
     96c:	47 95       	ror	r20
     96e:	37 95       	ror	r19
     970:	27 95       	ror	r18
     972:	8a 95       	dec	r24
     974:	d2 f7       	brpl	.-12     	; 0x96a <__fixsfsi+0x60>
     976:	66 23       	and	r22, r22
     978:	b1 f0       	breq	.+44     	; 0x9a6 <__fixsfsi+0x9c>
     97a:	50 95       	com	r21
     97c:	40 95       	com	r20
     97e:	30 95       	com	r19
     980:	21 95       	neg	r18
     982:	3f 4f       	sbci	r19, 0xFF	; 255
     984:	4f 4f       	sbci	r20, 0xFF	; 255
     986:	5f 4f       	sbci	r21, 0xFF	; 255
     988:	0e c0       	rjmp	.+28     	; 0x9a6 <__fixsfsi+0x9c>
     98a:	20 e0       	ldi	r18, 0x00	; 0
     98c:	30 e0       	ldi	r19, 0x00	; 0
     98e:	40 e0       	ldi	r20, 0x00	; 0
     990:	50 e0       	ldi	r21, 0x00	; 0
     992:	09 c0       	rjmp	.+18     	; 0x9a6 <__fixsfsi+0x9c>
     994:	2f ef       	ldi	r18, 0xFF	; 255
     996:	3f ef       	ldi	r19, 0xFF	; 255
     998:	4f ef       	ldi	r20, 0xFF	; 255
     99a:	5f e7       	ldi	r21, 0x7F	; 127
     99c:	04 c0       	rjmp	.+8      	; 0x9a6 <__fixsfsi+0x9c>
     99e:	20 e0       	ldi	r18, 0x00	; 0
     9a0:	30 e0       	ldi	r19, 0x00	; 0
     9a2:	40 e0       	ldi	r20, 0x00	; 0
     9a4:	50 e8       	ldi	r21, 0x80	; 128
     9a6:	b9 01       	movw	r22, r18
     9a8:	ca 01       	movw	r24, r20
     9aa:	2c 96       	adiw	r28, 0x0c	; 12
     9ac:	e2 e0       	ldi	r30, 0x02	; 2
     9ae:	0c 94 31 25 	jmp	0x4a62	; 0x4a62 <__epilogue_restores__+0x20>

000009b2 <__floatunsisf>:
     9b2:	a8 e0       	ldi	r26, 0x08	; 8
     9b4:	b0 e0       	ldi	r27, 0x00	; 0
     9b6:	ef ed       	ldi	r30, 0xDF	; 223
     9b8:	f4 e0       	ldi	r31, 0x04	; 4
     9ba:	0c 94 0d 25 	jmp	0x4a1a	; 0x4a1a <__prologue_saves__+0x10>
     9be:	7b 01       	movw	r14, r22
     9c0:	8c 01       	movw	r16, r24
     9c2:	61 15       	cp	r22, r1
     9c4:	71 05       	cpc	r23, r1
     9c6:	81 05       	cpc	r24, r1
     9c8:	91 05       	cpc	r25, r1
     9ca:	19 f4       	brne	.+6      	; 0x9d2 <__floatunsisf+0x20>
     9cc:	82 e0       	ldi	r24, 0x02	; 2
     9ce:	89 83       	std	Y+1, r24	; 0x01
     9d0:	60 c0       	rjmp	.+192    	; 0xa92 <__floatunsisf+0xe0>
     9d2:	83 e0       	ldi	r24, 0x03	; 3
     9d4:	89 83       	std	Y+1, r24	; 0x01
     9d6:	8e e1       	ldi	r24, 0x1E	; 30
     9d8:	c8 2e       	mov	r12, r24
     9da:	d1 2c       	mov	r13, r1
     9dc:	dc 82       	std	Y+4, r13	; 0x04
     9de:	cb 82       	std	Y+3, r12	; 0x03
     9e0:	ed 82       	std	Y+5, r14	; 0x05
     9e2:	fe 82       	std	Y+6, r15	; 0x06
     9e4:	0f 83       	std	Y+7, r16	; 0x07
     9e6:	18 87       	std	Y+8, r17	; 0x08
     9e8:	c8 01       	movw	r24, r16
     9ea:	b7 01       	movw	r22, r14
     9ec:	0e 94 52 05 	call	0xaa4	; 0xaa4 <__clzsi2>
     9f0:	fc 01       	movw	r30, r24
     9f2:	31 97       	sbiw	r30, 0x01	; 1
     9f4:	f7 ff       	sbrs	r31, 7
     9f6:	3b c0       	rjmp	.+118    	; 0xa6e <__floatunsisf+0xbc>
     9f8:	22 27       	eor	r18, r18
     9fa:	33 27       	eor	r19, r19
     9fc:	2e 1b       	sub	r18, r30
     9fe:	3f 0b       	sbc	r19, r31
     a00:	57 01       	movw	r10, r14
     a02:	68 01       	movw	r12, r16
     a04:	02 2e       	mov	r0, r18
     a06:	04 c0       	rjmp	.+8      	; 0xa10 <__floatunsisf+0x5e>
     a08:	d6 94       	lsr	r13
     a0a:	c7 94       	ror	r12
     a0c:	b7 94       	ror	r11
     a0e:	a7 94       	ror	r10
     a10:	0a 94       	dec	r0
     a12:	d2 f7       	brpl	.-12     	; 0xa08 <__floatunsisf+0x56>
     a14:	40 e0       	ldi	r20, 0x00	; 0
     a16:	50 e0       	ldi	r21, 0x00	; 0
     a18:	60 e0       	ldi	r22, 0x00	; 0
     a1a:	70 e0       	ldi	r23, 0x00	; 0
     a1c:	81 e0       	ldi	r24, 0x01	; 1
     a1e:	90 e0       	ldi	r25, 0x00	; 0
     a20:	a0 e0       	ldi	r26, 0x00	; 0
     a22:	b0 e0       	ldi	r27, 0x00	; 0
     a24:	04 c0       	rjmp	.+8      	; 0xa2e <__floatunsisf+0x7c>
     a26:	88 0f       	add	r24, r24
     a28:	99 1f       	adc	r25, r25
     a2a:	aa 1f       	adc	r26, r26
     a2c:	bb 1f       	adc	r27, r27
     a2e:	2a 95       	dec	r18
     a30:	d2 f7       	brpl	.-12     	; 0xa26 <__floatunsisf+0x74>
     a32:	01 97       	sbiw	r24, 0x01	; 1
     a34:	a1 09       	sbc	r26, r1
     a36:	b1 09       	sbc	r27, r1
     a38:	8e 21       	and	r24, r14
     a3a:	9f 21       	and	r25, r15
     a3c:	a0 23       	and	r26, r16
     a3e:	b1 23       	and	r27, r17
     a40:	00 97       	sbiw	r24, 0x00	; 0
     a42:	a1 05       	cpc	r26, r1
     a44:	b1 05       	cpc	r27, r1
     a46:	21 f0       	breq	.+8      	; 0xa50 <__floatunsisf+0x9e>
     a48:	41 e0       	ldi	r20, 0x01	; 1
     a4a:	50 e0       	ldi	r21, 0x00	; 0
     a4c:	60 e0       	ldi	r22, 0x00	; 0
     a4e:	70 e0       	ldi	r23, 0x00	; 0
     a50:	4a 29       	or	r20, r10
     a52:	5b 29       	or	r21, r11
     a54:	6c 29       	or	r22, r12
     a56:	7d 29       	or	r23, r13
     a58:	4d 83       	std	Y+5, r20	; 0x05
     a5a:	5e 83       	std	Y+6, r21	; 0x06
     a5c:	6f 83       	std	Y+7, r22	; 0x07
     a5e:	78 87       	std	Y+8, r23	; 0x08
     a60:	8e e1       	ldi	r24, 0x1E	; 30
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	8e 1b       	sub	r24, r30
     a66:	9f 0b       	sbc	r25, r31
     a68:	9c 83       	std	Y+4, r25	; 0x04
     a6a:	8b 83       	std	Y+3, r24	; 0x03
     a6c:	12 c0       	rjmp	.+36     	; 0xa92 <__floatunsisf+0xe0>
     a6e:	30 97       	sbiw	r30, 0x00	; 0
     a70:	81 f0       	breq	.+32     	; 0xa92 <__floatunsisf+0xe0>
     a72:	0e 2e       	mov	r0, r30
     a74:	04 c0       	rjmp	.+8      	; 0xa7e <__floatunsisf+0xcc>
     a76:	ee 0c       	add	r14, r14
     a78:	ff 1c       	adc	r15, r15
     a7a:	00 1f       	adc	r16, r16
     a7c:	11 1f       	adc	r17, r17
     a7e:	0a 94       	dec	r0
     a80:	d2 f7       	brpl	.-12     	; 0xa76 <__floatunsisf+0xc4>
     a82:	ed 82       	std	Y+5, r14	; 0x05
     a84:	fe 82       	std	Y+6, r15	; 0x06
     a86:	0f 83       	std	Y+7, r16	; 0x07
     a88:	18 87       	std	Y+8, r17	; 0x08
     a8a:	ce 1a       	sub	r12, r30
     a8c:	df 0a       	sbc	r13, r31
     a8e:	dc 82       	std	Y+4, r13	; 0x04
     a90:	cb 82       	std	Y+3, r12	; 0x03
     a92:	1a 82       	std	Y+2, r1	; 0x02
     a94:	ce 01       	movw	r24, r28
     a96:	01 96       	adiw	r24, 0x01	; 1
     a98:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     a9c:	28 96       	adiw	r28, 0x08	; 8
     a9e:	ea e0       	ldi	r30, 0x0A	; 10
     aa0:	0c 94 29 25 	jmp	0x4a52	; 0x4a52 <__epilogue_restores__+0x10>

00000aa4 <__clzsi2>:
     aa4:	ef 92       	push	r14
     aa6:	ff 92       	push	r15
     aa8:	0f 93       	push	r16
     aaa:	1f 93       	push	r17
     aac:	7b 01       	movw	r14, r22
     aae:	8c 01       	movw	r16, r24
     ab0:	80 e0       	ldi	r24, 0x00	; 0
     ab2:	e8 16       	cp	r14, r24
     ab4:	80 e0       	ldi	r24, 0x00	; 0
     ab6:	f8 06       	cpc	r15, r24
     ab8:	81 e0       	ldi	r24, 0x01	; 1
     aba:	08 07       	cpc	r16, r24
     abc:	80 e0       	ldi	r24, 0x00	; 0
     abe:	18 07       	cpc	r17, r24
     ac0:	88 f4       	brcc	.+34     	; 0xae4 <__clzsi2+0x40>
     ac2:	8f ef       	ldi	r24, 0xFF	; 255
     ac4:	e8 16       	cp	r14, r24
     ac6:	f1 04       	cpc	r15, r1
     ac8:	01 05       	cpc	r16, r1
     aca:	11 05       	cpc	r17, r1
     acc:	31 f0       	breq	.+12     	; 0xada <__clzsi2+0x36>
     ace:	28 f0       	brcs	.+10     	; 0xada <__clzsi2+0x36>
     ad0:	88 e0       	ldi	r24, 0x08	; 8
     ad2:	90 e0       	ldi	r25, 0x00	; 0
     ad4:	a0 e0       	ldi	r26, 0x00	; 0
     ad6:	b0 e0       	ldi	r27, 0x00	; 0
     ad8:	17 c0       	rjmp	.+46     	; 0xb08 <__clzsi2+0x64>
     ada:	80 e0       	ldi	r24, 0x00	; 0
     adc:	90 e0       	ldi	r25, 0x00	; 0
     ade:	a0 e0       	ldi	r26, 0x00	; 0
     ae0:	b0 e0       	ldi	r27, 0x00	; 0
     ae2:	12 c0       	rjmp	.+36     	; 0xb08 <__clzsi2+0x64>
     ae4:	80 e0       	ldi	r24, 0x00	; 0
     ae6:	e8 16       	cp	r14, r24
     ae8:	80 e0       	ldi	r24, 0x00	; 0
     aea:	f8 06       	cpc	r15, r24
     aec:	80 e0       	ldi	r24, 0x00	; 0
     aee:	08 07       	cpc	r16, r24
     af0:	81 e0       	ldi	r24, 0x01	; 1
     af2:	18 07       	cpc	r17, r24
     af4:	28 f0       	brcs	.+10     	; 0xb00 <__clzsi2+0x5c>
     af6:	88 e1       	ldi	r24, 0x18	; 24
     af8:	90 e0       	ldi	r25, 0x00	; 0
     afa:	a0 e0       	ldi	r26, 0x00	; 0
     afc:	b0 e0       	ldi	r27, 0x00	; 0
     afe:	04 c0       	rjmp	.+8      	; 0xb08 <__clzsi2+0x64>
     b00:	80 e1       	ldi	r24, 0x10	; 16
     b02:	90 e0       	ldi	r25, 0x00	; 0
     b04:	a0 e0       	ldi	r26, 0x00	; 0
     b06:	b0 e0       	ldi	r27, 0x00	; 0
     b08:	20 e2       	ldi	r18, 0x20	; 32
     b0a:	30 e0       	ldi	r19, 0x00	; 0
     b0c:	40 e0       	ldi	r20, 0x00	; 0
     b0e:	50 e0       	ldi	r21, 0x00	; 0
     b10:	28 1b       	sub	r18, r24
     b12:	39 0b       	sbc	r19, r25
     b14:	4a 0b       	sbc	r20, r26
     b16:	5b 0b       	sbc	r21, r27
     b18:	04 c0       	rjmp	.+8      	; 0xb22 <__clzsi2+0x7e>
     b1a:	16 95       	lsr	r17
     b1c:	07 95       	ror	r16
     b1e:	f7 94       	ror	r15
     b20:	e7 94       	ror	r14
     b22:	8a 95       	dec	r24
     b24:	d2 f7       	brpl	.-12     	; 0xb1a <__clzsi2+0x76>
     b26:	f7 01       	movw	r30, r14
     b28:	e8 59       	subi	r30, 0x98	; 152
     b2a:	ff 4f       	sbci	r31, 0xFF	; 255
     b2c:	80 81       	ld	r24, Z
     b2e:	28 1b       	sub	r18, r24
     b30:	31 09       	sbc	r19, r1
     b32:	41 09       	sbc	r20, r1
     b34:	51 09       	sbc	r21, r1
     b36:	c9 01       	movw	r24, r18
     b38:	1f 91       	pop	r17
     b3a:	0f 91       	pop	r16
     b3c:	ff 90       	pop	r15
     b3e:	ef 90       	pop	r14
     b40:	08 95       	ret

00000b42 <__pack_f>:
     b42:	df 92       	push	r13
     b44:	ef 92       	push	r14
     b46:	ff 92       	push	r15
     b48:	0f 93       	push	r16
     b4a:	1f 93       	push	r17
     b4c:	fc 01       	movw	r30, r24
     b4e:	e4 80       	ldd	r14, Z+4	; 0x04
     b50:	f5 80       	ldd	r15, Z+5	; 0x05
     b52:	06 81       	ldd	r16, Z+6	; 0x06
     b54:	17 81       	ldd	r17, Z+7	; 0x07
     b56:	d1 80       	ldd	r13, Z+1	; 0x01
     b58:	80 81       	ld	r24, Z
     b5a:	82 30       	cpi	r24, 0x02	; 2
     b5c:	48 f4       	brcc	.+18     	; 0xb70 <__pack_f+0x2e>
     b5e:	80 e0       	ldi	r24, 0x00	; 0
     b60:	90 e0       	ldi	r25, 0x00	; 0
     b62:	a0 e1       	ldi	r26, 0x10	; 16
     b64:	b0 e0       	ldi	r27, 0x00	; 0
     b66:	e8 2a       	or	r14, r24
     b68:	f9 2a       	or	r15, r25
     b6a:	0a 2b       	or	r16, r26
     b6c:	1b 2b       	or	r17, r27
     b6e:	a5 c0       	rjmp	.+330    	; 0xcba <__pack_f+0x178>
     b70:	84 30       	cpi	r24, 0x04	; 4
     b72:	09 f4       	brne	.+2      	; 0xb76 <__pack_f+0x34>
     b74:	9f c0       	rjmp	.+318    	; 0xcb4 <__pack_f+0x172>
     b76:	82 30       	cpi	r24, 0x02	; 2
     b78:	21 f4       	brne	.+8      	; 0xb82 <__pack_f+0x40>
     b7a:	ee 24       	eor	r14, r14
     b7c:	ff 24       	eor	r15, r15
     b7e:	87 01       	movw	r16, r14
     b80:	05 c0       	rjmp	.+10     	; 0xb8c <__pack_f+0x4a>
     b82:	e1 14       	cp	r14, r1
     b84:	f1 04       	cpc	r15, r1
     b86:	01 05       	cpc	r16, r1
     b88:	11 05       	cpc	r17, r1
     b8a:	19 f4       	brne	.+6      	; 0xb92 <__pack_f+0x50>
     b8c:	e0 e0       	ldi	r30, 0x00	; 0
     b8e:	f0 e0       	ldi	r31, 0x00	; 0
     b90:	96 c0       	rjmp	.+300    	; 0xcbe <__pack_f+0x17c>
     b92:	62 81       	ldd	r22, Z+2	; 0x02
     b94:	73 81       	ldd	r23, Z+3	; 0x03
     b96:	9f ef       	ldi	r25, 0xFF	; 255
     b98:	62 38       	cpi	r22, 0x82	; 130
     b9a:	79 07       	cpc	r23, r25
     b9c:	0c f0       	brlt	.+2      	; 0xba0 <__pack_f+0x5e>
     b9e:	5b c0       	rjmp	.+182    	; 0xc56 <__pack_f+0x114>
     ba0:	22 e8       	ldi	r18, 0x82	; 130
     ba2:	3f ef       	ldi	r19, 0xFF	; 255
     ba4:	26 1b       	sub	r18, r22
     ba6:	37 0b       	sbc	r19, r23
     ba8:	2a 31       	cpi	r18, 0x1A	; 26
     baa:	31 05       	cpc	r19, r1
     bac:	2c f0       	brlt	.+10     	; 0xbb8 <__pack_f+0x76>
     bae:	20 e0       	ldi	r18, 0x00	; 0
     bb0:	30 e0       	ldi	r19, 0x00	; 0
     bb2:	40 e0       	ldi	r20, 0x00	; 0
     bb4:	50 e0       	ldi	r21, 0x00	; 0
     bb6:	2a c0       	rjmp	.+84     	; 0xc0c <__pack_f+0xca>
     bb8:	b8 01       	movw	r22, r16
     bba:	a7 01       	movw	r20, r14
     bbc:	02 2e       	mov	r0, r18
     bbe:	04 c0       	rjmp	.+8      	; 0xbc8 <__pack_f+0x86>
     bc0:	76 95       	lsr	r23
     bc2:	67 95       	ror	r22
     bc4:	57 95       	ror	r21
     bc6:	47 95       	ror	r20
     bc8:	0a 94       	dec	r0
     bca:	d2 f7       	brpl	.-12     	; 0xbc0 <__pack_f+0x7e>
     bcc:	81 e0       	ldi	r24, 0x01	; 1
     bce:	90 e0       	ldi	r25, 0x00	; 0
     bd0:	a0 e0       	ldi	r26, 0x00	; 0
     bd2:	b0 e0       	ldi	r27, 0x00	; 0
     bd4:	04 c0       	rjmp	.+8      	; 0xbde <__pack_f+0x9c>
     bd6:	88 0f       	add	r24, r24
     bd8:	99 1f       	adc	r25, r25
     bda:	aa 1f       	adc	r26, r26
     bdc:	bb 1f       	adc	r27, r27
     bde:	2a 95       	dec	r18
     be0:	d2 f7       	brpl	.-12     	; 0xbd6 <__pack_f+0x94>
     be2:	01 97       	sbiw	r24, 0x01	; 1
     be4:	a1 09       	sbc	r26, r1
     be6:	b1 09       	sbc	r27, r1
     be8:	8e 21       	and	r24, r14
     bea:	9f 21       	and	r25, r15
     bec:	a0 23       	and	r26, r16
     bee:	b1 23       	and	r27, r17
     bf0:	00 97       	sbiw	r24, 0x00	; 0
     bf2:	a1 05       	cpc	r26, r1
     bf4:	b1 05       	cpc	r27, r1
     bf6:	21 f0       	breq	.+8      	; 0xc00 <__pack_f+0xbe>
     bf8:	81 e0       	ldi	r24, 0x01	; 1
     bfa:	90 e0       	ldi	r25, 0x00	; 0
     bfc:	a0 e0       	ldi	r26, 0x00	; 0
     bfe:	b0 e0       	ldi	r27, 0x00	; 0
     c00:	9a 01       	movw	r18, r20
     c02:	ab 01       	movw	r20, r22
     c04:	28 2b       	or	r18, r24
     c06:	39 2b       	or	r19, r25
     c08:	4a 2b       	or	r20, r26
     c0a:	5b 2b       	or	r21, r27
     c0c:	da 01       	movw	r26, r20
     c0e:	c9 01       	movw	r24, r18
     c10:	8f 77       	andi	r24, 0x7F	; 127
     c12:	90 70       	andi	r25, 0x00	; 0
     c14:	a0 70       	andi	r26, 0x00	; 0
     c16:	b0 70       	andi	r27, 0x00	; 0
     c18:	80 34       	cpi	r24, 0x40	; 64
     c1a:	91 05       	cpc	r25, r1
     c1c:	a1 05       	cpc	r26, r1
     c1e:	b1 05       	cpc	r27, r1
     c20:	39 f4       	brne	.+14     	; 0xc30 <__pack_f+0xee>
     c22:	27 ff       	sbrs	r18, 7
     c24:	09 c0       	rjmp	.+18     	; 0xc38 <__pack_f+0xf6>
     c26:	20 5c       	subi	r18, 0xC0	; 192
     c28:	3f 4f       	sbci	r19, 0xFF	; 255
     c2a:	4f 4f       	sbci	r20, 0xFF	; 255
     c2c:	5f 4f       	sbci	r21, 0xFF	; 255
     c2e:	04 c0       	rjmp	.+8      	; 0xc38 <__pack_f+0xf6>
     c30:	21 5c       	subi	r18, 0xC1	; 193
     c32:	3f 4f       	sbci	r19, 0xFF	; 255
     c34:	4f 4f       	sbci	r20, 0xFF	; 255
     c36:	5f 4f       	sbci	r21, 0xFF	; 255
     c38:	e0 e0       	ldi	r30, 0x00	; 0
     c3a:	f0 e0       	ldi	r31, 0x00	; 0
     c3c:	20 30       	cpi	r18, 0x00	; 0
     c3e:	a0 e0       	ldi	r26, 0x00	; 0
     c40:	3a 07       	cpc	r19, r26
     c42:	a0 e0       	ldi	r26, 0x00	; 0
     c44:	4a 07       	cpc	r20, r26
     c46:	a0 e4       	ldi	r26, 0x40	; 64
     c48:	5a 07       	cpc	r21, r26
     c4a:	10 f0       	brcs	.+4      	; 0xc50 <__pack_f+0x10e>
     c4c:	e1 e0       	ldi	r30, 0x01	; 1
     c4e:	f0 e0       	ldi	r31, 0x00	; 0
     c50:	79 01       	movw	r14, r18
     c52:	8a 01       	movw	r16, r20
     c54:	27 c0       	rjmp	.+78     	; 0xca4 <__pack_f+0x162>
     c56:	60 38       	cpi	r22, 0x80	; 128
     c58:	71 05       	cpc	r23, r1
     c5a:	64 f5       	brge	.+88     	; 0xcb4 <__pack_f+0x172>
     c5c:	fb 01       	movw	r30, r22
     c5e:	e1 58       	subi	r30, 0x81	; 129
     c60:	ff 4f       	sbci	r31, 0xFF	; 255
     c62:	d8 01       	movw	r26, r16
     c64:	c7 01       	movw	r24, r14
     c66:	8f 77       	andi	r24, 0x7F	; 127
     c68:	90 70       	andi	r25, 0x00	; 0
     c6a:	a0 70       	andi	r26, 0x00	; 0
     c6c:	b0 70       	andi	r27, 0x00	; 0
     c6e:	80 34       	cpi	r24, 0x40	; 64
     c70:	91 05       	cpc	r25, r1
     c72:	a1 05       	cpc	r26, r1
     c74:	b1 05       	cpc	r27, r1
     c76:	39 f4       	brne	.+14     	; 0xc86 <__pack_f+0x144>
     c78:	e7 fe       	sbrs	r14, 7
     c7a:	0d c0       	rjmp	.+26     	; 0xc96 <__pack_f+0x154>
     c7c:	80 e4       	ldi	r24, 0x40	; 64
     c7e:	90 e0       	ldi	r25, 0x00	; 0
     c80:	a0 e0       	ldi	r26, 0x00	; 0
     c82:	b0 e0       	ldi	r27, 0x00	; 0
     c84:	04 c0       	rjmp	.+8      	; 0xc8e <__pack_f+0x14c>
     c86:	8f e3       	ldi	r24, 0x3F	; 63
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	a0 e0       	ldi	r26, 0x00	; 0
     c8c:	b0 e0       	ldi	r27, 0x00	; 0
     c8e:	e8 0e       	add	r14, r24
     c90:	f9 1e       	adc	r15, r25
     c92:	0a 1f       	adc	r16, r26
     c94:	1b 1f       	adc	r17, r27
     c96:	17 ff       	sbrs	r17, 7
     c98:	05 c0       	rjmp	.+10     	; 0xca4 <__pack_f+0x162>
     c9a:	16 95       	lsr	r17
     c9c:	07 95       	ror	r16
     c9e:	f7 94       	ror	r15
     ca0:	e7 94       	ror	r14
     ca2:	31 96       	adiw	r30, 0x01	; 1
     ca4:	87 e0       	ldi	r24, 0x07	; 7
     ca6:	16 95       	lsr	r17
     ca8:	07 95       	ror	r16
     caa:	f7 94       	ror	r15
     cac:	e7 94       	ror	r14
     cae:	8a 95       	dec	r24
     cb0:	d1 f7       	brne	.-12     	; 0xca6 <__pack_f+0x164>
     cb2:	05 c0       	rjmp	.+10     	; 0xcbe <__pack_f+0x17c>
     cb4:	ee 24       	eor	r14, r14
     cb6:	ff 24       	eor	r15, r15
     cb8:	87 01       	movw	r16, r14
     cba:	ef ef       	ldi	r30, 0xFF	; 255
     cbc:	f0 e0       	ldi	r31, 0x00	; 0
     cbe:	6e 2f       	mov	r22, r30
     cc0:	67 95       	ror	r22
     cc2:	66 27       	eor	r22, r22
     cc4:	67 95       	ror	r22
     cc6:	90 2f       	mov	r25, r16
     cc8:	9f 77       	andi	r25, 0x7F	; 127
     cca:	d7 94       	ror	r13
     ccc:	dd 24       	eor	r13, r13
     cce:	d7 94       	ror	r13
     cd0:	8e 2f       	mov	r24, r30
     cd2:	86 95       	lsr	r24
     cd4:	49 2f       	mov	r20, r25
     cd6:	46 2b       	or	r20, r22
     cd8:	58 2f       	mov	r21, r24
     cda:	5d 29       	or	r21, r13
     cdc:	b7 01       	movw	r22, r14
     cde:	ca 01       	movw	r24, r20
     ce0:	1f 91       	pop	r17
     ce2:	0f 91       	pop	r16
     ce4:	ff 90       	pop	r15
     ce6:	ef 90       	pop	r14
     ce8:	df 90       	pop	r13
     cea:	08 95       	ret

00000cec <__unpack_f>:
     cec:	fc 01       	movw	r30, r24
     cee:	db 01       	movw	r26, r22
     cf0:	40 81       	ld	r20, Z
     cf2:	51 81       	ldd	r21, Z+1	; 0x01
     cf4:	22 81       	ldd	r18, Z+2	; 0x02
     cf6:	62 2f       	mov	r22, r18
     cf8:	6f 77       	andi	r22, 0x7F	; 127
     cfa:	70 e0       	ldi	r23, 0x00	; 0
     cfc:	22 1f       	adc	r18, r18
     cfe:	22 27       	eor	r18, r18
     d00:	22 1f       	adc	r18, r18
     d02:	93 81       	ldd	r25, Z+3	; 0x03
     d04:	89 2f       	mov	r24, r25
     d06:	88 0f       	add	r24, r24
     d08:	82 2b       	or	r24, r18
     d0a:	28 2f       	mov	r18, r24
     d0c:	30 e0       	ldi	r19, 0x00	; 0
     d0e:	99 1f       	adc	r25, r25
     d10:	99 27       	eor	r25, r25
     d12:	99 1f       	adc	r25, r25
     d14:	11 96       	adiw	r26, 0x01	; 1
     d16:	9c 93       	st	X, r25
     d18:	11 97       	sbiw	r26, 0x01	; 1
     d1a:	21 15       	cp	r18, r1
     d1c:	31 05       	cpc	r19, r1
     d1e:	a9 f5       	brne	.+106    	; 0xd8a <__unpack_f+0x9e>
     d20:	41 15       	cp	r20, r1
     d22:	51 05       	cpc	r21, r1
     d24:	61 05       	cpc	r22, r1
     d26:	71 05       	cpc	r23, r1
     d28:	11 f4       	brne	.+4      	; 0xd2e <__unpack_f+0x42>
     d2a:	82 e0       	ldi	r24, 0x02	; 2
     d2c:	37 c0       	rjmp	.+110    	; 0xd9c <__unpack_f+0xb0>
     d2e:	82 e8       	ldi	r24, 0x82	; 130
     d30:	9f ef       	ldi	r25, 0xFF	; 255
     d32:	13 96       	adiw	r26, 0x03	; 3
     d34:	9c 93       	st	X, r25
     d36:	8e 93       	st	-X, r24
     d38:	12 97       	sbiw	r26, 0x02	; 2
     d3a:	9a 01       	movw	r18, r20
     d3c:	ab 01       	movw	r20, r22
     d3e:	67 e0       	ldi	r22, 0x07	; 7
     d40:	22 0f       	add	r18, r18
     d42:	33 1f       	adc	r19, r19
     d44:	44 1f       	adc	r20, r20
     d46:	55 1f       	adc	r21, r21
     d48:	6a 95       	dec	r22
     d4a:	d1 f7       	brne	.-12     	; 0xd40 <__unpack_f+0x54>
     d4c:	83 e0       	ldi	r24, 0x03	; 3
     d4e:	8c 93       	st	X, r24
     d50:	0d c0       	rjmp	.+26     	; 0xd6c <__unpack_f+0x80>
     d52:	22 0f       	add	r18, r18
     d54:	33 1f       	adc	r19, r19
     d56:	44 1f       	adc	r20, r20
     d58:	55 1f       	adc	r21, r21
     d5a:	12 96       	adiw	r26, 0x02	; 2
     d5c:	8d 91       	ld	r24, X+
     d5e:	9c 91       	ld	r25, X
     d60:	13 97       	sbiw	r26, 0x03	; 3
     d62:	01 97       	sbiw	r24, 0x01	; 1
     d64:	13 96       	adiw	r26, 0x03	; 3
     d66:	9c 93       	st	X, r25
     d68:	8e 93       	st	-X, r24
     d6a:	12 97       	sbiw	r26, 0x02	; 2
     d6c:	20 30       	cpi	r18, 0x00	; 0
     d6e:	80 e0       	ldi	r24, 0x00	; 0
     d70:	38 07       	cpc	r19, r24
     d72:	80 e0       	ldi	r24, 0x00	; 0
     d74:	48 07       	cpc	r20, r24
     d76:	80 e4       	ldi	r24, 0x40	; 64
     d78:	58 07       	cpc	r21, r24
     d7a:	58 f3       	brcs	.-42     	; 0xd52 <__unpack_f+0x66>
     d7c:	14 96       	adiw	r26, 0x04	; 4
     d7e:	2d 93       	st	X+, r18
     d80:	3d 93       	st	X+, r19
     d82:	4d 93       	st	X+, r20
     d84:	5c 93       	st	X, r21
     d86:	17 97       	sbiw	r26, 0x07	; 7
     d88:	08 95       	ret
     d8a:	2f 3f       	cpi	r18, 0xFF	; 255
     d8c:	31 05       	cpc	r19, r1
     d8e:	79 f4       	brne	.+30     	; 0xdae <__unpack_f+0xc2>
     d90:	41 15       	cp	r20, r1
     d92:	51 05       	cpc	r21, r1
     d94:	61 05       	cpc	r22, r1
     d96:	71 05       	cpc	r23, r1
     d98:	19 f4       	brne	.+6      	; 0xda0 <__unpack_f+0xb4>
     d9a:	84 e0       	ldi	r24, 0x04	; 4
     d9c:	8c 93       	st	X, r24
     d9e:	08 95       	ret
     da0:	64 ff       	sbrs	r22, 4
     da2:	03 c0       	rjmp	.+6      	; 0xdaa <__unpack_f+0xbe>
     da4:	81 e0       	ldi	r24, 0x01	; 1
     da6:	8c 93       	st	X, r24
     da8:	12 c0       	rjmp	.+36     	; 0xdce <__unpack_f+0xe2>
     daa:	1c 92       	st	X, r1
     dac:	10 c0       	rjmp	.+32     	; 0xdce <__unpack_f+0xe2>
     dae:	2f 57       	subi	r18, 0x7F	; 127
     db0:	30 40       	sbci	r19, 0x00	; 0
     db2:	13 96       	adiw	r26, 0x03	; 3
     db4:	3c 93       	st	X, r19
     db6:	2e 93       	st	-X, r18
     db8:	12 97       	sbiw	r26, 0x02	; 2
     dba:	83 e0       	ldi	r24, 0x03	; 3
     dbc:	8c 93       	st	X, r24
     dbe:	87 e0       	ldi	r24, 0x07	; 7
     dc0:	44 0f       	add	r20, r20
     dc2:	55 1f       	adc	r21, r21
     dc4:	66 1f       	adc	r22, r22
     dc6:	77 1f       	adc	r23, r23
     dc8:	8a 95       	dec	r24
     dca:	d1 f7       	brne	.-12     	; 0xdc0 <__unpack_f+0xd4>
     dcc:	70 64       	ori	r23, 0x40	; 64
     dce:	14 96       	adiw	r26, 0x04	; 4
     dd0:	4d 93       	st	X+, r20
     dd2:	5d 93       	st	X+, r21
     dd4:	6d 93       	st	X+, r22
     dd6:	7c 93       	st	X, r23
     dd8:	17 97       	sbiw	r26, 0x07	; 7
     dda:	08 95       	ret

00000ddc <__fpcmp_parts_f>:
     ddc:	1f 93       	push	r17
     dde:	dc 01       	movw	r26, r24
     de0:	fb 01       	movw	r30, r22
     de2:	9c 91       	ld	r25, X
     de4:	92 30       	cpi	r25, 0x02	; 2
     de6:	08 f4       	brcc	.+2      	; 0xdea <__fpcmp_parts_f+0xe>
     de8:	47 c0       	rjmp	.+142    	; 0xe78 <__fpcmp_parts_f+0x9c>
     dea:	80 81       	ld	r24, Z
     dec:	82 30       	cpi	r24, 0x02	; 2
     dee:	08 f4       	brcc	.+2      	; 0xdf2 <__fpcmp_parts_f+0x16>
     df0:	43 c0       	rjmp	.+134    	; 0xe78 <__fpcmp_parts_f+0x9c>
     df2:	94 30       	cpi	r25, 0x04	; 4
     df4:	51 f4       	brne	.+20     	; 0xe0a <__fpcmp_parts_f+0x2e>
     df6:	11 96       	adiw	r26, 0x01	; 1
     df8:	1c 91       	ld	r17, X
     dfa:	84 30       	cpi	r24, 0x04	; 4
     dfc:	99 f5       	brne	.+102    	; 0xe64 <__fpcmp_parts_f+0x88>
     dfe:	81 81       	ldd	r24, Z+1	; 0x01
     e00:	68 2f       	mov	r22, r24
     e02:	70 e0       	ldi	r23, 0x00	; 0
     e04:	61 1b       	sub	r22, r17
     e06:	71 09       	sbc	r23, r1
     e08:	3f c0       	rjmp	.+126    	; 0xe88 <__fpcmp_parts_f+0xac>
     e0a:	84 30       	cpi	r24, 0x04	; 4
     e0c:	21 f0       	breq	.+8      	; 0xe16 <__fpcmp_parts_f+0x3a>
     e0e:	92 30       	cpi	r25, 0x02	; 2
     e10:	31 f4       	brne	.+12     	; 0xe1e <__fpcmp_parts_f+0x42>
     e12:	82 30       	cpi	r24, 0x02	; 2
     e14:	b9 f1       	breq	.+110    	; 0xe84 <__fpcmp_parts_f+0xa8>
     e16:	81 81       	ldd	r24, Z+1	; 0x01
     e18:	88 23       	and	r24, r24
     e1a:	89 f1       	breq	.+98     	; 0xe7e <__fpcmp_parts_f+0xa2>
     e1c:	2d c0       	rjmp	.+90     	; 0xe78 <__fpcmp_parts_f+0x9c>
     e1e:	11 96       	adiw	r26, 0x01	; 1
     e20:	1c 91       	ld	r17, X
     e22:	11 97       	sbiw	r26, 0x01	; 1
     e24:	82 30       	cpi	r24, 0x02	; 2
     e26:	f1 f0       	breq	.+60     	; 0xe64 <__fpcmp_parts_f+0x88>
     e28:	81 81       	ldd	r24, Z+1	; 0x01
     e2a:	18 17       	cp	r17, r24
     e2c:	d9 f4       	brne	.+54     	; 0xe64 <__fpcmp_parts_f+0x88>
     e2e:	12 96       	adiw	r26, 0x02	; 2
     e30:	2d 91       	ld	r18, X+
     e32:	3c 91       	ld	r19, X
     e34:	13 97       	sbiw	r26, 0x03	; 3
     e36:	82 81       	ldd	r24, Z+2	; 0x02
     e38:	93 81       	ldd	r25, Z+3	; 0x03
     e3a:	82 17       	cp	r24, r18
     e3c:	93 07       	cpc	r25, r19
     e3e:	94 f0       	brlt	.+36     	; 0xe64 <__fpcmp_parts_f+0x88>
     e40:	28 17       	cp	r18, r24
     e42:	39 07       	cpc	r19, r25
     e44:	bc f0       	brlt	.+46     	; 0xe74 <__fpcmp_parts_f+0x98>
     e46:	14 96       	adiw	r26, 0x04	; 4
     e48:	8d 91       	ld	r24, X+
     e4a:	9d 91       	ld	r25, X+
     e4c:	0d 90       	ld	r0, X+
     e4e:	bc 91       	ld	r27, X
     e50:	a0 2d       	mov	r26, r0
     e52:	24 81       	ldd	r18, Z+4	; 0x04
     e54:	35 81       	ldd	r19, Z+5	; 0x05
     e56:	46 81       	ldd	r20, Z+6	; 0x06
     e58:	57 81       	ldd	r21, Z+7	; 0x07
     e5a:	28 17       	cp	r18, r24
     e5c:	39 07       	cpc	r19, r25
     e5e:	4a 07       	cpc	r20, r26
     e60:	5b 07       	cpc	r21, r27
     e62:	18 f4       	brcc	.+6      	; 0xe6a <__fpcmp_parts_f+0x8e>
     e64:	11 23       	and	r17, r17
     e66:	41 f0       	breq	.+16     	; 0xe78 <__fpcmp_parts_f+0x9c>
     e68:	0a c0       	rjmp	.+20     	; 0xe7e <__fpcmp_parts_f+0xa2>
     e6a:	82 17       	cp	r24, r18
     e6c:	93 07       	cpc	r25, r19
     e6e:	a4 07       	cpc	r26, r20
     e70:	b5 07       	cpc	r27, r21
     e72:	40 f4       	brcc	.+16     	; 0xe84 <__fpcmp_parts_f+0xa8>
     e74:	11 23       	and	r17, r17
     e76:	19 f0       	breq	.+6      	; 0xe7e <__fpcmp_parts_f+0xa2>
     e78:	61 e0       	ldi	r22, 0x01	; 1
     e7a:	70 e0       	ldi	r23, 0x00	; 0
     e7c:	05 c0       	rjmp	.+10     	; 0xe88 <__fpcmp_parts_f+0xac>
     e7e:	6f ef       	ldi	r22, 0xFF	; 255
     e80:	7f ef       	ldi	r23, 0xFF	; 255
     e82:	02 c0       	rjmp	.+4      	; 0xe88 <__fpcmp_parts_f+0xac>
     e84:	60 e0       	ldi	r22, 0x00	; 0
     e86:	70 e0       	ldi	r23, 0x00	; 0
     e88:	cb 01       	movw	r24, r22
     e8a:	1f 91       	pop	r17
     e8c:	08 95       	ret

00000e8e <WDT_enuSleep>:
#include "WDT_config.h"
#include "WDT_priv.h"


ES_t WDT_enuSleep(u8 Copy_u8SleepTime)
{
     e8e:	df 93       	push	r29
     e90:	cf 93       	push	r28
     e92:	00 d0       	rcall	.+0      	; 0xe94 <WDT_enuSleep+0x6>
     e94:	cd b7       	in	r28, 0x3d	; 61
     e96:	de b7       	in	r29, 0x3e	; 62
     e98:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState=ES_NOK;
     e9a:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8SleepTime<8)
     e9c:	8a 81       	ldd	r24, Y+2	; 0x02
     e9e:	88 30       	cpi	r24, 0x08	; 8
     ea0:	90 f4       	brcc	.+36     	; 0xec6 <WDT_enuSleep+0x38>
	{

		WDTCR &= 0b11111000;//Clear prescaler bits
     ea2:	a1 e4       	ldi	r26, 0x41	; 65
     ea4:	b0 e0       	ldi	r27, 0x00	; 0
     ea6:	e1 e4       	ldi	r30, 0x41	; 65
     ea8:	f0 e0       	ldi	r31, 0x00	; 0
     eaa:	80 81       	ld	r24, Z
     eac:	88 7f       	andi	r24, 0xF8	; 248
     eae:	8c 93       	st	X, r24

		WDTCR |=Copy_u8SleepTime;//Set required prescaler
     eb0:	a1 e4       	ldi	r26, 0x41	; 65
     eb2:	b0 e0       	ldi	r27, 0x00	; 0
     eb4:	e1 e4       	ldi	r30, 0x41	; 65
     eb6:	f0 e0       	ldi	r31, 0x00	; 0
     eb8:	90 81       	ld	r25, Z
     eba:	8a 81       	ldd	r24, Y+2	; 0x02
     ebc:	89 2b       	or	r24, r25
     ebe:	8c 93       	st	X, r24

		Local_enuErrorState=ES_OK;
     ec0:	81 e0       	ldi	r24, 0x01	; 1
     ec2:	89 83       	std	Y+1, r24	; 0x01
     ec4:	02 c0       	rjmp	.+4      	; 0xeca <WDT_enuSleep+0x3c>
	}
	else
	{
		Local_enuErrorState=ES_OUT_OF_RANGE;
     ec6:	83 e0       	ldi	r24, 0x03	; 3
     ec8:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
     eca:	89 81       	ldd	r24, Y+1	; 0x01
}
     ecc:	0f 90       	pop	r0
     ece:	0f 90       	pop	r0
     ed0:	cf 91       	pop	r28
     ed2:	df 91       	pop	r29
     ed4:	08 95       	ret

00000ed6 <WDT_enuEnable>:

ES_t WDT_enuEnable(void)
{
     ed6:	df 93       	push	r29
     ed8:	cf 93       	push	r28
     eda:	0f 92       	push	r0
     edc:	cd b7       	in	r28, 0x3d	; 61
     ede:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState=ES_NOK;
     ee0:	19 82       	std	Y+1, r1	; 0x01

	WDTCR |=(1<<WDTCR_WDE);
     ee2:	a1 e4       	ldi	r26, 0x41	; 65
     ee4:	b0 e0       	ldi	r27, 0x00	; 0
     ee6:	e1 e4       	ldi	r30, 0x41	; 65
     ee8:	f0 e0       	ldi	r31, 0x00	; 0
     eea:	80 81       	ld	r24, Z
     eec:	88 60       	ori	r24, 0x08	; 8
     eee:	8c 93       	st	X, r24
	Local_enuErrorState=ES_OK;
     ef0:	81 e0       	ldi	r24, 0x01	; 1
     ef2:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
     ef4:	89 81       	ldd	r24, Y+1	; 0x01
}
     ef6:	0f 90       	pop	r0
     ef8:	cf 91       	pop	r28
     efa:	df 91       	pop	r29
     efc:	08 95       	ret

00000efe <WDT_enuDisable>:

ES_t WDT_enuDisable(void)
{
     efe:	df 93       	push	r29
     f00:	cf 93       	push	r28
     f02:	0f 92       	push	r0
     f04:	cd b7       	in	r28, 0x3d	; 61
     f06:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState=ES_NOK;
     f08:	19 82       	std	Y+1, r1	; 0x01

	WDTCR |=0b00011000;//In the same operation, write a logic one to WDTOE and WDE
     f0a:	a1 e4       	ldi	r26, 0x41	; 65
     f0c:	b0 e0       	ldi	r27, 0x00	; 0
     f0e:	e1 e4       	ldi	r30, 0x41	; 65
     f10:	f0 e0       	ldi	r31, 0x00	; 0
     f12:	80 81       	ld	r24, Z
     f14:	88 61       	ori	r24, 0x18	; 24
     f16:	8c 93       	st	X, r24

	WDTCR =0; //Within the next four clock cycles, write a logic 0 to WDE
     f18:	e1 e4       	ldi	r30, 0x41	; 65
     f1a:	f0 e0       	ldi	r31, 0x00	; 0
     f1c:	10 82       	st	Z, r1
	Local_enuErrorState=ES_OK;
     f1e:	81 e0       	ldi	r24, 0x01	; 1
     f20:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
     f22:	89 81       	ldd	r24, Y+1	; 0x01
}
     f24:	0f 90       	pop	r0
     f26:	cf 91       	pop	r28
     f28:	df 91       	pop	r29
     f2a:	08 95       	ret

00000f2c <TIMER1_enuInit>:
static void (*TIMER1_APfunCallBack [TIMER1_CALL_BACK])(void*)= {NULL,NULL,NULL};
static void  *TIMER1_APvidParameter[TIMER1_CALL_BACK]        = {NULL,NULL,NULL};


ES_t  TIMER1_enuInit(void)
{
     f2c:	df 93       	push	r29
     f2e:	cf 93       	push	r28
     f30:	0f 92       	push	r0
     f32:	cd b7       	in	r28, 0x3d	; 61
     f34:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState=ES_NOK;
     f36:	19 82       	std	Y+1, r1	; 0x01

	//MODE

#if TIMER1_MODE == TIMER1_NORMAL
	TCCR1A &=~(1<<TCCR1A_WGM10);
     f38:	af e4       	ldi	r26, 0x4F	; 79
     f3a:	b0 e0       	ldi	r27, 0x00	; 0
     f3c:	ef e4       	ldi	r30, 0x4F	; 79
     f3e:	f0 e0       	ldi	r31, 0x00	; 0
     f40:	80 81       	ld	r24, Z
     f42:	8e 7f       	andi	r24, 0xFE	; 254
     f44:	8c 93       	st	X, r24
	TCCR1A &=~(1<<TCCR1A_WGM11);
     f46:	af e4       	ldi	r26, 0x4F	; 79
     f48:	b0 e0       	ldi	r27, 0x00	; 0
     f4a:	ef e4       	ldi	r30, 0x4F	; 79
     f4c:	f0 e0       	ldi	r31, 0x00	; 0
     f4e:	80 81       	ld	r24, Z
     f50:	8d 7f       	andi	r24, 0xFD	; 253
     f52:	8c 93       	st	X, r24
	TCCR1B &=~(1<<TCCR1B_WGM12);
     f54:	ae e4       	ldi	r26, 0x4E	; 78
     f56:	b0 e0       	ldi	r27, 0x00	; 0
     f58:	ee e4       	ldi	r30, 0x4E	; 78
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	80 81       	ld	r24, Z
     f5e:	87 7f       	andi	r24, 0xF7	; 247
     f60:	8c 93       	st	X, r24
	TCCR1B &=~(1<<TCCR1B_WGM13);
     f62:	ae e4       	ldi	r26, 0x4E	; 78
     f64:	b0 e0       	ldi	r27, 0x00	; 0
     f66:	ee e4       	ldi	r30, 0x4E	; 78
     f68:	f0 e0       	ldi	r31, 0x00	; 0
     f6a:	80 81       	ld	r24, Z
     f6c:	8f 7e       	andi	r24, 0xEF	; 239
     f6e:	8c 93       	st	X, r24
	#if TIMER1_OC1A_B_PIN_STATE == TIMER1_NORMAL_DISCONNECT_OC1A_B
			TCCR1A &=~(1<<TCCR1A_COM1A0);
     f70:	af e4       	ldi	r26, 0x4F	; 79
     f72:	b0 e0       	ldi	r27, 0x00	; 0
     f74:	ef e4       	ldi	r30, 0x4F	; 79
     f76:	f0 e0       	ldi	r31, 0x00	; 0
     f78:	80 81       	ld	r24, Z
     f7a:	8f 7b       	andi	r24, 0xBF	; 191
     f7c:	8c 93       	st	X, r24
			TCCR1A &=~(1<<TCCR1A_COM1A1);
     f7e:	af e4       	ldi	r26, 0x4F	; 79
     f80:	b0 e0       	ldi	r27, 0x00	; 0
     f82:	ef e4       	ldi	r30, 0x4F	; 79
     f84:	f0 e0       	ldi	r31, 0x00	; 0
     f86:	80 81       	ld	r24, Z
     f88:	8f 77       	andi	r24, 0x7F	; 127
     f8a:	8c 93       	st	X, r24
			TCCR1A &=~(1<<TCCR1A_COM1B0);
     f8c:	af e4       	ldi	r26, 0x4F	; 79
     f8e:	b0 e0       	ldi	r27, 0x00	; 0
     f90:	ef e4       	ldi	r30, 0x4F	; 79
     f92:	f0 e0       	ldi	r31, 0x00	; 0
     f94:	80 81       	ld	r24, Z
     f96:	8f 7e       	andi	r24, 0xEF	; 239
     f98:	8c 93       	st	X, r24
			TCCR1A &=~(1<<TCCR1A_COM1B1);
     f9a:	af e4       	ldi	r26, 0x4F	; 79
     f9c:	b0 e0       	ldi	r27, 0x00	; 0
     f9e:	ef e4       	ldi	r30, 0x4F	; 79
     fa0:	f0 e0       	ldi	r31, 0x00	; 0
     fa2:	80 81       	ld	r24, Z
     fa4:	8f 7d       	andi	r24, 0xDF	; 223
     fa6:	8c 93       	st	X, r24
			Local_enuErrorState =ES_OK;
     fa8:	81 e0       	ldi	r24, 0x01	; 1
     faa:	89 83       	std	Y+1, r24	; 0x01
	TCCR1B &=~(1<<TCCR1B_CS12);
	TCCR1B &=~(1<<TCCR1B_CS11);
	TCCR1B |= (1<<TCCR1B_CS10);
	Local_enuErrorState =ES_OK;
#elif TIMER1_PRESCALER == TIMER1_PRESCALER_8
	TCCR1B &=~(1<<TCCR1B_CS12);
     fac:	ae e4       	ldi	r26, 0x4E	; 78
     fae:	b0 e0       	ldi	r27, 0x00	; 0
     fb0:	ee e4       	ldi	r30, 0x4E	; 78
     fb2:	f0 e0       	ldi	r31, 0x00	; 0
     fb4:	80 81       	ld	r24, Z
     fb6:	8b 7f       	andi	r24, 0xFB	; 251
     fb8:	8c 93       	st	X, r24
	TCCR1B |= (1<<TCCR1B_CS11);
     fba:	ae e4       	ldi	r26, 0x4E	; 78
     fbc:	b0 e0       	ldi	r27, 0x00	; 0
     fbe:	ee e4       	ldi	r30, 0x4E	; 78
     fc0:	f0 e0       	ldi	r31, 0x00	; 0
     fc2:	80 81       	ld	r24, Z
     fc4:	82 60       	ori	r24, 0x02	; 2
     fc6:	8c 93       	st	X, r24
	TCCR1B &=~(1<<TCCR1B_CS10);
     fc8:	ae e4       	ldi	r26, 0x4E	; 78
     fca:	b0 e0       	ldi	r27, 0x00	; 0
     fcc:	ee e4       	ldi	r30, 0x4E	; 78
     fce:	f0 e0       	ldi	r31, 0x00	; 0
     fd0:	80 81       	ld	r24, Z
     fd2:	8e 7f       	andi	r24, 0xFE	; 254
     fd4:	8c 93       	st	X, r24
	Local_enuErrorState =ES_OK;
     fd6:	81 e0       	ldi	r24, 0x01	; 1
     fd8:	89 83       	std	Y+1, r24	; 0x01
#else
#error "Attention!!, your TIMER1_PRESCALER Selection is Wrong...."

#endif

	return Local_enuErrorState;
     fda:	89 81       	ldd	r24, Y+1	; 0x01
}
     fdc:	0f 90       	pop	r0
     fde:	cf 91       	pop	r28
     fe0:	df 91       	pop	r29
     fe2:	08 95       	ret

00000fe4 <TIMER1_enuSetChannelACTC>:

ES_t  TIMER1_enuSetChannelACTC(u16 Copy_u16OCR1AValue)
{
     fe4:	df 93       	push	r29
     fe6:	cf 93       	push	r28
     fe8:	00 d0       	rcall	.+0      	; 0xfea <TIMER1_enuSetChannelACTC+0x6>
     fea:	0f 92       	push	r0
     fec:	cd b7       	in	r28, 0x3d	; 61
     fee:	de b7       	in	r29, 0x3e	; 62
     ff0:	9b 83       	std	Y+3, r25	; 0x03
     ff2:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState=ES_NOK;
     ff4:	19 82       	std	Y+1, r1	; 0x01

	OCR1A=Copy_u16OCR1AValue;
     ff6:	ea e4       	ldi	r30, 0x4A	; 74
     ff8:	f0 e0       	ldi	r31, 0x00	; 0
     ffa:	8a 81       	ldd	r24, Y+2	; 0x02
     ffc:	9b 81       	ldd	r25, Y+3	; 0x03
     ffe:	91 83       	std	Z+1, r25	; 0x01
    1000:	80 83       	st	Z, r24
	Local_enuErrorState=ES_OK;
    1002:	81 e0       	ldi	r24, 0x01	; 1
    1004:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    1006:	89 81       	ldd	r24, Y+1	; 0x01
}
    1008:	0f 90       	pop	r0
    100a:	0f 90       	pop	r0
    100c:	0f 90       	pop	r0
    100e:	cf 91       	pop	r28
    1010:	df 91       	pop	r29
    1012:	08 95       	ret

00001014 <TIMER1_enuSetChannelBCTC>:
ES_t  TIMER1_enuSetChannelBCTC(u16 Copy_u16OCR1AValue)
{
    1014:	df 93       	push	r29
    1016:	cf 93       	push	r28
    1018:	00 d0       	rcall	.+0      	; 0x101a <TIMER1_enuSetChannelBCTC+0x6>
    101a:	0f 92       	push	r0
    101c:	cd b7       	in	r28, 0x3d	; 61
    101e:	de b7       	in	r29, 0x3e	; 62
    1020:	9b 83       	std	Y+3, r25	; 0x03
    1022:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState=ES_NOK;
    1024:	19 82       	std	Y+1, r1	; 0x01

	OCR1B=Copy_u16OCR1AValue;
    1026:	e8 e4       	ldi	r30, 0x48	; 72
    1028:	f0 e0       	ldi	r31, 0x00	; 0
    102a:	8a 81       	ldd	r24, Y+2	; 0x02
    102c:	9b 81       	ldd	r25, Y+3	; 0x03
    102e:	91 83       	std	Z+1, r25	; 0x01
    1030:	80 83       	st	Z, r24
	Local_enuErrorState=ES_OK;
    1032:	81 e0       	ldi	r24, 0x01	; 1
    1034:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    1036:	89 81       	ldd	r24, Y+1	; 0x01
}
    1038:	0f 90       	pop	r0
    103a:	0f 90       	pop	r0
    103c:	0f 90       	pop	r0
    103e:	cf 91       	pop	r28
    1040:	df 91       	pop	r29
    1042:	08 95       	ret

00001044 <TIMER1_enuSetICR>:

ES_t  TIMER1_enuSetICR(u16 Copy_u16ICR1Value)
{
    1044:	df 93       	push	r29
    1046:	cf 93       	push	r28
    1048:	00 d0       	rcall	.+0      	; 0x104a <TIMER1_enuSetICR+0x6>
    104a:	0f 92       	push	r0
    104c:	cd b7       	in	r28, 0x3d	; 61
    104e:	de b7       	in	r29, 0x3e	; 62
    1050:	9b 83       	std	Y+3, r25	; 0x03
    1052:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState=ES_NOK;
    1054:	19 82       	std	Y+1, r1	; 0x01

	ICR1=Copy_u16ICR1Value;
    1056:	e6 e4       	ldi	r30, 0x46	; 70
    1058:	f0 e0       	ldi	r31, 0x00	; 0
    105a:	8a 81       	ldd	r24, Y+2	; 0x02
    105c:	9b 81       	ldd	r25, Y+3	; 0x03
    105e:	91 83       	std	Z+1, r25	; 0x01
    1060:	80 83       	st	Z, r24
	Local_enuErrorState=ES_OK;
    1062:	81 e0       	ldi	r24, 0x01	; 1
    1064:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    1066:	89 81       	ldd	r24, Y+1	; 0x01
}
    1068:	0f 90       	pop	r0
    106a:	0f 90       	pop	r0
    106c:	0f 90       	pop	r0
    106e:	cf 91       	pop	r28
    1070:	df 91       	pop	r29
    1072:	08 95       	ret

00001074 <TIMER1_enuSetTimerValue>:

ES_t TIMER1_enuSetTimerValue(u16 Copy_u16Value)
{
    1074:	df 93       	push	r29
    1076:	cf 93       	push	r28
    1078:	00 d0       	rcall	.+0      	; 0x107a <TIMER1_enuSetTimerValue+0x6>
    107a:	0f 92       	push	r0
    107c:	cd b7       	in	r28, 0x3d	; 61
    107e:	de b7       	in	r29, 0x3e	; 62
    1080:	9b 83       	std	Y+3, r25	; 0x03
    1082:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState=ES_NOK;
    1084:	19 82       	std	Y+1, r1	; 0x01

	TCNT1=Copy_u16Value;
    1086:	ec e4       	ldi	r30, 0x4C	; 76
    1088:	f0 e0       	ldi	r31, 0x00	; 0
    108a:	8a 81       	ldd	r24, Y+2	; 0x02
    108c:	9b 81       	ldd	r25, Y+3	; 0x03
    108e:	91 83       	std	Z+1, r25	; 0x01
    1090:	80 83       	st	Z, r24
	Local_enuErrorState=ES_OK;
    1092:	81 e0       	ldi	r24, 0x01	; 1
    1094:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    1096:	89 81       	ldd	r24, Y+1	; 0x01
}
    1098:	0f 90       	pop	r0
    109a:	0f 90       	pop	r0
    109c:	0f 90       	pop	r0
    109e:	cf 91       	pop	r28
    10a0:	df 91       	pop	r29
    10a2:	08 95       	ret

000010a4 <TIMER1_enuReadTimerValue>:

ES_t  TIMER1_enuReadTimerValue(u16 *Copy_pu16Value)
{
    10a4:	df 93       	push	r29
    10a6:	cf 93       	push	r28
    10a8:	00 d0       	rcall	.+0      	; 0x10aa <TIMER1_enuReadTimerValue+0x6>
    10aa:	0f 92       	push	r0
    10ac:	cd b7       	in	r28, 0x3d	; 61
    10ae:	de b7       	in	r29, 0x3e	; 62
    10b0:	9b 83       	std	Y+3, r25	; 0x03
    10b2:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState=ES_NOK;
    10b4:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_pu16Value!=NULL)
    10b6:	8a 81       	ldd	r24, Y+2	; 0x02
    10b8:	9b 81       	ldd	r25, Y+3	; 0x03
    10ba:	00 97       	sbiw	r24, 0x00	; 0
    10bc:	59 f0       	breq	.+22     	; 0x10d4 <TIMER1_enuReadTimerValue+0x30>
	{
		*Copy_pu16Value=TCNT1;
    10be:	ec e4       	ldi	r30, 0x4C	; 76
    10c0:	f0 e0       	ldi	r31, 0x00	; 0
    10c2:	80 81       	ld	r24, Z
    10c4:	91 81       	ldd	r25, Z+1	; 0x01
    10c6:	ea 81       	ldd	r30, Y+2	; 0x02
    10c8:	fb 81       	ldd	r31, Y+3	; 0x03
    10ca:	91 83       	std	Z+1, r25	; 0x01
    10cc:	80 83       	st	Z, r24
		Local_enuErrorState=ES_OK;
    10ce:	81 e0       	ldi	r24, 0x01	; 1
    10d0:	89 83       	std	Y+1, r24	; 0x01
    10d2:	02 c0       	rjmp	.+4      	; 0x10d8 <TIMER1_enuReadTimerValue+0x34>
	}
	else
	{
		Local_enuErrorState=ES_NULL_POINTER;
    10d4:	82 e0       	ldi	r24, 0x02	; 2
    10d6:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    10d8:	89 81       	ldd	r24, Y+1	; 0x01
}
    10da:	0f 90       	pop	r0
    10dc:	0f 90       	pop	r0
    10de:	0f 90       	pop	r0
    10e0:	cf 91       	pop	r28
    10e2:	df 91       	pop	r29
    10e4:	08 95       	ret

000010e6 <TIMER1_enuCallBack>:


ES_t TIMER1_enuCallBack(void (*Copy_PfunCallBack)(void*) , void * Copy_PvidParameter,u8 Copy_CallBackSource)
{
    10e6:	df 93       	push	r29
    10e8:	cf 93       	push	r28
    10ea:	cd b7       	in	r28, 0x3d	; 61
    10ec:	de b7       	in	r29, 0x3e	; 62
    10ee:	28 97       	sbiw	r28, 0x08	; 8
    10f0:	0f b6       	in	r0, 0x3f	; 63
    10f2:	f8 94       	cli
    10f4:	de bf       	out	0x3e, r29	; 62
    10f6:	0f be       	out	0x3f, r0	; 63
    10f8:	cd bf       	out	0x3d, r28	; 61
    10fa:	9b 83       	std	Y+3, r25	; 0x03
    10fc:	8a 83       	std	Y+2, r24	; 0x02
    10fe:	7d 83       	std	Y+5, r23	; 0x05
    1100:	6c 83       	std	Y+4, r22	; 0x04
    1102:	4e 83       	std	Y+6, r20	; 0x06
	ES_t Local_enuErrorState=ES_NOK;
    1104:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_PfunCallBack!=NULL)
    1106:	8a 81       	ldd	r24, Y+2	; 0x02
    1108:	9b 81       	ldd	r25, Y+3	; 0x03
    110a:	00 97       	sbiw	r24, 0x00	; 0
    110c:	09 f4       	brne	.+2      	; 0x1110 <TIMER1_enuCallBack+0x2a>
    110e:	44 c0       	rjmp	.+136    	; 0x1198 <TIMER1_enuCallBack+0xb2>
	{
		switch(Copy_CallBackSource)
    1110:	8e 81       	ldd	r24, Y+6	; 0x06
    1112:	28 2f       	mov	r18, r24
    1114:	30 e0       	ldi	r19, 0x00	; 0
    1116:	38 87       	std	Y+8, r19	; 0x08
    1118:	2f 83       	std	Y+7, r18	; 0x07
    111a:	8f 81       	ldd	r24, Y+7	; 0x07
    111c:	98 85       	ldd	r25, Y+8	; 0x08
    111e:	81 30       	cpi	r24, 0x01	; 1
    1120:	91 05       	cpc	r25, r1
    1122:	41 f1       	breq	.+80     	; 0x1174 <TIMER1_enuCallBack+0x8e>
    1124:	2f 81       	ldd	r18, Y+7	; 0x07
    1126:	38 85       	ldd	r19, Y+8	; 0x08
    1128:	22 30       	cpi	r18, 0x02	; 2
    112a:	31 05       	cpc	r19, r1
    112c:	29 f0       	breq	.+10     	; 0x1138 <TIMER1_enuCallBack+0x52>
    112e:	8f 81       	ldd	r24, Y+7	; 0x07
    1130:	98 85       	ldd	r25, Y+8	; 0x08
    1132:	00 97       	sbiw	r24, 0x00	; 0
    1134:	81 f0       	breq	.+32     	; 0x1156 <TIMER1_enuCallBack+0x70>
    1136:	2d c0       	rjmp	.+90     	; 0x1192 <TIMER1_enuCallBack+0xac>
		{
		case TIMER1_OVF_CALLBACK:
			TIMER1_APfunCallBack[TIMER1_OVF_CALLBACK]=Copy_PfunCallBack;
    1138:	8a 81       	ldd	r24, Y+2	; 0x02
    113a:	9b 81       	ldd	r25, Y+3	; 0x03
    113c:	90 93 9b 01 	sts	0x019B, r25
    1140:	80 93 9a 01 	sts	0x019A, r24
			TIMER1_APvidParameter[TIMER1_OVF_CALLBACK]=Copy_PvidParameter;
    1144:	8c 81       	ldd	r24, Y+4	; 0x04
    1146:	9d 81       	ldd	r25, Y+5	; 0x05
    1148:	90 93 a1 01 	sts	0x01A1, r25
    114c:	80 93 a0 01 	sts	0x01A0, r24
			Local_enuErrorState=ES_OK;
    1150:	81 e0       	ldi	r24, 0x01	; 1
    1152:	89 83       	std	Y+1, r24	; 0x01
    1154:	23 c0       	rjmp	.+70     	; 0x119c <TIMER1_enuCallBack+0xb6>
			break;
		case TIMER1_COMA_CALLBACK:
			TIMER1_APfunCallBack[TIMER1_COMA_CALLBACK]=Copy_PfunCallBack;
    1156:	8a 81       	ldd	r24, Y+2	; 0x02
    1158:	9b 81       	ldd	r25, Y+3	; 0x03
    115a:	90 93 97 01 	sts	0x0197, r25
    115e:	80 93 96 01 	sts	0x0196, r24
			TIMER1_APvidParameter[TIMER1_COMA_CALLBACK]=Copy_PvidParameter;
    1162:	8c 81       	ldd	r24, Y+4	; 0x04
    1164:	9d 81       	ldd	r25, Y+5	; 0x05
    1166:	90 93 9d 01 	sts	0x019D, r25
    116a:	80 93 9c 01 	sts	0x019C, r24
			Local_enuErrorState=ES_OK;
    116e:	81 e0       	ldi	r24, 0x01	; 1
    1170:	89 83       	std	Y+1, r24	; 0x01
    1172:	14 c0       	rjmp	.+40     	; 0x119c <TIMER1_enuCallBack+0xb6>
			break;
		case TIMER1_COMB_CALLBACK:
			TIMER1_APfunCallBack[TIMER1_COMB_CALLBACK]=Copy_PfunCallBack;
    1174:	8a 81       	ldd	r24, Y+2	; 0x02
    1176:	9b 81       	ldd	r25, Y+3	; 0x03
    1178:	90 93 99 01 	sts	0x0199, r25
    117c:	80 93 98 01 	sts	0x0198, r24
			TIMER1_APvidParameter[TIMER1_COMB_CALLBACK]=Copy_PvidParameter;
    1180:	8c 81       	ldd	r24, Y+4	; 0x04
    1182:	9d 81       	ldd	r25, Y+5	; 0x05
    1184:	90 93 9f 01 	sts	0x019F, r25
    1188:	80 93 9e 01 	sts	0x019E, r24
			Local_enuErrorState=ES_OK;
    118c:	81 e0       	ldi	r24, 0x01	; 1
    118e:	89 83       	std	Y+1, r24	; 0x01
    1190:	05 c0       	rjmp	.+10     	; 0x119c <TIMER1_enuCallBack+0xb6>
			break;
		default:
			Local_enuErrorState=ES_OUT_OF_RANGE;
    1192:	83 e0       	ldi	r24, 0x03	; 3
    1194:	89 83       	std	Y+1, r24	; 0x01
    1196:	02 c0       	rjmp	.+4      	; 0x119c <TIMER1_enuCallBack+0xb6>
			break;
		}
	}
	else
	{
		Local_enuErrorState =ES_NULL_POINTER;
    1198:	82 e0       	ldi	r24, 0x02	; 2
    119a:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    119c:	89 81       	ldd	r24, Y+1	; 0x01
}
    119e:	28 96       	adiw	r28, 0x08	; 8
    11a0:	0f b6       	in	r0, 0x3f	; 63
    11a2:	f8 94       	cli
    11a4:	de bf       	out	0x3e, r29	; 62
    11a6:	0f be       	out	0x3f, r0	; 63
    11a8:	cd bf       	out	0x3d, r28	; 61
    11aa:	cf 91       	pop	r28
    11ac:	df 91       	pop	r29
    11ae:	08 95       	ret

000011b0 <__vector_7>:




ISR(VECT_TIMER1_COMA)
{
    11b0:	1f 92       	push	r1
    11b2:	0f 92       	push	r0
    11b4:	0f b6       	in	r0, 0x3f	; 63
    11b6:	0f 92       	push	r0
    11b8:	11 24       	eor	r1, r1
    11ba:	2f 93       	push	r18
    11bc:	3f 93       	push	r19
    11be:	4f 93       	push	r20
    11c0:	5f 93       	push	r21
    11c2:	6f 93       	push	r22
    11c4:	7f 93       	push	r23
    11c6:	8f 93       	push	r24
    11c8:	9f 93       	push	r25
    11ca:	af 93       	push	r26
    11cc:	bf 93       	push	r27
    11ce:	ef 93       	push	r30
    11d0:	ff 93       	push	r31
    11d2:	df 93       	push	r29
    11d4:	cf 93       	push	r28
    11d6:	cd b7       	in	r28, 0x3d	; 61
    11d8:	de b7       	in	r29, 0x3e	; 62
	if(TIMER1_APfunCallBack[TIMER1_COMA_CALLBACK]!=NULL)
    11da:	80 91 96 01 	lds	r24, 0x0196
    11de:	90 91 97 01 	lds	r25, 0x0197
    11e2:	00 97       	sbiw	r24, 0x00	; 0
    11e4:	49 f0       	breq	.+18     	; 0x11f8 <__vector_7+0x48>
	{
		TIMER1_APfunCallBack[TIMER1_COMA_CALLBACK](TIMER1_APvidParameter[TIMER1_COMA_CALLBACK]);
    11e6:	e0 91 96 01 	lds	r30, 0x0196
    11ea:	f0 91 97 01 	lds	r31, 0x0197
    11ee:	80 91 9c 01 	lds	r24, 0x019C
    11f2:	90 91 9d 01 	lds	r25, 0x019D
    11f6:	09 95       	icall
	}
}
    11f8:	cf 91       	pop	r28
    11fa:	df 91       	pop	r29
    11fc:	ff 91       	pop	r31
    11fe:	ef 91       	pop	r30
    1200:	bf 91       	pop	r27
    1202:	af 91       	pop	r26
    1204:	9f 91       	pop	r25
    1206:	8f 91       	pop	r24
    1208:	7f 91       	pop	r23
    120a:	6f 91       	pop	r22
    120c:	5f 91       	pop	r21
    120e:	4f 91       	pop	r20
    1210:	3f 91       	pop	r19
    1212:	2f 91       	pop	r18
    1214:	0f 90       	pop	r0
    1216:	0f be       	out	0x3f, r0	; 63
    1218:	0f 90       	pop	r0
    121a:	1f 90       	pop	r1
    121c:	18 95       	reti

0000121e <__vector_8>:

ISR(VECT_TIMER1_COMB)
{
    121e:	1f 92       	push	r1
    1220:	0f 92       	push	r0
    1222:	0f b6       	in	r0, 0x3f	; 63
    1224:	0f 92       	push	r0
    1226:	11 24       	eor	r1, r1
    1228:	2f 93       	push	r18
    122a:	3f 93       	push	r19
    122c:	4f 93       	push	r20
    122e:	5f 93       	push	r21
    1230:	6f 93       	push	r22
    1232:	7f 93       	push	r23
    1234:	8f 93       	push	r24
    1236:	9f 93       	push	r25
    1238:	af 93       	push	r26
    123a:	bf 93       	push	r27
    123c:	ef 93       	push	r30
    123e:	ff 93       	push	r31
    1240:	df 93       	push	r29
    1242:	cf 93       	push	r28
    1244:	cd b7       	in	r28, 0x3d	; 61
    1246:	de b7       	in	r29, 0x3e	; 62
	if(TIMER1_APfunCallBack[TIMER1_COMB_CALLBACK]!=NULL)
    1248:	80 91 98 01 	lds	r24, 0x0198
    124c:	90 91 99 01 	lds	r25, 0x0199
    1250:	00 97       	sbiw	r24, 0x00	; 0
    1252:	49 f0       	breq	.+18     	; 0x1266 <__vector_8+0x48>
	{
		TIMER1_APfunCallBack[TIMER1_COMB_CALLBACK](TIMER1_APvidParameter[TIMER1_COMB_CALLBACK]);
    1254:	e0 91 98 01 	lds	r30, 0x0198
    1258:	f0 91 99 01 	lds	r31, 0x0199
    125c:	80 91 9e 01 	lds	r24, 0x019E
    1260:	90 91 9f 01 	lds	r25, 0x019F
    1264:	09 95       	icall
	}
}
    1266:	cf 91       	pop	r28
    1268:	df 91       	pop	r29
    126a:	ff 91       	pop	r31
    126c:	ef 91       	pop	r30
    126e:	bf 91       	pop	r27
    1270:	af 91       	pop	r26
    1272:	9f 91       	pop	r25
    1274:	8f 91       	pop	r24
    1276:	7f 91       	pop	r23
    1278:	6f 91       	pop	r22
    127a:	5f 91       	pop	r21
    127c:	4f 91       	pop	r20
    127e:	3f 91       	pop	r19
    1280:	2f 91       	pop	r18
    1282:	0f 90       	pop	r0
    1284:	0f be       	out	0x3f, r0	; 63
    1286:	0f 90       	pop	r0
    1288:	1f 90       	pop	r1
    128a:	18 95       	reti

0000128c <__vector_9>:

ISR(VECT_TIMER1_OVF)
{
    128c:	1f 92       	push	r1
    128e:	0f 92       	push	r0
    1290:	0f b6       	in	r0, 0x3f	; 63
    1292:	0f 92       	push	r0
    1294:	11 24       	eor	r1, r1
    1296:	2f 93       	push	r18
    1298:	3f 93       	push	r19
    129a:	4f 93       	push	r20
    129c:	5f 93       	push	r21
    129e:	6f 93       	push	r22
    12a0:	7f 93       	push	r23
    12a2:	8f 93       	push	r24
    12a4:	9f 93       	push	r25
    12a6:	af 93       	push	r26
    12a8:	bf 93       	push	r27
    12aa:	ef 93       	push	r30
    12ac:	ff 93       	push	r31
    12ae:	df 93       	push	r29
    12b0:	cf 93       	push	r28
    12b2:	cd b7       	in	r28, 0x3d	; 61
    12b4:	de b7       	in	r29, 0x3e	; 62
	if(TIMER1_APfunCallBack[TIMER1_OVF_CALLBACK]!=NULL)
    12b6:	80 91 9a 01 	lds	r24, 0x019A
    12ba:	90 91 9b 01 	lds	r25, 0x019B
    12be:	00 97       	sbiw	r24, 0x00	; 0
    12c0:	49 f0       	breq	.+18     	; 0x12d4 <__vector_9+0x48>
	{
		TIMER1_APfunCallBack[TIMER1_OVF_CALLBACK](TIMER1_APvidParameter[TIMER1_OVF_CALLBACK]);
    12c2:	e0 91 9a 01 	lds	r30, 0x019A
    12c6:	f0 91 9b 01 	lds	r31, 0x019B
    12ca:	80 91 a0 01 	lds	r24, 0x01A0
    12ce:	90 91 a1 01 	lds	r25, 0x01A1
    12d2:	09 95       	icall
	}
}
    12d4:	cf 91       	pop	r28
    12d6:	df 91       	pop	r29
    12d8:	ff 91       	pop	r31
    12da:	ef 91       	pop	r30
    12dc:	bf 91       	pop	r27
    12de:	af 91       	pop	r26
    12e0:	9f 91       	pop	r25
    12e2:	8f 91       	pop	r24
    12e4:	7f 91       	pop	r23
    12e6:	6f 91       	pop	r22
    12e8:	5f 91       	pop	r21
    12ea:	4f 91       	pop	r20
    12ec:	3f 91       	pop	r19
    12ee:	2f 91       	pop	r18
    12f0:	0f 90       	pop	r0
    12f2:	0f be       	out	0x3f, r0	; 63
    12f4:	0f 90       	pop	r0
    12f6:	1f 90       	pop	r1
    12f8:	18 95       	reti

000012fa <TIMER0_enuInit>:

static u32 Timer0_NumOVF=0;
static u32 Timer0_Preload=0;

ES_t TIMER0_enuInit(void)
{
    12fa:	df 93       	push	r29
    12fc:	cf 93       	push	r28
    12fe:	0f 92       	push	r0
    1300:	cd b7       	in	r28, 0x3d	; 61
    1302:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState=ES_NOK;
    1304:	19 82       	std	Y+1, r1	; 0x01
	TCCR0 |= (1<<TCCR0_CS02);
	TCCR0 &=~(1<<TCCR0_CS01);
	TCCR0 &=~(1<<TCCR0_CS00);
	Local_enuErrorState =ES_OK;
#elif TIMER0_PRESCALER == TIMER0_PRESCALER_1024
	TCCR0 |= (1<<TCCR0_CS02);
    1306:	a3 e5       	ldi	r26, 0x53	; 83
    1308:	b0 e0       	ldi	r27, 0x00	; 0
    130a:	e3 e5       	ldi	r30, 0x53	; 83
    130c:	f0 e0       	ldi	r31, 0x00	; 0
    130e:	80 81       	ld	r24, Z
    1310:	84 60       	ori	r24, 0x04	; 4
    1312:	8c 93       	st	X, r24
	TCCR0 &=~(1<<TCCR0_CS01);
    1314:	a3 e5       	ldi	r26, 0x53	; 83
    1316:	b0 e0       	ldi	r27, 0x00	; 0
    1318:	e3 e5       	ldi	r30, 0x53	; 83
    131a:	f0 e0       	ldi	r31, 0x00	; 0
    131c:	80 81       	ld	r24, Z
    131e:	8d 7f       	andi	r24, 0xFD	; 253
    1320:	8c 93       	st	X, r24
	TCCR0 |= (1<<TCCR0_CS00);
    1322:	a3 e5       	ldi	r26, 0x53	; 83
    1324:	b0 e0       	ldi	r27, 0x00	; 0
    1326:	e3 e5       	ldi	r30, 0x53	; 83
    1328:	f0 e0       	ldi	r31, 0x00	; 0
    132a:	80 81       	ld	r24, Z
    132c:	81 60       	ori	r24, 0x01	; 1
    132e:	8c 93       	st	X, r24
	Local_enuErrorState =ES_OK;
    1330:	81 e0       	ldi	r24, 0x01	; 1
    1332:	89 83       	std	Y+1, r24	; 0x01

#endif

	  // MODE
#if TIMER0_MODE == TIMER0_OVER_FLOW
	TCCR0 &=~(1<<TCCR0_WGM01);
    1334:	a3 e5       	ldi	r26, 0x53	; 83
    1336:	b0 e0       	ldi	r27, 0x00	; 0
    1338:	e3 e5       	ldi	r30, 0x53	; 83
    133a:	f0 e0       	ldi	r31, 0x00	; 0
    133c:	80 81       	ld	r24, Z
    133e:	87 7f       	andi	r24, 0xF7	; 247
    1340:	8c 93       	st	X, r24
	TCCR0 &=~(1<<TCCR0_WGM00);
    1342:	a3 e5       	ldi	r26, 0x53	; 83
    1344:	b0 e0       	ldi	r27, 0x00	; 0
    1346:	e3 e5       	ldi	r30, 0x53	; 83
    1348:	f0 e0       	ldi	r31, 0x00	; 0
    134a:	80 81       	ld	r24, Z
    134c:	8f 7b       	andi	r24, 0xBF	; 191
    134e:	8c 93       	st	X, r24
	#if TIMER0_OC0_PIN_STATE == TIMER0_OVF_DISCONNECT_OC0
		TCCR0 &=~(1<<TCCR0_COM00);
    1350:	a3 e5       	ldi	r26, 0x53	; 83
    1352:	b0 e0       	ldi	r27, 0x00	; 0
    1354:	e3 e5       	ldi	r30, 0x53	; 83
    1356:	f0 e0       	ldi	r31, 0x00	; 0
    1358:	80 81       	ld	r24, Z
    135a:	8f 7e       	andi	r24, 0xEF	; 239
    135c:	8c 93       	st	X, r24
		TCCR0 &=~(1<<TCCR0_COM01);
    135e:	a3 e5       	ldi	r26, 0x53	; 83
    1360:	b0 e0       	ldi	r27, 0x00	; 0
    1362:	e3 e5       	ldi	r30, 0x53	; 83
    1364:	f0 e0       	ldi	r31, 0x00	; 0
    1366:	80 81       	ld	r24, Z
    1368:	8f 7d       	andi	r24, 0xDF	; 223
    136a:	8c 93       	st	X, r24
		Local_enuErrorState =ES_OK;
    136c:	81 e0       	ldi	r24, 0x01	; 1
    136e:	89 83       	std	Y+1, r24	; 0x01
		#endif
#else
#error "Attention!!, your TIMER0_MODE Selection is Wrong...."
#endif

	return Local_enuErrorState;
    1370:	89 81       	ldd	r24, Y+1	; 0x01
}
    1372:	0f 90       	pop	r0
    1374:	cf 91       	pop	r28
    1376:	df 91       	pop	r29
    1378:	08 95       	ret

0000137a <TIMER0_enuSetCTC>:

ES_t  TIMER0_enuSetCTC(u8 Copy_u8OCR0Value)
{
    137a:	df 93       	push	r29
    137c:	cf 93       	push	r28
    137e:	00 d0       	rcall	.+0      	; 0x1380 <TIMER0_enuSetCTC+0x6>
    1380:	cd b7       	in	r28, 0x3d	; 61
    1382:	de b7       	in	r29, 0x3e	; 62
    1384:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState=ES_NOK;
    1386:	19 82       	std	Y+1, r1	; 0x01

	OCR0 =Copy_u8OCR0Value;
    1388:	ec e5       	ldi	r30, 0x5C	; 92
    138a:	f0 e0       	ldi	r31, 0x00	; 0
    138c:	8a 81       	ldd	r24, Y+2	; 0x02
    138e:	80 83       	st	Z, r24
	Local_enuErrorState=ES_OK;
    1390:	81 e0       	ldi	r24, 0x01	; 1
    1392:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    1394:	89 81       	ldd	r24, Y+1	; 0x01
}
    1396:	0f 90       	pop	r0
    1398:	0f 90       	pop	r0
    139a:	cf 91       	pop	r28
    139c:	df 91       	pop	r29
    139e:	08 95       	ret

000013a0 <TIMER0_enuSetPreload>:

ES_t  TIMER0_enuSetPreload(u8 Copy_u8Preload)
{
    13a0:	df 93       	push	r29
    13a2:	cf 93       	push	r28
    13a4:	00 d0       	rcall	.+0      	; 0x13a6 <TIMER0_enuSetPreload+0x6>
    13a6:	cd b7       	in	r28, 0x3d	; 61
    13a8:	de b7       	in	r29, 0x3e	; 62
    13aa:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState=ES_NOK;
    13ac:	19 82       	std	Y+1, r1	; 0x01

	TCNT0 =Copy_u8Preload;
    13ae:	e2 e5       	ldi	r30, 0x52	; 82
    13b0:	f0 e0       	ldi	r31, 0x00	; 0
    13b2:	8a 81       	ldd	r24, Y+2	; 0x02
    13b4:	80 83       	st	Z, r24
	Local_enuErrorState=ES_OK;
    13b6:	81 e0       	ldi	r24, 0x01	; 1
    13b8:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    13ba:	89 81       	ldd	r24, Y+1	; 0x01
}
    13bc:	0f 90       	pop	r0
    13be:	0f 90       	pop	r0
    13c0:	cf 91       	pop	r28
    13c2:	df 91       	pop	r29
    13c4:	08 95       	ret

000013c6 <TIMER0_enuDelayMilliSecond>:


ES_t TIMER0_enuDelayMilliSecond(void (*Copy_PfunCallBack)(void*) , void * Copy_PvidParameter , u32 Copy_u32StartDelay , u32 Copy_u32StopTime)
{
    13c6:	ef 92       	push	r14
    13c8:	ff 92       	push	r15
    13ca:	0f 93       	push	r16
    13cc:	1f 93       	push	r17
    13ce:	df 93       	push	r29
    13d0:	cf 93       	push	r28
    13d2:	cd b7       	in	r28, 0x3d	; 61
    13d4:	de b7       	in	r29, 0x3e	; 62
    13d6:	2d 97       	sbiw	r28, 0x0d	; 13
    13d8:	0f b6       	in	r0, 0x3f	; 63
    13da:	f8 94       	cli
    13dc:	de bf       	out	0x3e, r29	; 62
    13de:	0f be       	out	0x3f, r0	; 63
    13e0:	cd bf       	out	0x3d, r28	; 61
    13e2:	9b 83       	std	Y+3, r25	; 0x03
    13e4:	8a 83       	std	Y+2, r24	; 0x02
    13e6:	7d 83       	std	Y+5, r23	; 0x05
    13e8:	6c 83       	std	Y+4, r22	; 0x04
    13ea:	2e 83       	std	Y+6, r18	; 0x06
    13ec:	3f 83       	std	Y+7, r19	; 0x07
    13ee:	48 87       	std	Y+8, r20	; 0x08
    13f0:	59 87       	std	Y+9, r21	; 0x09
    13f2:	ea 86       	std	Y+10, r14	; 0x0a
    13f4:	fb 86       	std	Y+11, r15	; 0x0b
    13f6:	0c 87       	std	Y+12, r16	; 0x0c
    13f8:	1d 87       	std	Y+13, r17	; 0x0d
	ES_t Local_enuErrorState=ES_NOK;
    13fa:	19 82       	std	Y+1, r1	; 0x01
#else
#warning "Attention!!, Delay function has no effect at this mode or prescaler...."
#warning "To take high accuracy on Delay function, Choose OVF mode and one or eight prescaler OR CTC mode , 64 prescaler and OCR0 = 124"
#endif

	return Local_enuErrorState;
    13fc:	89 81       	ldd	r24, Y+1	; 0x01
}
    13fe:	2d 96       	adiw	r28, 0x0d	; 13
    1400:	0f b6       	in	r0, 0x3f	; 63
    1402:	f8 94       	cli
    1404:	de bf       	out	0x3e, r29	; 62
    1406:	0f be       	out	0x3f, r0	; 63
    1408:	cd bf       	out	0x3d, r28	; 61
    140a:	cf 91       	pop	r28
    140c:	df 91       	pop	r29
    140e:	1f 91       	pop	r17
    1410:	0f 91       	pop	r16
    1412:	ff 90       	pop	r15
    1414:	ef 90       	pop	r14
    1416:	08 95       	ret

00001418 <TIMER0_enuGeneratePWM>:

ES_t TIMER0_enuGeneratePWM(u8 Copy_u8DutyCycle)
{
    1418:	df 93       	push	r29
    141a:	cf 93       	push	r28
    141c:	00 d0       	rcall	.+0      	; 0x141e <TIMER0_enuGeneratePWM+0x6>
    141e:	cd b7       	in	r28, 0x3d	; 61
    1420:	de b7       	in	r29, 0x3e	; 62
    1422:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState=ES_NOK;
    1424:	19 82       	std	Y+1, r1	; 0x01
	#endif
#else
#warning "Attention!!, Generation of PWM doesn't work at this mode...."
#endif

	return Local_enuErrorState;
    1426:	89 81       	ldd	r24, Y+1	; 0x01
}
    1428:	0f 90       	pop	r0
    142a:	0f 90       	pop	r0
    142c:	cf 91       	pop	r28
    142e:	df 91       	pop	r29
    1430:	08 95       	ret

00001432 <TIMER0_enuCallBackOVF>:

ES_t TIMER0_enuCallBackOVF(void (*Copy_PfunCallBack)(void*) , void * Copy_PvidParameter)
{
    1432:	df 93       	push	r29
    1434:	cf 93       	push	r28
    1436:	00 d0       	rcall	.+0      	; 0x1438 <TIMER0_enuCallBackOVF+0x6>
    1438:	00 d0       	rcall	.+0      	; 0x143a <TIMER0_enuCallBackOVF+0x8>
    143a:	0f 92       	push	r0
    143c:	cd b7       	in	r28, 0x3d	; 61
    143e:	de b7       	in	r29, 0x3e	; 62
    1440:	9b 83       	std	Y+3, r25	; 0x03
    1442:	8a 83       	std	Y+2, r24	; 0x02
    1444:	7d 83       	std	Y+5, r23	; 0x05
    1446:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrorState=ES_NOK;
    1448:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_PfunCallBack!=NULL)
    144a:	8a 81       	ldd	r24, Y+2	; 0x02
    144c:	9b 81       	ldd	r25, Y+3	; 0x03
    144e:	00 97       	sbiw	r24, 0x00	; 0
    1450:	79 f0       	breq	.+30     	; 0x1470 <TIMER0_enuCallBackOVF+0x3e>
	{
		TIMER0_APfunCallBack [TIMER0_OVF_CALLBACK] = Copy_PfunCallBack;
    1452:	8a 81       	ldd	r24, Y+2	; 0x02
    1454:	9b 81       	ldd	r25, Y+3	; 0x03
    1456:	90 93 b3 01 	sts	0x01B3, r25
    145a:	80 93 b2 01 	sts	0x01B2, r24
		TIMER0_APvidParameter[TIMER0_OVF_CALLBACK] = Copy_PvidParameter;
    145e:	8c 81       	ldd	r24, Y+4	; 0x04
    1460:	9d 81       	ldd	r25, Y+5	; 0x05
    1462:	90 93 b9 01 	sts	0x01B9, r25
    1466:	80 93 b8 01 	sts	0x01B8, r24
		Local_enuErrorState =ES_OK;
    146a:	81 e0       	ldi	r24, 0x01	; 1
    146c:	89 83       	std	Y+1, r24	; 0x01
    146e:	02 c0       	rjmp	.+4      	; 0x1474 <TIMER0_enuCallBackOVF+0x42>
	}
	else
	{
		Local_enuErrorState =ES_NULL_POINTER;
    1470:	82 e0       	ldi	r24, 0x02	; 2
    1472:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    1474:	89 81       	ldd	r24, Y+1	; 0x01
}
    1476:	0f 90       	pop	r0
    1478:	0f 90       	pop	r0
    147a:	0f 90       	pop	r0
    147c:	0f 90       	pop	r0
    147e:	0f 90       	pop	r0
    1480:	cf 91       	pop	r28
    1482:	df 91       	pop	r29
    1484:	08 95       	ret

00001486 <TIMER0_enuCallBackCTC>:

ES_t TIMER0_enuCallBackCTC(void (*Copy_PfunCallBack)(void*) , void * Copy_PvidParameter)
{
    1486:	df 93       	push	r29
    1488:	cf 93       	push	r28
    148a:	00 d0       	rcall	.+0      	; 0x148c <TIMER0_enuCallBackCTC+0x6>
    148c:	00 d0       	rcall	.+0      	; 0x148e <TIMER0_enuCallBackCTC+0x8>
    148e:	0f 92       	push	r0
    1490:	cd b7       	in	r28, 0x3d	; 61
    1492:	de b7       	in	r29, 0x3e	; 62
    1494:	9b 83       	std	Y+3, r25	; 0x03
    1496:	8a 83       	std	Y+2, r24	; 0x02
    1498:	7d 83       	std	Y+5, r23	; 0x05
    149a:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrorState=ES_NOK;
    149c:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_PfunCallBack!=NULL)
    149e:	8a 81       	ldd	r24, Y+2	; 0x02
    14a0:	9b 81       	ldd	r25, Y+3	; 0x03
    14a2:	00 97       	sbiw	r24, 0x00	; 0
    14a4:	79 f0       	breq	.+30     	; 0x14c4 <TIMER0_enuCallBackCTC+0x3e>
	{

		TIMER0_APfunCallBack [TIMER0_CTC_CALLBACK] = Copy_PfunCallBack;
    14a6:	8a 81       	ldd	r24, Y+2	; 0x02
    14a8:	9b 81       	ldd	r25, Y+3	; 0x03
    14aa:	90 93 b5 01 	sts	0x01B5, r25
    14ae:	80 93 b4 01 	sts	0x01B4, r24
		TIMER0_APvidParameter[TIMER0_CTC_CALLBACK] = Copy_PvidParameter;
    14b2:	8c 81       	ldd	r24, Y+4	; 0x04
    14b4:	9d 81       	ldd	r25, Y+5	; 0x05
    14b6:	90 93 bb 01 	sts	0x01BB, r25
    14ba:	80 93 ba 01 	sts	0x01BA, r24
		Local_enuErrorState=ES_OK;
    14be:	81 e0       	ldi	r24, 0x01	; 1
    14c0:	89 83       	std	Y+1, r24	; 0x01
    14c2:	02 c0       	rjmp	.+4      	; 0x14c8 <TIMER0_enuCallBackCTC+0x42>
	}
	else
	{
		Local_enuErrorState =ES_NULL_POINTER;
    14c4:	82 e0       	ldi	r24, 0x02	; 2
    14c6:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    14c8:	89 81       	ldd	r24, Y+1	; 0x01
}
    14ca:	0f 90       	pop	r0
    14cc:	0f 90       	pop	r0
    14ce:	0f 90       	pop	r0
    14d0:	0f 90       	pop	r0
    14d2:	0f 90       	pop	r0
    14d4:	cf 91       	pop	r28
    14d6:	df 91       	pop	r29
    14d8:	08 95       	ret

000014da <TIMER0_enuEnableOVFINTERRUPT>:




ES_t TIMER0_enuEnableOVFINTERRUPT(void)
{
    14da:	df 93       	push	r29
    14dc:	cf 93       	push	r28
    14de:	0f 92       	push	r0
    14e0:	cd b7       	in	r28, 0x3d	; 61
    14e2:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState=ES_NOK;
    14e4:	19 82       	std	Y+1, r1	; 0x01

	TIMSK |=(1<<TIMSK_TOIE0);
    14e6:	a9 e5       	ldi	r26, 0x59	; 89
    14e8:	b0 e0       	ldi	r27, 0x00	; 0
    14ea:	e9 e5       	ldi	r30, 0x59	; 89
    14ec:	f0 e0       	ldi	r31, 0x00	; 0
    14ee:	80 81       	ld	r24, Z
    14f0:	81 60       	ori	r24, 0x01	; 1
    14f2:	8c 93       	st	X, r24
	Local_enuErrorState=ES_OK;
    14f4:	81 e0       	ldi	r24, 0x01	; 1
    14f6:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    14f8:	89 81       	ldd	r24, Y+1	; 0x01
}
    14fa:	0f 90       	pop	r0
    14fc:	cf 91       	pop	r28
    14fe:	df 91       	pop	r29
    1500:	08 95       	ret

00001502 <TIMER0_enuEnableCTCINTERRUPT>:

ES_t TIMER0_enuEnableCTCINTERRUPT(void)
{
    1502:	df 93       	push	r29
    1504:	cf 93       	push	r28
    1506:	0f 92       	push	r0
    1508:	cd b7       	in	r28, 0x3d	; 61
    150a:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState=ES_NOK;
    150c:	19 82       	std	Y+1, r1	; 0x01

	TIMSK |=(1<<TIMSK_OCIE0);
    150e:	a9 e5       	ldi	r26, 0x59	; 89
    1510:	b0 e0       	ldi	r27, 0x00	; 0
    1512:	e9 e5       	ldi	r30, 0x59	; 89
    1514:	f0 e0       	ldi	r31, 0x00	; 0
    1516:	80 81       	ld	r24, Z
    1518:	82 60       	ori	r24, 0x02	; 2
    151a:	8c 93       	st	X, r24
	Local_enuErrorState=ES_OK;
    151c:	81 e0       	ldi	r24, 0x01	; 1
    151e:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    1520:	89 81       	ldd	r24, Y+1	; 0x01
}
    1522:	0f 90       	pop	r0
    1524:	cf 91       	pop	r28
    1526:	df 91       	pop	r29
    1528:	08 95       	ret

0000152a <TIMER0_enuSetAsychDelay>:


ES_t TIMER0_enuSetAsychDelay(u32 Copy_u8Time ,void(*Copy_pfunApp)(void*),void* Parameter)
{
    152a:	df 93       	push	r29
    152c:	cf 93       	push	r28
    152e:	cd b7       	in	r28, 0x3d	; 61
    1530:	de b7       	in	r29, 0x3e	; 62
    1532:	66 97       	sbiw	r28, 0x16	; 22
    1534:	0f b6       	in	r0, 0x3f	; 63
    1536:	f8 94       	cli
    1538:	de bf       	out	0x3e, r29	; 62
    153a:	0f be       	out	0x3f, r0	; 63
    153c:	cd bf       	out	0x3d, r28	; 61
    153e:	6f 87       	std	Y+15, r22	; 0x0f
    1540:	78 8b       	std	Y+16, r23	; 0x10
    1542:	89 8b       	std	Y+17, r24	; 0x11
    1544:	9a 8b       	std	Y+18, r25	; 0x12
    1546:	5c 8b       	std	Y+20, r21	; 0x14
    1548:	4b 8b       	std	Y+19, r20	; 0x13
    154a:	3e 8b       	std	Y+22, r19	; 0x16
    154c:	2d 8b       	std	Y+21, r18	; 0x15
	ES_t Local_enuErrorState=ES_NOK;
    154e:	1e 86       	std	Y+14, r1	; 0x0e

	f32 Local_f32OVFTime=256 *((f32)TIMER0_PRESCALER/TIMER0_F_CPU);
    1550:	8f e6       	ldi	r24, 0x6F	; 111
    1552:	92 e1       	ldi	r25, 0x12	; 18
    1554:	a3 e0       	ldi	r26, 0x03	; 3
    1556:	b2 e4       	ldi	r27, 0x42	; 66
    1558:	8a 87       	std	Y+10, r24	; 0x0a
    155a:	9b 87       	std	Y+11, r25	; 0x0b
    155c:	ac 87       	std	Y+12, r26	; 0x0c
    155e:	bd 87       	std	Y+13, r27	; 0x0d

	f32 Local_f32NumOVF = (Copy_u8Time)/(Local_f32OVFTime);
    1560:	6f 85       	ldd	r22, Y+15	; 0x0f
    1562:	78 89       	ldd	r23, Y+16	; 0x10
    1564:	89 89       	ldd	r24, Y+17	; 0x11
    1566:	9a 89       	ldd	r25, Y+18	; 0x12
    1568:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    156c:	dc 01       	movw	r26, r24
    156e:	cb 01       	movw	r24, r22
    1570:	bc 01       	movw	r22, r24
    1572:	cd 01       	movw	r24, r26
    1574:	2a 85       	ldd	r18, Y+10	; 0x0a
    1576:	3b 85       	ldd	r19, Y+11	; 0x0b
    1578:	4c 85       	ldd	r20, Y+12	; 0x0c
    157a:	5d 85       	ldd	r21, Y+13	; 0x0d
    157c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1580:	dc 01       	movw	r26, r24
    1582:	cb 01       	movw	r24, r22
    1584:	8e 83       	std	Y+6, r24	; 0x06
    1586:	9f 83       	std	Y+7, r25	; 0x07
    1588:	a8 87       	std	Y+8, r26	; 0x08
    158a:	b9 87       	std	Y+9, r27	; 0x09

	if((Local_f32NumOVF-(u32)Local_f32NumOVF) != 0.0)
    158c:	6e 81       	ldd	r22, Y+6	; 0x06
    158e:	7f 81       	ldd	r23, Y+7	; 0x07
    1590:	88 85       	ldd	r24, Y+8	; 0x08
    1592:	99 85       	ldd	r25, Y+9	; 0x09
    1594:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1598:	dc 01       	movw	r26, r24
    159a:	cb 01       	movw	r24, r22
    159c:	bc 01       	movw	r22, r24
    159e:	cd 01       	movw	r24, r26
    15a0:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    15a4:	9b 01       	movw	r18, r22
    15a6:	ac 01       	movw	r20, r24
    15a8:	6e 81       	ldd	r22, Y+6	; 0x06
    15aa:	7f 81       	ldd	r23, Y+7	; 0x07
    15ac:	88 85       	ldd	r24, Y+8	; 0x08
    15ae:	99 85       	ldd	r25, Y+9	; 0x09
    15b0:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    15b4:	dc 01       	movw	r26, r24
    15b6:	cb 01       	movw	r24, r22
    15b8:	bc 01       	movw	r22, r24
    15ba:	cd 01       	movw	r24, r26
    15bc:	20 e0       	ldi	r18, 0x00	; 0
    15be:	30 e0       	ldi	r19, 0x00	; 0
    15c0:	40 e0       	ldi	r20, 0x00	; 0
    15c2:	50 e0       	ldi	r21, 0x00	; 0
    15c4:	0e 94 c5 03 	call	0x78a	; 0x78a <__nesf2>
    15c8:	88 23       	and	r24, r24
    15ca:	09 f4       	brne	.+2      	; 0x15ce <TIMER0_enuSetAsychDelay+0xa4>
    15cc:	64 c0       	rjmp	.+200    	; 0x1696 <TIMER0_enuSetAsychDelay+0x16c>
	{
		u32 Local_u32NumOVF =(u32)Local_f32NumOVF +1;
    15ce:	6e 81       	ldd	r22, Y+6	; 0x06
    15d0:	7f 81       	ldd	r23, Y+7	; 0x07
    15d2:	88 85       	ldd	r24, Y+8	; 0x08
    15d4:	99 85       	ldd	r25, Y+9	; 0x09
    15d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15da:	dc 01       	movw	r26, r24
    15dc:	cb 01       	movw	r24, r22
    15de:	01 96       	adiw	r24, 0x01	; 1
    15e0:	a1 1d       	adc	r26, r1
    15e2:	b1 1d       	adc	r27, r1
    15e4:	8a 83       	std	Y+2, r24	; 0x02
    15e6:	9b 83       	std	Y+3, r25	; 0x03
    15e8:	ac 83       	std	Y+4, r26	; 0x04
    15ea:	bd 83       	std	Y+5, r27	; 0x05
		Local_f32NumOVF = Local_f32NumOVF-(u32)Local_f32NumOVF;
    15ec:	6e 81       	ldd	r22, Y+6	; 0x06
    15ee:	7f 81       	ldd	r23, Y+7	; 0x07
    15f0:	88 85       	ldd	r24, Y+8	; 0x08
    15f2:	99 85       	ldd	r25, Y+9	; 0x09
    15f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15f8:	dc 01       	movw	r26, r24
    15fa:	cb 01       	movw	r24, r22
    15fc:	bc 01       	movw	r22, r24
    15fe:	cd 01       	movw	r24, r26
    1600:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    1604:	9b 01       	movw	r18, r22
    1606:	ac 01       	movw	r20, r24
    1608:	6e 81       	ldd	r22, Y+6	; 0x06
    160a:	7f 81       	ldd	r23, Y+7	; 0x07
    160c:	88 85       	ldd	r24, Y+8	; 0x08
    160e:	99 85       	ldd	r25, Y+9	; 0x09
    1610:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1614:	dc 01       	movw	r26, r24
    1616:	cb 01       	movw	r24, r22
    1618:	8e 83       	std	Y+6, r24	; 0x06
    161a:	9f 83       	std	Y+7, r25	; 0x07
    161c:	a8 87       	std	Y+8, r26	; 0x08
    161e:	b9 87       	std	Y+9, r27	; 0x09
		u8 Local_u8Preload =256 - (Local_f32NumOVF * 256);
    1620:	6e 81       	ldd	r22, Y+6	; 0x06
    1622:	7f 81       	ldd	r23, Y+7	; 0x07
    1624:	88 85       	ldd	r24, Y+8	; 0x08
    1626:	99 85       	ldd	r25, Y+9	; 0x09
    1628:	20 e0       	ldi	r18, 0x00	; 0
    162a:	30 e0       	ldi	r19, 0x00	; 0
    162c:	40 e8       	ldi	r20, 0x80	; 128
    162e:	53 ec       	ldi	r21, 0xC3	; 195
    1630:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1634:	dc 01       	movw	r26, r24
    1636:	cb 01       	movw	r24, r22
    1638:	bc 01       	movw	r22, r24
    163a:	cd 01       	movw	r24, r26
    163c:	20 e0       	ldi	r18, 0x00	; 0
    163e:	30 e0       	ldi	r19, 0x00	; 0
    1640:	40 e8       	ldi	r20, 0x80	; 128
    1642:	53 e4       	ldi	r21, 0x43	; 67
    1644:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    1648:	dc 01       	movw	r26, r24
    164a:	cb 01       	movw	r24, r22
    164c:	bc 01       	movw	r22, r24
    164e:	cd 01       	movw	r24, r26
    1650:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1654:	dc 01       	movw	r26, r24
    1656:	cb 01       	movw	r24, r22
    1658:	89 83       	std	Y+1, r24	; 0x01
		Timer0_NumOVF =Local_u32NumOVF;
    165a:	8a 81       	ldd	r24, Y+2	; 0x02
    165c:	9b 81       	ldd	r25, Y+3	; 0x03
    165e:	ac 81       	ldd	r26, Y+4	; 0x04
    1660:	bd 81       	ldd	r27, Y+5	; 0x05
    1662:	80 93 bc 01 	sts	0x01BC, r24
    1666:	90 93 bd 01 	sts	0x01BD, r25
    166a:	a0 93 be 01 	sts	0x01BE, r26
    166e:	b0 93 bf 01 	sts	0x01BF, r27
		Timer0_Preload =Local_u8Preload;
    1672:	89 81       	ldd	r24, Y+1	; 0x01
    1674:	88 2f       	mov	r24, r24
    1676:	90 e0       	ldi	r25, 0x00	; 0
    1678:	a0 e0       	ldi	r26, 0x00	; 0
    167a:	b0 e0       	ldi	r27, 0x00	; 0
    167c:	80 93 c0 01 	sts	0x01C0, r24
    1680:	90 93 c1 01 	sts	0x01C1, r25
    1684:	a0 93 c2 01 	sts	0x01C2, r26
    1688:	b0 93 c3 01 	sts	0x01C3, r27
		TCNT0 =Local_u8Preload;
    168c:	e2 e5       	ldi	r30, 0x52	; 82
    168e:	f0 e0       	ldi	r31, 0x00	; 0
    1690:	89 81       	ldd	r24, Y+1	; 0x01
    1692:	80 83       	st	Z, r24
    1694:	10 c0       	rjmp	.+32     	; 0x16b6 <TIMER0_enuSetAsychDelay+0x18c>
	}
	else
	{
		Timer0_NumOVF =(u32)Local_f32NumOVF;
    1696:	6e 81       	ldd	r22, Y+6	; 0x06
    1698:	7f 81       	ldd	r23, Y+7	; 0x07
    169a:	88 85       	ldd	r24, Y+8	; 0x08
    169c:	99 85       	ldd	r25, Y+9	; 0x09
    169e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16a2:	dc 01       	movw	r26, r24
    16a4:	cb 01       	movw	r24, r22
    16a6:	80 93 bc 01 	sts	0x01BC, r24
    16aa:	90 93 bd 01 	sts	0x01BD, r25
    16ae:	a0 93 be 01 	sts	0x01BE, r26
    16b2:	b0 93 bf 01 	sts	0x01BF, r27
	}

	if(Copy_pfunApp!=NULL)
    16b6:	8b 89       	ldd	r24, Y+19	; 0x13
    16b8:	9c 89       	ldd	r25, Y+20	; 0x14
    16ba:	00 97       	sbiw	r24, 0x00	; 0
    16bc:	69 f0       	breq	.+26     	; 0x16d8 <TIMER0_enuSetAsychDelay+0x1ae>
	{
		TIMER0_APfunCallBack[TIMER0_OVF_CALLBACK]=Copy_pfunApp;
    16be:	8b 89       	ldd	r24, Y+19	; 0x13
    16c0:	9c 89       	ldd	r25, Y+20	; 0x14
    16c2:	90 93 b3 01 	sts	0x01B3, r25
    16c6:	80 93 b2 01 	sts	0x01B2, r24
		TIMER0_APvidParameter[TIMER0_OVF_CALLBACK]=Parameter;
    16ca:	8d 89       	ldd	r24, Y+21	; 0x15
    16cc:	9e 89       	ldd	r25, Y+22	; 0x16
    16ce:	90 93 b9 01 	sts	0x01B9, r25
    16d2:	80 93 b8 01 	sts	0x01B8, r24
    16d6:	02 c0       	rjmp	.+4      	; 0x16dc <TIMER0_enuSetAsychDelay+0x1b2>
	}
	else
	{
		Local_enuErrorState=ES_NULL_POINTER;
    16d8:	82 e0       	ldi	r24, 0x02	; 2
    16da:	8e 87       	std	Y+14, r24	; 0x0e
	}

	TIMSK |=(1<<0);
    16dc:	a9 e5       	ldi	r26, 0x59	; 89
    16de:	b0 e0       	ldi	r27, 0x00	; 0
    16e0:	e9 e5       	ldi	r30, 0x59	; 89
    16e2:	f0 e0       	ldi	r31, 0x00	; 0
    16e4:	80 81       	ld	r24, Z
    16e6:	81 60       	ori	r24, 0x01	; 1
    16e8:	8c 93       	st	X, r24


	return Local_enuErrorState;
    16ea:	8e 85       	ldd	r24, Y+14	; 0x0e
}
    16ec:	66 96       	adiw	r28, 0x16	; 22
    16ee:	0f b6       	in	r0, 0x3f	; 63
    16f0:	f8 94       	cli
    16f2:	de bf       	out	0x3e, r29	; 62
    16f4:	0f be       	out	0x3f, r0	; 63
    16f6:	cd bf       	out	0x3d, r28	; 61
    16f8:	cf 91       	pop	r28
    16fa:	df 91       	pop	r29
    16fc:	08 95       	ret

000016fe <TIMER0_enuSetSychDelay>:

ES_t TIMER0_enuSetSychDelay(u32 Copy_u8Time)
{
    16fe:	df 93       	push	r29
    1700:	cf 93       	push	r28
    1702:	cd b7       	in	r28, 0x3d	; 61
    1704:	de b7       	in	r29, 0x3e	; 62
    1706:	66 97       	sbiw	r28, 0x16	; 22
    1708:	0f b6       	in	r0, 0x3f	; 63
    170a:	f8 94       	cli
    170c:	de bf       	out	0x3e, r29	; 62
    170e:	0f be       	out	0x3f, r0	; 63
    1710:	cd bf       	out	0x3d, r28	; 61
    1712:	6b 8b       	std	Y+19, r22	; 0x13
    1714:	7c 8b       	std	Y+20, r23	; 0x14
    1716:	8d 8b       	std	Y+21, r24	; 0x15
    1718:	9e 8b       	std	Y+22, r25	; 0x16
	ES_t Local_enuErrorState=ES_NOK;
    171a:	1a 8a       	std	Y+18, r1	; 0x12

	TIMSK &=~(1<<0);
    171c:	a9 e5       	ldi	r26, 0x59	; 89
    171e:	b0 e0       	ldi	r27, 0x00	; 0
    1720:	e9 e5       	ldi	r30, 0x59	; 89
    1722:	f0 e0       	ldi	r31, 0x00	; 0
    1724:	80 81       	ld	r24, Z
    1726:	8e 7f       	andi	r24, 0xFE	; 254
    1728:	8c 93       	st	X, r24
	f32 Local_f32OVFTime=256.0 *((f32)TIMER0_PRESCALER/TIMER0_F_CPU);
    172a:	8f e6       	ldi	r24, 0x6F	; 111
    172c:	92 e1       	ldi	r25, 0x12	; 18
    172e:	a3 e0       	ldi	r26, 0x03	; 3
    1730:	b2 e4       	ldi	r27, 0x42	; 66
    1732:	8e 87       	std	Y+14, r24	; 0x0e
    1734:	9f 87       	std	Y+15, r25	; 0x0f
    1736:	a8 8b       	std	Y+16, r26	; 0x10
    1738:	b9 8b       	std	Y+17, r27	; 0x11

	f32 Local_f32NumOVF = (Copy_u8Time)/(Local_f32OVFTime);
    173a:	6b 89       	ldd	r22, Y+19	; 0x13
    173c:	7c 89       	ldd	r23, Y+20	; 0x14
    173e:	8d 89       	ldd	r24, Y+21	; 0x15
    1740:	9e 89       	ldd	r25, Y+22	; 0x16
    1742:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    1746:	dc 01       	movw	r26, r24
    1748:	cb 01       	movw	r24, r22
    174a:	bc 01       	movw	r22, r24
    174c:	cd 01       	movw	r24, r26
    174e:	2e 85       	ldd	r18, Y+14	; 0x0e
    1750:	3f 85       	ldd	r19, Y+15	; 0x0f
    1752:	48 89       	ldd	r20, Y+16	; 0x10
    1754:	59 89       	ldd	r21, Y+17	; 0x11
    1756:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    175a:	dc 01       	movw	r26, r24
    175c:	cb 01       	movw	r24, r22
    175e:	8a 87       	std	Y+10, r24	; 0x0a
    1760:	9b 87       	std	Y+11, r25	; 0x0b
    1762:	ac 87       	std	Y+12, r26	; 0x0c
    1764:	bd 87       	std	Y+13, r27	; 0x0d

	if((Local_f32NumOVF-(u32)Local_f32NumOVF) != 0.0)
    1766:	6a 85       	ldd	r22, Y+10	; 0x0a
    1768:	7b 85       	ldd	r23, Y+11	; 0x0b
    176a:	8c 85       	ldd	r24, Y+12	; 0x0c
    176c:	9d 85       	ldd	r25, Y+13	; 0x0d
    176e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1772:	dc 01       	movw	r26, r24
    1774:	cb 01       	movw	r24, r22
    1776:	bc 01       	movw	r22, r24
    1778:	cd 01       	movw	r24, r26
    177a:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    177e:	9b 01       	movw	r18, r22
    1780:	ac 01       	movw	r20, r24
    1782:	6a 85       	ldd	r22, Y+10	; 0x0a
    1784:	7b 85       	ldd	r23, Y+11	; 0x0b
    1786:	8c 85       	ldd	r24, Y+12	; 0x0c
    1788:	9d 85       	ldd	r25, Y+13	; 0x0d
    178a:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    178e:	dc 01       	movw	r26, r24
    1790:	cb 01       	movw	r24, r22
    1792:	bc 01       	movw	r22, r24
    1794:	cd 01       	movw	r24, r26
    1796:	20 e0       	ldi	r18, 0x00	; 0
    1798:	30 e0       	ldi	r19, 0x00	; 0
    179a:	40 e0       	ldi	r20, 0x00	; 0
    179c:	50 e0       	ldi	r21, 0x00	; 0
    179e:	0e 94 c5 03 	call	0x78a	; 0x78a <__nesf2>
    17a2:	88 23       	and	r24, r24
    17a4:	09 f4       	brne	.+2      	; 0x17a8 <TIMER0_enuSetSychDelay+0xaa>
    17a6:	6f c0       	rjmp	.+222    	; 0x1886 <TIMER0_enuSetSychDelay+0x188>
	{
		u32 Local_u32NumOVF =(u32)Local_f32NumOVF +1;
    17a8:	6a 85       	ldd	r22, Y+10	; 0x0a
    17aa:	7b 85       	ldd	r23, Y+11	; 0x0b
    17ac:	8c 85       	ldd	r24, Y+12	; 0x0c
    17ae:	9d 85       	ldd	r25, Y+13	; 0x0d
    17b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17b4:	dc 01       	movw	r26, r24
    17b6:	cb 01       	movw	r24, r22
    17b8:	01 96       	adiw	r24, 0x01	; 1
    17ba:	a1 1d       	adc	r26, r1
    17bc:	b1 1d       	adc	r27, r1
    17be:	8e 83       	std	Y+6, r24	; 0x06
    17c0:	9f 83       	std	Y+7, r25	; 0x07
    17c2:	a8 87       	std	Y+8, r26	; 0x08
    17c4:	b9 87       	std	Y+9, r27	; 0x09
		Local_f32NumOVF = Local_f32NumOVF-(u32)Local_f32NumOVF;
    17c6:	6a 85       	ldd	r22, Y+10	; 0x0a
    17c8:	7b 85       	ldd	r23, Y+11	; 0x0b
    17ca:	8c 85       	ldd	r24, Y+12	; 0x0c
    17cc:	9d 85       	ldd	r25, Y+13	; 0x0d
    17ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17d2:	dc 01       	movw	r26, r24
    17d4:	cb 01       	movw	r24, r22
    17d6:	bc 01       	movw	r22, r24
    17d8:	cd 01       	movw	r24, r26
    17da:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    17de:	9b 01       	movw	r18, r22
    17e0:	ac 01       	movw	r20, r24
    17e2:	6a 85       	ldd	r22, Y+10	; 0x0a
    17e4:	7b 85       	ldd	r23, Y+11	; 0x0b
    17e6:	8c 85       	ldd	r24, Y+12	; 0x0c
    17e8:	9d 85       	ldd	r25, Y+13	; 0x0d
    17ea:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    17ee:	dc 01       	movw	r26, r24
    17f0:	cb 01       	movw	r24, r22
    17f2:	8a 87       	std	Y+10, r24	; 0x0a
    17f4:	9b 87       	std	Y+11, r25	; 0x0b
    17f6:	ac 87       	std	Y+12, r26	; 0x0c
    17f8:	bd 87       	std	Y+13, r27	; 0x0d
		u8 Local_u8Preload =256 - (Local_f32NumOVF * 256);
    17fa:	6a 85       	ldd	r22, Y+10	; 0x0a
    17fc:	7b 85       	ldd	r23, Y+11	; 0x0b
    17fe:	8c 85       	ldd	r24, Y+12	; 0x0c
    1800:	9d 85       	ldd	r25, Y+13	; 0x0d
    1802:	20 e0       	ldi	r18, 0x00	; 0
    1804:	30 e0       	ldi	r19, 0x00	; 0
    1806:	40 e8       	ldi	r20, 0x80	; 128
    1808:	53 ec       	ldi	r21, 0xC3	; 195
    180a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    180e:	dc 01       	movw	r26, r24
    1810:	cb 01       	movw	r24, r22
    1812:	bc 01       	movw	r22, r24
    1814:	cd 01       	movw	r24, r26
    1816:	20 e0       	ldi	r18, 0x00	; 0
    1818:	30 e0       	ldi	r19, 0x00	; 0
    181a:	40 e8       	ldi	r20, 0x80	; 128
    181c:	53 e4       	ldi	r21, 0x43	; 67
    181e:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    1822:	dc 01       	movw	r26, r24
    1824:	cb 01       	movw	r24, r22
    1826:	bc 01       	movw	r22, r24
    1828:	cd 01       	movw	r24, r26
    182a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    182e:	dc 01       	movw	r26, r24
    1830:	cb 01       	movw	r24, r22
    1832:	8d 83       	std	Y+5, r24	; 0x05
		TCNT0=Local_u8Preload;
    1834:	e2 e5       	ldi	r30, 0x52	; 82
    1836:	f0 e0       	ldi	r31, 0x00	; 0
    1838:	8d 81       	ldd	r24, Y+5	; 0x05
    183a:	80 83       	st	Z, r24
    183c:	1b c0       	rjmp	.+54     	; 0x1874 <TIMER0_enuSetSychDelay+0x176>
		while(Local_u32NumOVF>0)
		{
			while(((TIFR>>TIFR_TOV0)&1)==0);//wait flag
    183e:	e8 e5       	ldi	r30, 0x58	; 88
    1840:	f0 e0       	ldi	r31, 0x00	; 0
    1842:	80 81       	ld	r24, Z
    1844:	88 2f       	mov	r24, r24
    1846:	90 e0       	ldi	r25, 0x00	; 0
    1848:	81 70       	andi	r24, 0x01	; 1
    184a:	90 70       	andi	r25, 0x00	; 0
    184c:	00 97       	sbiw	r24, 0x00	; 0
    184e:	b9 f3       	breq	.-18     	; 0x183e <TIMER0_enuSetSychDelay+0x140>
			TIFR |=(1<<0); // clear it by write one
    1850:	a8 e5       	ldi	r26, 0x58	; 88
    1852:	b0 e0       	ldi	r27, 0x00	; 0
    1854:	e8 e5       	ldi	r30, 0x58	; 88
    1856:	f0 e0       	ldi	r31, 0x00	; 0
    1858:	80 81       	ld	r24, Z
    185a:	81 60       	ori	r24, 0x01	; 1
    185c:	8c 93       	st	X, r24
			Local_u32NumOVF--;
    185e:	8e 81       	ldd	r24, Y+6	; 0x06
    1860:	9f 81       	ldd	r25, Y+7	; 0x07
    1862:	a8 85       	ldd	r26, Y+8	; 0x08
    1864:	b9 85       	ldd	r27, Y+9	; 0x09
    1866:	01 97       	sbiw	r24, 0x01	; 1
    1868:	a1 09       	sbc	r26, r1
    186a:	b1 09       	sbc	r27, r1
    186c:	8e 83       	std	Y+6, r24	; 0x06
    186e:	9f 83       	std	Y+7, r25	; 0x07
    1870:	a8 87       	std	Y+8, r26	; 0x08
    1872:	b9 87       	std	Y+9, r27	; 0x09
	{
		u32 Local_u32NumOVF =(u32)Local_f32NumOVF +1;
		Local_f32NumOVF = Local_f32NumOVF-(u32)Local_f32NumOVF;
		u8 Local_u8Preload =256 - (Local_f32NumOVF * 256);
		TCNT0=Local_u8Preload;
		while(Local_u32NumOVF>0)
    1874:	8e 81       	ldd	r24, Y+6	; 0x06
    1876:	9f 81       	ldd	r25, Y+7	; 0x07
    1878:	a8 85       	ldd	r26, Y+8	; 0x08
    187a:	b9 85       	ldd	r27, Y+9	; 0x09
    187c:	00 97       	sbiw	r24, 0x00	; 0
    187e:	a1 05       	cpc	r26, r1
    1880:	b1 05       	cpc	r27, r1
    1882:	e9 f6       	brne	.-70     	; 0x183e <TIMER0_enuSetSychDelay+0x140>
    1884:	30 c0       	rjmp	.+96     	; 0x18e6 <TIMER0_enuSetSychDelay+0x1e8>

		}
	}
	else
	{
		u32 Local_u32NumOVF =(u32)Local_f32NumOVF;
    1886:	6a 85       	ldd	r22, Y+10	; 0x0a
    1888:	7b 85       	ldd	r23, Y+11	; 0x0b
    188a:	8c 85       	ldd	r24, Y+12	; 0x0c
    188c:	9d 85       	ldd	r25, Y+13	; 0x0d
    188e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1892:	dc 01       	movw	r26, r24
    1894:	cb 01       	movw	r24, r22
    1896:	89 83       	std	Y+1, r24	; 0x01
    1898:	9a 83       	std	Y+2, r25	; 0x02
    189a:	ab 83       	std	Y+3, r26	; 0x03
    189c:	bc 83       	std	Y+4, r27	; 0x04
    189e:	1b c0       	rjmp	.+54     	; 0x18d6 <TIMER0_enuSetSychDelay+0x1d8>
		while(Local_u32NumOVF>0)
		{
			while(((TIFR>>TIFR_TOV0)&1)==0);
    18a0:	e8 e5       	ldi	r30, 0x58	; 88
    18a2:	f0 e0       	ldi	r31, 0x00	; 0
    18a4:	80 81       	ld	r24, Z
    18a6:	88 2f       	mov	r24, r24
    18a8:	90 e0       	ldi	r25, 0x00	; 0
    18aa:	81 70       	andi	r24, 0x01	; 1
    18ac:	90 70       	andi	r25, 0x00	; 0
    18ae:	00 97       	sbiw	r24, 0x00	; 0
    18b0:	b9 f3       	breq	.-18     	; 0x18a0 <TIMER0_enuSetSychDelay+0x1a2>
			TIFR |=(1<<0);
    18b2:	a8 e5       	ldi	r26, 0x58	; 88
    18b4:	b0 e0       	ldi	r27, 0x00	; 0
    18b6:	e8 e5       	ldi	r30, 0x58	; 88
    18b8:	f0 e0       	ldi	r31, 0x00	; 0
    18ba:	80 81       	ld	r24, Z
    18bc:	81 60       	ori	r24, 0x01	; 1
    18be:	8c 93       	st	X, r24
			Local_u32NumOVF--;
    18c0:	89 81       	ldd	r24, Y+1	; 0x01
    18c2:	9a 81       	ldd	r25, Y+2	; 0x02
    18c4:	ab 81       	ldd	r26, Y+3	; 0x03
    18c6:	bc 81       	ldd	r27, Y+4	; 0x04
    18c8:	01 97       	sbiw	r24, 0x01	; 1
    18ca:	a1 09       	sbc	r26, r1
    18cc:	b1 09       	sbc	r27, r1
    18ce:	89 83       	std	Y+1, r24	; 0x01
    18d0:	9a 83       	std	Y+2, r25	; 0x02
    18d2:	ab 83       	std	Y+3, r26	; 0x03
    18d4:	bc 83       	std	Y+4, r27	; 0x04
		}
	}
	else
	{
		u32 Local_u32NumOVF =(u32)Local_f32NumOVF;
		while(Local_u32NumOVF>0)
    18d6:	89 81       	ldd	r24, Y+1	; 0x01
    18d8:	9a 81       	ldd	r25, Y+2	; 0x02
    18da:	ab 81       	ldd	r26, Y+3	; 0x03
    18dc:	bc 81       	ldd	r27, Y+4	; 0x04
    18de:	00 97       	sbiw	r24, 0x00	; 0
    18e0:	a1 05       	cpc	r26, r1
    18e2:	b1 05       	cpc	r27, r1
    18e4:	e9 f6       	brne	.-70     	; 0x18a0 <TIMER0_enuSetSychDelay+0x1a2>

		}
	}


	return Local_enuErrorState;
    18e6:	8a 89       	ldd	r24, Y+18	; 0x12
}
    18e8:	66 96       	adiw	r28, 0x16	; 22
    18ea:	0f b6       	in	r0, 0x3f	; 63
    18ec:	f8 94       	cli
    18ee:	de bf       	out	0x3e, r29	; 62
    18f0:	0f be       	out	0x3f, r0	; 63
    18f2:	cd bf       	out	0x3d, r28	; 61
    18f4:	cf 91       	pop	r28
    18f6:	df 91       	pop	r29
    18f8:	08 95       	ret

000018fa <__vector_11>:



ISR(VECT_TIMER0_OVF)
{
    18fa:	1f 92       	push	r1
    18fc:	0f 92       	push	r0
    18fe:	0f b6       	in	r0, 0x3f	; 63
    1900:	0f 92       	push	r0
    1902:	11 24       	eor	r1, r1
    1904:	2f 93       	push	r18
    1906:	3f 93       	push	r19
    1908:	4f 93       	push	r20
    190a:	5f 93       	push	r21
    190c:	6f 93       	push	r22
    190e:	7f 93       	push	r23
    1910:	8f 93       	push	r24
    1912:	9f 93       	push	r25
    1914:	af 93       	push	r26
    1916:	bf 93       	push	r27
    1918:	ef 93       	push	r30
    191a:	ff 93       	push	r31
    191c:	df 93       	push	r29
    191e:	cf 93       	push	r28
    1920:	cd b7       	in	r28, 0x3d	; 61
    1922:	de b7       	in	r29, 0x3e	; 62
	if (TIMER0_APfunCallBack[TIMER0_DELAY_CALLBACK] != NULL && (ISR_u32Counter == (TIMER0_u8NumberOfOverflow * TIMER0_u32StartDelay)) && (ISR_u32ActionCounter * TIMER0_u32StartDelay) <= TIMER0_u32StopTime)
    1924:	80 91 b0 01 	lds	r24, 0x01B0
    1928:	90 91 b1 01 	lds	r25, 0x01B1
    192c:	00 97       	sbiw	r24, 0x00	; 0
    192e:	09 f4       	brne	.+2      	; 0x1932 <__vector_11+0x38>
    1930:	6a c0       	rjmp	.+212    	; 0x1a06 <__vector_11+0x10c>
    1932:	80 91 a2 01 	lds	r24, 0x01A2
    1936:	88 2f       	mov	r24, r24
    1938:	90 e0       	ldi	r25, 0x00	; 0
    193a:	a0 e0       	ldi	r26, 0x00	; 0
    193c:	b0 e0       	ldi	r27, 0x00	; 0
    193e:	20 91 a4 01 	lds	r18, 0x01A4
    1942:	30 91 a5 01 	lds	r19, 0x01A5
    1946:	40 91 a6 01 	lds	r20, 0x01A6
    194a:	50 91 a7 01 	lds	r21, 0x01A7
    194e:	bc 01       	movw	r22, r24
    1950:	cd 01       	movw	r24, r26
    1952:	0e 94 b0 24 	call	0x4960	; 0x4960 <__mulsi3>
    1956:	9b 01       	movw	r18, r22
    1958:	ac 01       	movw	r20, r24
    195a:	80 91 ac 01 	lds	r24, 0x01AC
    195e:	90 91 ad 01 	lds	r25, 0x01AD
    1962:	a0 91 ae 01 	lds	r26, 0x01AE
    1966:	b0 91 af 01 	lds	r27, 0x01AF
    196a:	28 17       	cp	r18, r24
    196c:	39 07       	cpc	r19, r25
    196e:	4a 07       	cpc	r20, r26
    1970:	5b 07       	cpc	r21, r27
    1972:	09 f0       	breq	.+2      	; 0x1976 <__vector_11+0x7c>
    1974:	48 c0       	rjmp	.+144    	; 0x1a06 <__vector_11+0x10c>
    1976:	80 91 68 01 	lds	r24, 0x0168
    197a:	90 91 69 01 	lds	r25, 0x0169
    197e:	a0 91 6a 01 	lds	r26, 0x016A
    1982:	b0 91 6b 01 	lds	r27, 0x016B
    1986:	20 91 a4 01 	lds	r18, 0x01A4
    198a:	30 91 a5 01 	lds	r19, 0x01A5
    198e:	40 91 a6 01 	lds	r20, 0x01A6
    1992:	50 91 a7 01 	lds	r21, 0x01A7
    1996:	bc 01       	movw	r22, r24
    1998:	cd 01       	movw	r24, r26
    199a:	0e 94 b0 24 	call	0x4960	; 0x4960 <__mulsi3>
    199e:	9b 01       	movw	r18, r22
    19a0:	ac 01       	movw	r20, r24
    19a2:	80 91 a8 01 	lds	r24, 0x01A8
    19a6:	90 91 a9 01 	lds	r25, 0x01A9
    19aa:	a0 91 aa 01 	lds	r26, 0x01AA
    19ae:	b0 91 ab 01 	lds	r27, 0x01AB
    19b2:	82 17       	cp	r24, r18
    19b4:	93 07       	cpc	r25, r19
    19b6:	a4 07       	cpc	r26, r20
    19b8:	b5 07       	cpc	r27, r21
    19ba:	28 f1       	brcs	.+74     	; 0x1a06 <__vector_11+0x10c>
	{
		ISR_u32ActionCounter++;
    19bc:	80 91 68 01 	lds	r24, 0x0168
    19c0:	90 91 69 01 	lds	r25, 0x0169
    19c4:	a0 91 6a 01 	lds	r26, 0x016A
    19c8:	b0 91 6b 01 	lds	r27, 0x016B
    19cc:	01 96       	adiw	r24, 0x01	; 1
    19ce:	a1 1d       	adc	r26, r1
    19d0:	b1 1d       	adc	r27, r1
    19d2:	80 93 68 01 	sts	0x0168, r24
    19d6:	90 93 69 01 	sts	0x0169, r25
    19da:	a0 93 6a 01 	sts	0x016A, r26
    19de:	b0 93 6b 01 	sts	0x016B, r27
		TIMER0_APfunCallBack[TIMER0_DELAY_CALLBACK](TIMER0_APvidParameter[TIMER0_DELAY_CALLBACK]);
    19e2:	e0 91 b0 01 	lds	r30, 0x01B0
    19e6:	f0 91 b1 01 	lds	r31, 0x01B1
    19ea:	80 91 b6 01 	lds	r24, 0x01B6
    19ee:	90 91 b7 01 	lds	r25, 0x01B7
    19f2:	09 95       	icall
		ISR_u32Counter=0;
    19f4:	10 92 ac 01 	sts	0x01AC, r1
    19f8:	10 92 ad 01 	sts	0x01AD, r1
    19fc:	10 92 ae 01 	sts	0x01AE, r1
    1a00:	10 92 af 01 	sts	0x01AF, r1
    1a04:	33 c0       	rjmp	.+102    	; 0x1a6c <__vector_11+0x172>
	}
	else
	{
		ISR_u32Counter++;
    1a06:	80 91 ac 01 	lds	r24, 0x01AC
    1a0a:	90 91 ad 01 	lds	r25, 0x01AD
    1a0e:	a0 91 ae 01 	lds	r26, 0x01AE
    1a12:	b0 91 af 01 	lds	r27, 0x01AF
    1a16:	01 96       	adiw	r24, 0x01	; 1
    1a18:	a1 1d       	adc	r26, r1
    1a1a:	b1 1d       	adc	r27, r1
    1a1c:	80 93 ac 01 	sts	0x01AC, r24
    1a20:	90 93 ad 01 	sts	0x01AD, r25
    1a24:	a0 93 ae 01 	sts	0x01AE, r26
    1a28:	b0 93 af 01 	sts	0x01AF, r27
		if ( ((ISR_u32Counter % TIMER0_u8NumberOfOverflow) ==0 ) && TIMER0_u8Preload !=0 )
    1a2c:	80 91 ac 01 	lds	r24, 0x01AC
    1a30:	90 91 ad 01 	lds	r25, 0x01AD
    1a34:	a0 91 ae 01 	lds	r26, 0x01AE
    1a38:	b0 91 af 01 	lds	r27, 0x01AF
    1a3c:	20 91 a2 01 	lds	r18, 0x01A2
    1a40:	22 2f       	mov	r18, r18
    1a42:	30 e0       	ldi	r19, 0x00	; 0
    1a44:	40 e0       	ldi	r20, 0x00	; 0
    1a46:	50 e0       	ldi	r21, 0x00	; 0
    1a48:	bc 01       	movw	r22, r24
    1a4a:	cd 01       	movw	r24, r26
    1a4c:	0e 94 e3 24 	call	0x49c6	; 0x49c6 <__udivmodsi4>
    1a50:	dc 01       	movw	r26, r24
    1a52:	cb 01       	movw	r24, r22
    1a54:	00 97       	sbiw	r24, 0x00	; 0
    1a56:	a1 05       	cpc	r26, r1
    1a58:	b1 05       	cpc	r27, r1
    1a5a:	41 f4       	brne	.+16     	; 0x1a6c <__vector_11+0x172>
    1a5c:	80 91 a3 01 	lds	r24, 0x01A3
    1a60:	88 23       	and	r24, r24
    1a62:	21 f0       	breq	.+8      	; 0x1a6c <__vector_11+0x172>
		{
			TIMER0_enuSetPreload(TIMER0_u8Preload);
    1a64:	80 91 a3 01 	lds	r24, 0x01A3
    1a68:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <TIMER0_enuSetPreload>
		}
	}

	if (TIMER0_APfunCallBack[TIMER0_OVF_CALLBACK] != NULL)
    1a6c:	80 91 b2 01 	lds	r24, 0x01B2
    1a70:	90 91 b3 01 	lds	r25, 0x01B3
    1a74:	00 97       	sbiw	r24, 0x00	; 0
    1a76:	49 f0       	breq	.+18     	; 0x1a8a <__vector_11+0x190>
	{
		TIMER0_APfunCallBack[TIMER0_OVF_CALLBACK](TIMER0_APvidParameter[TIMER0_OVF_CALLBACK]);
    1a78:	e0 91 b2 01 	lds	r30, 0x01B2
    1a7c:	f0 91 b3 01 	lds	r31, 0x01B3
    1a80:	80 91 b8 01 	lds	r24, 0x01B8
    1a84:	90 91 b9 01 	lds	r25, 0x01B9
    1a88:	09 95       	icall
	}

}
    1a8a:	cf 91       	pop	r28
    1a8c:	df 91       	pop	r29
    1a8e:	ff 91       	pop	r31
    1a90:	ef 91       	pop	r30
    1a92:	bf 91       	pop	r27
    1a94:	af 91       	pop	r26
    1a96:	9f 91       	pop	r25
    1a98:	8f 91       	pop	r24
    1a9a:	7f 91       	pop	r23
    1a9c:	6f 91       	pop	r22
    1a9e:	5f 91       	pop	r21
    1aa0:	4f 91       	pop	r20
    1aa2:	3f 91       	pop	r19
    1aa4:	2f 91       	pop	r18
    1aa6:	0f 90       	pop	r0
    1aa8:	0f be       	out	0x3f, r0	; 63
    1aaa:	0f 90       	pop	r0
    1aac:	1f 90       	pop	r1
    1aae:	18 95       	reti

00001ab0 <__vector_10>:

ISR(VECT_TIMER0_CTC)
{
    1ab0:	1f 92       	push	r1
    1ab2:	0f 92       	push	r0
    1ab4:	0f b6       	in	r0, 0x3f	; 63
    1ab6:	0f 92       	push	r0
    1ab8:	11 24       	eor	r1, r1
    1aba:	2f 93       	push	r18
    1abc:	3f 93       	push	r19
    1abe:	4f 93       	push	r20
    1ac0:	5f 93       	push	r21
    1ac2:	6f 93       	push	r22
    1ac4:	7f 93       	push	r23
    1ac6:	8f 93       	push	r24
    1ac8:	9f 93       	push	r25
    1aca:	af 93       	push	r26
    1acc:	bf 93       	push	r27
    1ace:	ef 93       	push	r30
    1ad0:	ff 93       	push	r31
    1ad2:	df 93       	push	r29
    1ad4:	cf 93       	push	r28
    1ad6:	cd b7       	in	r28, 0x3d	; 61
    1ad8:	de b7       	in	r29, 0x3e	; 62
			TIMER0_enuSetPreload(TIMER0_u8Preload);
		}
	}
	*/

	if (TIMER0_APfunCallBack[TIMER0_CTC_CALLBACK] != NULL)
    1ada:	80 91 b4 01 	lds	r24, 0x01B4
    1ade:	90 91 b5 01 	lds	r25, 0x01B5
    1ae2:	00 97       	sbiw	r24, 0x00	; 0
    1ae4:	49 f0       	breq	.+18     	; 0x1af8 <__vector_10+0x48>
	{
		TIMER0_APfunCallBack[TIMER0_CTC_CALLBACK](TIMER0_APvidParameter[TIMER0_CTC_CALLBACK]);
    1ae6:	e0 91 b4 01 	lds	r30, 0x01B4
    1aea:	f0 91 b5 01 	lds	r31, 0x01B5
    1aee:	80 91 ba 01 	lds	r24, 0x01BA
    1af2:	90 91 bb 01 	lds	r25, 0x01BB
    1af6:	09 95       	icall
	}
}
    1af8:	cf 91       	pop	r28
    1afa:	df 91       	pop	r29
    1afc:	ff 91       	pop	r31
    1afe:	ef 91       	pop	r30
    1b00:	bf 91       	pop	r27
    1b02:	af 91       	pop	r26
    1b04:	9f 91       	pop	r25
    1b06:	8f 91       	pop	r24
    1b08:	7f 91       	pop	r23
    1b0a:	6f 91       	pop	r22
    1b0c:	5f 91       	pop	r21
    1b0e:	4f 91       	pop	r20
    1b10:	3f 91       	pop	r19
    1b12:	2f 91       	pop	r18
    1b14:	0f 90       	pop	r0
    1b16:	0f be       	out	0x3f, r0	; 63
    1b18:	0f 90       	pop	r0
    1b1a:	1f 90       	pop	r1
    1b1c:	18 95       	reti

00001b1e <ICU_enuInit>:

static void (*ICU_PvCallBackFunc) (void*)=NULL;
static void *ICU_PvCallBackParameter=NULL;

ES_t ICU_enuInit(void)
{
    1b1e:	df 93       	push	r29
    1b20:	cf 93       	push	r28
    1b22:	0f 92       	push	r0
    1b24:	cd b7       	in	r28, 0x3d	; 61
    1b26:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState=ES_NOK;
    1b28:	19 82       	std	Y+1, r1	; 0x01

#if ICU_TRIGGER_SOURCE==ICU_RISING_EDGE
	TCCR1B |= (1<<TCCR1B_ICES1);
    1b2a:	ae e4       	ldi	r26, 0x4E	; 78
    1b2c:	b0 e0       	ldi	r27, 0x00	; 0
    1b2e:	ee e4       	ldi	r30, 0x4E	; 78
    1b30:	f0 e0       	ldi	r31, 0x00	; 0
    1b32:	80 81       	ld	r24, Z
    1b34:	80 64       	ori	r24, 0x40	; 64
    1b36:	8c 93       	st	X, r24
	Local_enuErrorState=ES_OK;
    1b38:	81 e0       	ldi	r24, 0x01	; 1
    1b3a:	89 83       	std	Y+1, r24	; 0x01
#error "Attention!!, your ICU_TRIGGER_SOURCE Selection is Wrong...."

#endif


	return Local_enuErrorState;
    1b3c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b3e:	0f 90       	pop	r0
    1b40:	cf 91       	pop	r28
    1b42:	df 91       	pop	r29
    1b44:	08 95       	ret

00001b46 <ICU_enuEnableINTERRUPT>:

ES_t ICU_enuEnableINTERRUPT(void)
{
    1b46:	df 93       	push	r29
    1b48:	cf 93       	push	r28
    1b4a:	0f 92       	push	r0
    1b4c:	cd b7       	in	r28, 0x3d	; 61
    1b4e:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState=ES_NOK;
    1b50:	19 82       	std	Y+1, r1	; 0x01

	TIMSK |=(1<<TIMSK_TICIE1);
    1b52:	a9 e5       	ldi	r26, 0x59	; 89
    1b54:	b0 e0       	ldi	r27, 0x00	; 0
    1b56:	e9 e5       	ldi	r30, 0x59	; 89
    1b58:	f0 e0       	ldi	r31, 0x00	; 0
    1b5a:	80 81       	ld	r24, Z
    1b5c:	80 62       	ori	r24, 0x20	; 32
    1b5e:	8c 93       	st	X, r24
	Local_enuErrorState=ES_OK;
    1b60:	81 e0       	ldi	r24, 0x01	; 1
    1b62:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    1b64:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b66:	0f 90       	pop	r0
    1b68:	cf 91       	pop	r28
    1b6a:	df 91       	pop	r29
    1b6c:	08 95       	ret

00001b6e <ICU_enuDisableINTERRUPT>:

ES_t ICU_enuDisableINTERRUPT(void)
{
    1b6e:	df 93       	push	r29
    1b70:	cf 93       	push	r28
    1b72:	0f 92       	push	r0
    1b74:	cd b7       	in	r28, 0x3d	; 61
    1b76:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState=ES_NOK;
    1b78:	19 82       	std	Y+1, r1	; 0x01

	TIMSK &=~(1<<TIMSK_TICIE1);
    1b7a:	a9 e5       	ldi	r26, 0x59	; 89
    1b7c:	b0 e0       	ldi	r27, 0x00	; 0
    1b7e:	e9 e5       	ldi	r30, 0x59	; 89
    1b80:	f0 e0       	ldi	r31, 0x00	; 0
    1b82:	80 81       	ld	r24, Z
    1b84:	8f 7d       	andi	r24, 0xDF	; 223
    1b86:	8c 93       	st	X, r24
	Local_enuErrorState=ES_OK;
    1b88:	81 e0       	ldi	r24, 0x01	; 1
    1b8a:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    1b8c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b8e:	0f 90       	pop	r0
    1b90:	cf 91       	pop	r28
    1b92:	df 91       	pop	r29
    1b94:	08 95       	ret

00001b96 <ICU_enuSetTriggerEdge>:

ES_t ICU_enuSetTriggerEdge(u8 Copy_u8Edge)
{
    1b96:	df 93       	push	r29
    1b98:	cf 93       	push	r28
    1b9a:	00 d0       	rcall	.+0      	; 0x1b9c <ICU_enuSetTriggerEdge+0x6>
    1b9c:	cd b7       	in	r28, 0x3d	; 61
    1b9e:	de b7       	in	r29, 0x3e	; 62
    1ba0:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState=ES_NOK;
    1ba2:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Edge==ICU_RISING_EDGE)
    1ba4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ba6:	81 30       	cpi	r24, 0x01	; 1
    1ba8:	51 f4       	brne	.+20     	; 0x1bbe <ICU_enuSetTriggerEdge+0x28>
	{
		TCCR1B |= (1<<TCCR1B_ICES1);
    1baa:	ae e4       	ldi	r26, 0x4E	; 78
    1bac:	b0 e0       	ldi	r27, 0x00	; 0
    1bae:	ee e4       	ldi	r30, 0x4E	; 78
    1bb0:	f0 e0       	ldi	r31, 0x00	; 0
    1bb2:	80 81       	ld	r24, Z
    1bb4:	80 64       	ori	r24, 0x40	; 64
    1bb6:	8c 93       	st	X, r24
		Local_enuErrorState=ES_OK;
    1bb8:	81 e0       	ldi	r24, 0x01	; 1
    1bba:	89 83       	std	Y+1, r24	; 0x01
    1bbc:	0f c0       	rjmp	.+30     	; 0x1bdc <ICU_enuSetTriggerEdge+0x46>
	}
	else if(Copy_u8Edge==ICU_FALLING_EDGE)
    1bbe:	8a 81       	ldd	r24, Y+2	; 0x02
    1bc0:	82 30       	cpi	r24, 0x02	; 2
    1bc2:	51 f4       	brne	.+20     	; 0x1bd8 <ICU_enuSetTriggerEdge+0x42>
	{
		TCCR1B &=~(1<<TCCR1B_ICES1);
    1bc4:	ae e4       	ldi	r26, 0x4E	; 78
    1bc6:	b0 e0       	ldi	r27, 0x00	; 0
    1bc8:	ee e4       	ldi	r30, 0x4E	; 78
    1bca:	f0 e0       	ldi	r31, 0x00	; 0
    1bcc:	80 81       	ld	r24, Z
    1bce:	8f 7b       	andi	r24, 0xBF	; 191
    1bd0:	8c 93       	st	X, r24
		Local_enuErrorState=ES_OK;
    1bd2:	81 e0       	ldi	r24, 0x01	; 1
    1bd4:	89 83       	std	Y+1, r24	; 0x01
    1bd6:	02 c0       	rjmp	.+4      	; 0x1bdc <ICU_enuSetTriggerEdge+0x46>
	}
	else
	{
		Local_enuErrorState=ES_OUT_OF_RANGE;
    1bd8:	83 e0       	ldi	r24, 0x03	; 3
    1bda:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    1bdc:	89 81       	ldd	r24, Y+1	; 0x01
}
    1bde:	0f 90       	pop	r0
    1be0:	0f 90       	pop	r0
    1be2:	cf 91       	pop	r28
    1be4:	df 91       	pop	r29
    1be6:	08 95       	ret

00001be8 <ICU_enuReadInputCapture>:

ES_t ICU_enuReadInputCapture(u16 *Copy_pu16Value)
{
    1be8:	df 93       	push	r29
    1bea:	cf 93       	push	r28
    1bec:	00 d0       	rcall	.+0      	; 0x1bee <ICU_enuReadInputCapture+0x6>
    1bee:	0f 92       	push	r0
    1bf0:	cd b7       	in	r28, 0x3d	; 61
    1bf2:	de b7       	in	r29, 0x3e	; 62
    1bf4:	9b 83       	std	Y+3, r25	; 0x03
    1bf6:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState=ES_NOK;
    1bf8:	19 82       	std	Y+1, r1	; 0x01

	*Copy_pu16Value=ICR1;
    1bfa:	e6 e4       	ldi	r30, 0x46	; 70
    1bfc:	f0 e0       	ldi	r31, 0x00	; 0
    1bfe:	80 81       	ld	r24, Z
    1c00:	91 81       	ldd	r25, Z+1	; 0x01
    1c02:	ea 81       	ldd	r30, Y+2	; 0x02
    1c04:	fb 81       	ldd	r31, Y+3	; 0x03
    1c06:	91 83       	std	Z+1, r25	; 0x01
    1c08:	80 83       	st	Z, r24
	Local_enuErrorState=ES_OK;
    1c0a:	81 e0       	ldi	r24, 0x01	; 1
    1c0c:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    1c0e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c10:	0f 90       	pop	r0
    1c12:	0f 90       	pop	r0
    1c14:	0f 90       	pop	r0
    1c16:	cf 91       	pop	r28
    1c18:	df 91       	pop	r29
    1c1a:	08 95       	ret

00001c1c <ICU_enuCallBack>:


ES_t ICU_enuCallBack(void (*Copy_PfunCallBack)(void*) , void * Copy_PvidParameter)
{
    1c1c:	df 93       	push	r29
    1c1e:	cf 93       	push	r28
    1c20:	00 d0       	rcall	.+0      	; 0x1c22 <ICU_enuCallBack+0x6>
    1c22:	00 d0       	rcall	.+0      	; 0x1c24 <ICU_enuCallBack+0x8>
    1c24:	0f 92       	push	r0
    1c26:	cd b7       	in	r28, 0x3d	; 61
    1c28:	de b7       	in	r29, 0x3e	; 62
    1c2a:	9b 83       	std	Y+3, r25	; 0x03
    1c2c:	8a 83       	std	Y+2, r24	; 0x02
    1c2e:	7d 83       	std	Y+5, r23	; 0x05
    1c30:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrorState=ES_NOK;
    1c32:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_PfunCallBack!=NULL)
    1c34:	8a 81       	ldd	r24, Y+2	; 0x02
    1c36:	9b 81       	ldd	r25, Y+3	; 0x03
    1c38:	00 97       	sbiw	r24, 0x00	; 0
    1c3a:	79 f0       	breq	.+30     	; 0x1c5a <ICU_enuCallBack+0x3e>
	{

		ICU_PvCallBackFunc  = Copy_PfunCallBack;
    1c3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c3e:	9b 81       	ldd	r25, Y+3	; 0x03
    1c40:	90 93 c5 01 	sts	0x01C5, r25
    1c44:	80 93 c4 01 	sts	0x01C4, r24
		ICU_PvCallBackParameter = Copy_PvidParameter;
    1c48:	8c 81       	ldd	r24, Y+4	; 0x04
    1c4a:	9d 81       	ldd	r25, Y+5	; 0x05
    1c4c:	90 93 c7 01 	sts	0x01C7, r25
    1c50:	80 93 c6 01 	sts	0x01C6, r24
		Local_enuErrorState=ES_OK;
    1c54:	81 e0       	ldi	r24, 0x01	; 1
    1c56:	89 83       	std	Y+1, r24	; 0x01
    1c58:	02 c0       	rjmp	.+4      	; 0x1c5e <ICU_enuCallBack+0x42>
	}
	else
	{
		Local_enuErrorState =ES_NULL_POINTER;
    1c5a:	82 e0       	ldi	r24, 0x02	; 2
    1c5c:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    1c5e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c60:	0f 90       	pop	r0
    1c62:	0f 90       	pop	r0
    1c64:	0f 90       	pop	r0
    1c66:	0f 90       	pop	r0
    1c68:	0f 90       	pop	r0
    1c6a:	cf 91       	pop	r28
    1c6c:	df 91       	pop	r29
    1c6e:	08 95       	ret

00001c70 <__vector_6>:


ISR(VECT_TIMER1_ICU)
{
    1c70:	1f 92       	push	r1
    1c72:	0f 92       	push	r0
    1c74:	0f b6       	in	r0, 0x3f	; 63
    1c76:	0f 92       	push	r0
    1c78:	11 24       	eor	r1, r1
    1c7a:	2f 93       	push	r18
    1c7c:	3f 93       	push	r19
    1c7e:	4f 93       	push	r20
    1c80:	5f 93       	push	r21
    1c82:	6f 93       	push	r22
    1c84:	7f 93       	push	r23
    1c86:	8f 93       	push	r24
    1c88:	9f 93       	push	r25
    1c8a:	af 93       	push	r26
    1c8c:	bf 93       	push	r27
    1c8e:	ef 93       	push	r30
    1c90:	ff 93       	push	r31
    1c92:	df 93       	push	r29
    1c94:	cf 93       	push	r28
    1c96:	cd b7       	in	r28, 0x3d	; 61
    1c98:	de b7       	in	r29, 0x3e	; 62
	if (ICU_PvCallBackFunc != NULL)
    1c9a:	80 91 c4 01 	lds	r24, 0x01C4
    1c9e:	90 91 c5 01 	lds	r25, 0x01C5
    1ca2:	00 97       	sbiw	r24, 0x00	; 0
    1ca4:	49 f0       	breq	.+18     	; 0x1cb8 <__vector_6+0x48>
	{
		ICU_PvCallBackFunc(ICU_PvCallBackParameter);
    1ca6:	e0 91 c4 01 	lds	r30, 0x01C4
    1caa:	f0 91 c5 01 	lds	r31, 0x01C5
    1cae:	80 91 c6 01 	lds	r24, 0x01C6
    1cb2:	90 91 c7 01 	lds	r25, 0x01C7
    1cb6:	09 95       	icall
	}
}
    1cb8:	cf 91       	pop	r28
    1cba:	df 91       	pop	r29
    1cbc:	ff 91       	pop	r31
    1cbe:	ef 91       	pop	r30
    1cc0:	bf 91       	pop	r27
    1cc2:	af 91       	pop	r26
    1cc4:	9f 91       	pop	r25
    1cc6:	8f 91       	pop	r24
    1cc8:	7f 91       	pop	r23
    1cca:	6f 91       	pop	r22
    1ccc:	5f 91       	pop	r21
    1cce:	4f 91       	pop	r20
    1cd0:	3f 91       	pop	r19
    1cd2:	2f 91       	pop	r18
    1cd4:	0f 90       	pop	r0
    1cd6:	0f be       	out	0x3f, r0	; 63
    1cd8:	0f 90       	pop	r0
    1cda:	1f 90       	pop	r1
    1cdc:	18 95       	reti

00001cde <GIE_enuEnable>:

#include "GIE_priv.h"


ES_t GIE_enuEnable(void)
{
    1cde:	df 93       	push	r29
    1ce0:	cf 93       	push	r28
    1ce2:	0f 92       	push	r0
    1ce4:	cd b7       	in	r28, 0x3d	; 61
    1ce6:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState=ES_NOK;
    1ce8:	19 82       	std	Y+1, r1	; 0x01

	SREG |=(1<<7);
    1cea:	af e5       	ldi	r26, 0x5F	; 95
    1cec:	b0 e0       	ldi	r27, 0x00	; 0
    1cee:	ef e5       	ldi	r30, 0x5F	; 95
    1cf0:	f0 e0       	ldi	r31, 0x00	; 0
    1cf2:	80 81       	ld	r24, Z
    1cf4:	80 68       	ori	r24, 0x80	; 128
    1cf6:	8c 93       	st	X, r24
	Local_enuErrorState=ES_OK;
    1cf8:	81 e0       	ldi	r24, 0x01	; 1
    1cfa:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    1cfc:	89 81       	ldd	r24, Y+1	; 0x01
}
    1cfe:	0f 90       	pop	r0
    1d00:	cf 91       	pop	r28
    1d02:	df 91       	pop	r29
    1d04:	08 95       	ret

00001d06 <GIE_enuDisable>:


ES_t GIE_enuDisable(void)
{
    1d06:	df 93       	push	r29
    1d08:	cf 93       	push	r28
    1d0a:	0f 92       	push	r0
    1d0c:	cd b7       	in	r28, 0x3d	; 61
    1d0e:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState=ES_NOK;
    1d10:	19 82       	std	Y+1, r1	; 0x01

	SREG &=~(1<<7);
    1d12:	af e5       	ldi	r26, 0x5F	; 95
    1d14:	b0 e0       	ldi	r27, 0x00	; 0
    1d16:	ef e5       	ldi	r30, 0x5F	; 95
    1d18:	f0 e0       	ldi	r31, 0x00	; 0
    1d1a:	80 81       	ld	r24, Z
    1d1c:	8f 77       	andi	r24, 0x7F	; 127
    1d1e:	8c 93       	st	X, r24
	Local_enuErrorState=ES_OK;
    1d20:	81 e0       	ldi	r24, 0x01	; 1
    1d22:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    1d24:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d26:	0f 90       	pop	r0
    1d28:	cf 91       	pop	r28
    1d2a:	df 91       	pop	r29
    1d2c:	08 95       	ret

00001d2e <EINT_enuInit>:

static volatile void* EINT_ApvoidINT[3]={NULL,NULL,NULL};


ES_t EINT_enuInit(EINT_t* Copy_pstrEINT)
{
    1d2e:	df 93       	push	r29
    1d30:	cf 93       	push	r28
    1d32:	cd b7       	in	r28, 0x3d	; 61
    1d34:	de b7       	in	r29, 0x3e	; 62
    1d36:	2c 97       	sbiw	r28, 0x0c	; 12
    1d38:	0f b6       	in	r0, 0x3f	; 63
    1d3a:	f8 94       	cli
    1d3c:	de bf       	out	0x3e, r29	; 62
    1d3e:	0f be       	out	0x3f, r0	; 63
    1d40:	cd bf       	out	0x3d, r28	; 61
    1d42:	9c 83       	std	Y+4, r25	; 0x04
    1d44:	8b 83       	std	Y+3, r24	; 0x03
	ES_t Local_enuErrorstate=ES_NOK;
    1d46:	1a 82       	std	Y+2, r1	; 0x02

	if(Copy_pstrEINT!=NULL)
    1d48:	8b 81       	ldd	r24, Y+3	; 0x03
    1d4a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d4c:	00 97       	sbiw	r24, 0x00	; 0
    1d4e:	09 f4       	brne	.+2      	; 0x1d52 <EINT_enuInit+0x24>
    1d50:	42 c1       	rjmp	.+644    	; 0x1fd6 <EINT_enuInit+0x2a8>
	{
		u8 Local_u8Iter=0;
    1d52:	19 82       	std	Y+1, r1	; 0x01
		for(Local_u8Iter=0;Local_u8Iter<3;Local_u8Iter++)
    1d54:	19 82       	std	Y+1, r1	; 0x01
    1d56:	3a c1       	rjmp	.+628    	; 0x1fcc <EINT_enuInit+0x29e>
		{
			if(Copy_pstrEINT[Local_u8Iter].EINT_u8State==EINT_ENABLED)
    1d58:	89 81       	ldd	r24, Y+1	; 0x01
    1d5a:	88 2f       	mov	r24, r24
    1d5c:	90 e0       	ldi	r25, 0x00	; 0
    1d5e:	9c 01       	movw	r18, r24
    1d60:	22 0f       	add	r18, r18
    1d62:	33 1f       	adc	r19, r19
    1d64:	8b 81       	ldd	r24, Y+3	; 0x03
    1d66:	9c 81       	ldd	r25, Y+4	; 0x04
    1d68:	fc 01       	movw	r30, r24
    1d6a:	e2 0f       	add	r30, r18
    1d6c:	f3 1f       	adc	r31, r19
    1d6e:	80 81       	ld	r24, Z
    1d70:	81 30       	cpi	r24, 0x01	; 1
    1d72:	09 f0       	breq	.+2      	; 0x1d76 <EINT_enuInit+0x48>
    1d74:	28 c1       	rjmp	.+592    	; 0x1fc6 <EINT_enuInit+0x298>
			{
				switch(Local_u8Iter)
    1d76:	89 81       	ldd	r24, Y+1	; 0x01
    1d78:	28 2f       	mov	r18, r24
    1d7a:	30 e0       	ldi	r19, 0x00	; 0
    1d7c:	3c 87       	std	Y+12, r19	; 0x0c
    1d7e:	2b 87       	std	Y+11, r18	; 0x0b
    1d80:	8b 85       	ldd	r24, Y+11	; 0x0b
    1d82:	9c 85       	ldd	r25, Y+12	; 0x0c
    1d84:	81 30       	cpi	r24, 0x01	; 1
    1d86:	91 05       	cpc	r25, r1
    1d88:	09 f4       	brne	.+2      	; 0x1d8c <EINT_enuInit+0x5e>
    1d8a:	7b c0       	rjmp	.+246    	; 0x1e82 <EINT_enuInit+0x154>
    1d8c:	2b 85       	ldd	r18, Y+11	; 0x0b
    1d8e:	3c 85       	ldd	r19, Y+12	; 0x0c
    1d90:	22 30       	cpi	r18, 0x02	; 2
    1d92:	31 05       	cpc	r19, r1
    1d94:	09 f4       	brne	.+2      	; 0x1d98 <EINT_enuInit+0x6a>
    1d96:	e5 c0       	rjmp	.+458    	; 0x1f62 <EINT_enuInit+0x234>
    1d98:	8b 85       	ldd	r24, Y+11	; 0x0b
    1d9a:	9c 85       	ldd	r25, Y+12	; 0x0c
    1d9c:	00 97       	sbiw	r24, 0x00	; 0
    1d9e:	09 f0       	breq	.+2      	; 0x1da2 <EINT_enuInit+0x74>
    1da0:	12 c1       	rjmp	.+548    	; 0x1fc6 <EINT_enuInit+0x298>
				{
				case 0:
					GICR |=(1<<6);//set bit6 to 1
    1da2:	ab e5       	ldi	r26, 0x5B	; 91
    1da4:	b0 e0       	ldi	r27, 0x00	; 0
    1da6:	eb e5       	ldi	r30, 0x5B	; 91
    1da8:	f0 e0       	ldi	r31, 0x00	; 0
    1daa:	80 81       	ld	r24, Z
    1dac:	80 64       	ori	r24, 0x40	; 64
    1dae:	8c 93       	st	X, r24
					switch(Copy_pstrEINT[Local_u8Iter].EINT_u8SenceLevel)
    1db0:	89 81       	ldd	r24, Y+1	; 0x01
    1db2:	88 2f       	mov	r24, r24
    1db4:	90 e0       	ldi	r25, 0x00	; 0
    1db6:	9c 01       	movw	r18, r24
    1db8:	22 0f       	add	r18, r18
    1dba:	33 1f       	adc	r19, r19
    1dbc:	8b 81       	ldd	r24, Y+3	; 0x03
    1dbe:	9c 81       	ldd	r25, Y+4	; 0x04
    1dc0:	fc 01       	movw	r30, r24
    1dc2:	e2 0f       	add	r30, r18
    1dc4:	f3 1f       	adc	r31, r19
    1dc6:	81 81       	ldd	r24, Z+1	; 0x01
    1dc8:	28 2f       	mov	r18, r24
    1dca:	30 e0       	ldi	r19, 0x00	; 0
    1dcc:	3a 87       	std	Y+10, r19	; 0x0a
    1dce:	29 87       	std	Y+9, r18	; 0x09
    1dd0:	89 85       	ldd	r24, Y+9	; 0x09
    1dd2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dd4:	82 30       	cpi	r24, 0x02	; 2
    1dd6:	91 05       	cpc	r25, r1
    1dd8:	29 f1       	breq	.+74     	; 0x1e24 <EINT_enuInit+0xf6>
    1dda:	29 85       	ldd	r18, Y+9	; 0x09
    1ddc:	3a 85       	ldd	r19, Y+10	; 0x0a
    1dde:	23 30       	cpi	r18, 0x03	; 3
    1de0:	31 05       	cpc	r19, r1
    1de2:	34 f4       	brge	.+12     	; 0x1df0 <EINT_enuInit+0xc2>
    1de4:	89 85       	ldd	r24, Y+9	; 0x09
    1de6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1de8:	81 30       	cpi	r24, 0x01	; 1
    1dea:	91 05       	cpc	r25, r1
    1dec:	61 f0       	breq	.+24     	; 0x1e06 <EINT_enuInit+0xd8>
    1dee:	46 c0       	rjmp	.+140    	; 0x1e7c <EINT_enuInit+0x14e>
    1df0:	29 85       	ldd	r18, Y+9	; 0x09
    1df2:	3a 85       	ldd	r19, Y+10	; 0x0a
    1df4:	23 30       	cpi	r18, 0x03	; 3
    1df6:	31 05       	cpc	r19, r1
    1df8:	99 f1       	breq	.+102    	; 0x1e60 <EINT_enuInit+0x132>
    1dfa:	89 85       	ldd	r24, Y+9	; 0x09
    1dfc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dfe:	84 30       	cpi	r24, 0x04	; 4
    1e00:	91 05       	cpc	r25, r1
    1e02:	f9 f0       	breq	.+62     	; 0x1e42 <EINT_enuInit+0x114>
    1e04:	3b c0       	rjmp	.+118    	; 0x1e7c <EINT_enuInit+0x14e>
					{
					case EINT_LOW_LEVEL:
						MCUCR&=~(1<<1);
    1e06:	a5 e5       	ldi	r26, 0x55	; 85
    1e08:	b0 e0       	ldi	r27, 0x00	; 0
    1e0a:	e5 e5       	ldi	r30, 0x55	; 85
    1e0c:	f0 e0       	ldi	r31, 0x00	; 0
    1e0e:	80 81       	ld	r24, Z
    1e10:	8d 7f       	andi	r24, 0xFD	; 253
    1e12:	8c 93       	st	X, r24
						MCUCR&=~(1<<0);
    1e14:	a5 e5       	ldi	r26, 0x55	; 85
    1e16:	b0 e0       	ldi	r27, 0x00	; 0
    1e18:	e5 e5       	ldi	r30, 0x55	; 85
    1e1a:	f0 e0       	ldi	r31, 0x00	; 0
    1e1c:	80 81       	ld	r24, Z
    1e1e:	8e 7f       	andi	r24, 0xFE	; 254
    1e20:	8c 93       	st	X, r24
    1e22:	2c c0       	rjmp	.+88     	; 0x1e7c <EINT_enuInit+0x14e>
						break;
					case EINT_ANY_LOG_CHANGE:
						MCUCR&=~(1<<1);
    1e24:	a5 e5       	ldi	r26, 0x55	; 85
    1e26:	b0 e0       	ldi	r27, 0x00	; 0
    1e28:	e5 e5       	ldi	r30, 0x55	; 85
    1e2a:	f0 e0       	ldi	r31, 0x00	; 0
    1e2c:	80 81       	ld	r24, Z
    1e2e:	8d 7f       	andi	r24, 0xFD	; 253
    1e30:	8c 93       	st	X, r24
						MCUCR |=(1<<0);
    1e32:	a5 e5       	ldi	r26, 0x55	; 85
    1e34:	b0 e0       	ldi	r27, 0x00	; 0
    1e36:	e5 e5       	ldi	r30, 0x55	; 85
    1e38:	f0 e0       	ldi	r31, 0x00	; 0
    1e3a:	80 81       	ld	r24, Z
    1e3c:	81 60       	ori	r24, 0x01	; 1
    1e3e:	8c 93       	st	X, r24
    1e40:	1d c0       	rjmp	.+58     	; 0x1e7c <EINT_enuInit+0x14e>
						break;
					case EINT_FALLING_EDGE:
						MCUCR |=(1<<1);
    1e42:	a5 e5       	ldi	r26, 0x55	; 85
    1e44:	b0 e0       	ldi	r27, 0x00	; 0
    1e46:	e5 e5       	ldi	r30, 0x55	; 85
    1e48:	f0 e0       	ldi	r31, 0x00	; 0
    1e4a:	80 81       	ld	r24, Z
    1e4c:	82 60       	ori	r24, 0x02	; 2
    1e4e:	8c 93       	st	X, r24
						MCUCR&=~(1<<0);
    1e50:	a5 e5       	ldi	r26, 0x55	; 85
    1e52:	b0 e0       	ldi	r27, 0x00	; 0
    1e54:	e5 e5       	ldi	r30, 0x55	; 85
    1e56:	f0 e0       	ldi	r31, 0x00	; 0
    1e58:	80 81       	ld	r24, Z
    1e5a:	8e 7f       	andi	r24, 0xFE	; 254
    1e5c:	8c 93       	st	X, r24
    1e5e:	0e c0       	rjmp	.+28     	; 0x1e7c <EINT_enuInit+0x14e>
						break;
					case EINT_RISING_EDGE:
						MCUCR |=(1<<1);
    1e60:	a5 e5       	ldi	r26, 0x55	; 85
    1e62:	b0 e0       	ldi	r27, 0x00	; 0
    1e64:	e5 e5       	ldi	r30, 0x55	; 85
    1e66:	f0 e0       	ldi	r31, 0x00	; 0
    1e68:	80 81       	ld	r24, Z
    1e6a:	82 60       	ori	r24, 0x02	; 2
    1e6c:	8c 93       	st	X, r24
						MCUCR |=(1<<0);
    1e6e:	a5 e5       	ldi	r26, 0x55	; 85
    1e70:	b0 e0       	ldi	r27, 0x00	; 0
    1e72:	e5 e5       	ldi	r30, 0x55	; 85
    1e74:	f0 e0       	ldi	r31, 0x00	; 0
    1e76:	80 81       	ld	r24, Z
    1e78:	81 60       	ori	r24, 0x01	; 1
    1e7a:	8c 93       	st	X, r24
						break;
					}
					Local_enuErrorstate=ES_OK;
    1e7c:	81 e0       	ldi	r24, 0x01	; 1
    1e7e:	8a 83       	std	Y+2, r24	; 0x02
    1e80:	a2 c0       	rjmp	.+324    	; 0x1fc6 <EINT_enuInit+0x298>
					break;
				case 1:
					GICR |=(1<<7);//set bit7 to 1
    1e82:	ab e5       	ldi	r26, 0x5B	; 91
    1e84:	b0 e0       	ldi	r27, 0x00	; 0
    1e86:	eb e5       	ldi	r30, 0x5B	; 91
    1e88:	f0 e0       	ldi	r31, 0x00	; 0
    1e8a:	80 81       	ld	r24, Z
    1e8c:	80 68       	ori	r24, 0x80	; 128
    1e8e:	8c 93       	st	X, r24
					switch(Copy_pstrEINT[Local_u8Iter].EINT_u8SenceLevel)
    1e90:	89 81       	ldd	r24, Y+1	; 0x01
    1e92:	88 2f       	mov	r24, r24
    1e94:	90 e0       	ldi	r25, 0x00	; 0
    1e96:	9c 01       	movw	r18, r24
    1e98:	22 0f       	add	r18, r18
    1e9a:	33 1f       	adc	r19, r19
    1e9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e9e:	9c 81       	ldd	r25, Y+4	; 0x04
    1ea0:	fc 01       	movw	r30, r24
    1ea2:	e2 0f       	add	r30, r18
    1ea4:	f3 1f       	adc	r31, r19
    1ea6:	81 81       	ldd	r24, Z+1	; 0x01
    1ea8:	28 2f       	mov	r18, r24
    1eaa:	30 e0       	ldi	r19, 0x00	; 0
    1eac:	38 87       	std	Y+8, r19	; 0x08
    1eae:	2f 83       	std	Y+7, r18	; 0x07
    1eb0:	8f 81       	ldd	r24, Y+7	; 0x07
    1eb2:	98 85       	ldd	r25, Y+8	; 0x08
    1eb4:	82 30       	cpi	r24, 0x02	; 2
    1eb6:	91 05       	cpc	r25, r1
    1eb8:	29 f1       	breq	.+74     	; 0x1f04 <EINT_enuInit+0x1d6>
    1eba:	2f 81       	ldd	r18, Y+7	; 0x07
    1ebc:	38 85       	ldd	r19, Y+8	; 0x08
    1ebe:	23 30       	cpi	r18, 0x03	; 3
    1ec0:	31 05       	cpc	r19, r1
    1ec2:	34 f4       	brge	.+12     	; 0x1ed0 <EINT_enuInit+0x1a2>
    1ec4:	8f 81       	ldd	r24, Y+7	; 0x07
    1ec6:	98 85       	ldd	r25, Y+8	; 0x08
    1ec8:	81 30       	cpi	r24, 0x01	; 1
    1eca:	91 05       	cpc	r25, r1
    1ecc:	61 f0       	breq	.+24     	; 0x1ee6 <EINT_enuInit+0x1b8>
    1ece:	46 c0       	rjmp	.+140    	; 0x1f5c <EINT_enuInit+0x22e>
    1ed0:	2f 81       	ldd	r18, Y+7	; 0x07
    1ed2:	38 85       	ldd	r19, Y+8	; 0x08
    1ed4:	23 30       	cpi	r18, 0x03	; 3
    1ed6:	31 05       	cpc	r19, r1
    1ed8:	99 f1       	breq	.+102    	; 0x1f40 <EINT_enuInit+0x212>
    1eda:	8f 81       	ldd	r24, Y+7	; 0x07
    1edc:	98 85       	ldd	r25, Y+8	; 0x08
    1ede:	84 30       	cpi	r24, 0x04	; 4
    1ee0:	91 05       	cpc	r25, r1
    1ee2:	f9 f0       	breq	.+62     	; 0x1f22 <EINT_enuInit+0x1f4>
    1ee4:	3b c0       	rjmp	.+118    	; 0x1f5c <EINT_enuInit+0x22e>
					{
					case EINT_LOW_LEVEL:
						MCUCR&=~(1<<3);
    1ee6:	a5 e5       	ldi	r26, 0x55	; 85
    1ee8:	b0 e0       	ldi	r27, 0x00	; 0
    1eea:	e5 e5       	ldi	r30, 0x55	; 85
    1eec:	f0 e0       	ldi	r31, 0x00	; 0
    1eee:	80 81       	ld	r24, Z
    1ef0:	87 7f       	andi	r24, 0xF7	; 247
    1ef2:	8c 93       	st	X, r24
						MCUCR&=~(1<<2);
    1ef4:	a5 e5       	ldi	r26, 0x55	; 85
    1ef6:	b0 e0       	ldi	r27, 0x00	; 0
    1ef8:	e5 e5       	ldi	r30, 0x55	; 85
    1efa:	f0 e0       	ldi	r31, 0x00	; 0
    1efc:	80 81       	ld	r24, Z
    1efe:	8b 7f       	andi	r24, 0xFB	; 251
    1f00:	8c 93       	st	X, r24
    1f02:	2c c0       	rjmp	.+88     	; 0x1f5c <EINT_enuInit+0x22e>
						break;
					case EINT_ANY_LOG_CHANGE:
						MCUCR&=~(1<<3);
    1f04:	a5 e5       	ldi	r26, 0x55	; 85
    1f06:	b0 e0       	ldi	r27, 0x00	; 0
    1f08:	e5 e5       	ldi	r30, 0x55	; 85
    1f0a:	f0 e0       	ldi	r31, 0x00	; 0
    1f0c:	80 81       	ld	r24, Z
    1f0e:	87 7f       	andi	r24, 0xF7	; 247
    1f10:	8c 93       	st	X, r24
						MCUCR |=(1<<2);
    1f12:	a5 e5       	ldi	r26, 0x55	; 85
    1f14:	b0 e0       	ldi	r27, 0x00	; 0
    1f16:	e5 e5       	ldi	r30, 0x55	; 85
    1f18:	f0 e0       	ldi	r31, 0x00	; 0
    1f1a:	80 81       	ld	r24, Z
    1f1c:	84 60       	ori	r24, 0x04	; 4
    1f1e:	8c 93       	st	X, r24
    1f20:	1d c0       	rjmp	.+58     	; 0x1f5c <EINT_enuInit+0x22e>
						break;
					case EINT_FALLING_EDGE:
						MCUCR |=(1<<3);
    1f22:	a5 e5       	ldi	r26, 0x55	; 85
    1f24:	b0 e0       	ldi	r27, 0x00	; 0
    1f26:	e5 e5       	ldi	r30, 0x55	; 85
    1f28:	f0 e0       	ldi	r31, 0x00	; 0
    1f2a:	80 81       	ld	r24, Z
    1f2c:	88 60       	ori	r24, 0x08	; 8
    1f2e:	8c 93       	st	X, r24
						MCUCR&=~(1<<2);
    1f30:	a5 e5       	ldi	r26, 0x55	; 85
    1f32:	b0 e0       	ldi	r27, 0x00	; 0
    1f34:	e5 e5       	ldi	r30, 0x55	; 85
    1f36:	f0 e0       	ldi	r31, 0x00	; 0
    1f38:	80 81       	ld	r24, Z
    1f3a:	8b 7f       	andi	r24, 0xFB	; 251
    1f3c:	8c 93       	st	X, r24
    1f3e:	0e c0       	rjmp	.+28     	; 0x1f5c <EINT_enuInit+0x22e>
						break;
					case EINT_RISING_EDGE:
						MCUCR |=(1<<3);
    1f40:	a5 e5       	ldi	r26, 0x55	; 85
    1f42:	b0 e0       	ldi	r27, 0x00	; 0
    1f44:	e5 e5       	ldi	r30, 0x55	; 85
    1f46:	f0 e0       	ldi	r31, 0x00	; 0
    1f48:	80 81       	ld	r24, Z
    1f4a:	88 60       	ori	r24, 0x08	; 8
    1f4c:	8c 93       	st	X, r24
						MCUCR |=(1<<2);
    1f4e:	a5 e5       	ldi	r26, 0x55	; 85
    1f50:	b0 e0       	ldi	r27, 0x00	; 0
    1f52:	e5 e5       	ldi	r30, 0x55	; 85
    1f54:	f0 e0       	ldi	r31, 0x00	; 0
    1f56:	80 81       	ld	r24, Z
    1f58:	84 60       	ori	r24, 0x04	; 4
    1f5a:	8c 93       	st	X, r24
						break;
					}
					Local_enuErrorstate=ES_OK;
    1f5c:	81 e0       	ldi	r24, 0x01	; 1
    1f5e:	8a 83       	std	Y+2, r24	; 0x02
    1f60:	32 c0       	rjmp	.+100    	; 0x1fc6 <EINT_enuInit+0x298>
					break;
				case 2:
					GICR |=(1<<5);//set bit5 to 1
    1f62:	ab e5       	ldi	r26, 0x5B	; 91
    1f64:	b0 e0       	ldi	r27, 0x00	; 0
    1f66:	eb e5       	ldi	r30, 0x5B	; 91
    1f68:	f0 e0       	ldi	r31, 0x00	; 0
    1f6a:	80 81       	ld	r24, Z
    1f6c:	80 62       	ori	r24, 0x20	; 32
    1f6e:	8c 93       	st	X, r24
					switch(Copy_pstrEINT[Local_u8Iter].EINT_u8SenceLevel)
    1f70:	89 81       	ldd	r24, Y+1	; 0x01
    1f72:	88 2f       	mov	r24, r24
    1f74:	90 e0       	ldi	r25, 0x00	; 0
    1f76:	9c 01       	movw	r18, r24
    1f78:	22 0f       	add	r18, r18
    1f7a:	33 1f       	adc	r19, r19
    1f7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f7e:	9c 81       	ldd	r25, Y+4	; 0x04
    1f80:	fc 01       	movw	r30, r24
    1f82:	e2 0f       	add	r30, r18
    1f84:	f3 1f       	adc	r31, r19
    1f86:	81 81       	ldd	r24, Z+1	; 0x01
    1f88:	28 2f       	mov	r18, r24
    1f8a:	30 e0       	ldi	r19, 0x00	; 0
    1f8c:	3e 83       	std	Y+6, r19	; 0x06
    1f8e:	2d 83       	std	Y+5, r18	; 0x05
    1f90:	8d 81       	ldd	r24, Y+5	; 0x05
    1f92:	9e 81       	ldd	r25, Y+6	; 0x06
    1f94:	83 30       	cpi	r24, 0x03	; 3
    1f96:	91 05       	cpc	r25, r1
    1f98:	69 f0       	breq	.+26     	; 0x1fb4 <EINT_enuInit+0x286>
    1f9a:	2d 81       	ldd	r18, Y+5	; 0x05
    1f9c:	3e 81       	ldd	r19, Y+6	; 0x06
    1f9e:	24 30       	cpi	r18, 0x04	; 4
    1fa0:	31 05       	cpc	r19, r1
    1fa2:	79 f4       	brne	.+30     	; 0x1fc2 <EINT_enuInit+0x294>
					{
					case EINT_FALLING_EDGE:
						MCUCSR&=~(1<<6);
    1fa4:	a4 e5       	ldi	r26, 0x54	; 84
    1fa6:	b0 e0       	ldi	r27, 0x00	; 0
    1fa8:	e4 e5       	ldi	r30, 0x54	; 84
    1faa:	f0 e0       	ldi	r31, 0x00	; 0
    1fac:	80 81       	ld	r24, Z
    1fae:	8f 7b       	andi	r24, 0xBF	; 191
    1fb0:	8c 93       	st	X, r24
    1fb2:	07 c0       	rjmp	.+14     	; 0x1fc2 <EINT_enuInit+0x294>
						break;
					case EINT_RISING_EDGE:
						MCUCSR |=(1<<6);
    1fb4:	a4 e5       	ldi	r26, 0x54	; 84
    1fb6:	b0 e0       	ldi	r27, 0x00	; 0
    1fb8:	e4 e5       	ldi	r30, 0x54	; 84
    1fba:	f0 e0       	ldi	r31, 0x00	; 0
    1fbc:	80 81       	ld	r24, Z
    1fbe:	80 64       	ori	r24, 0x40	; 64
    1fc0:	8c 93       	st	X, r24
						break;
					}
					Local_enuErrorstate=ES_OK;
    1fc2:	81 e0       	ldi	r24, 0x01	; 1
    1fc4:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorstate=ES_NOK;

	if(Copy_pstrEINT!=NULL)
	{
		u8 Local_u8Iter=0;
		for(Local_u8Iter=0;Local_u8Iter<3;Local_u8Iter++)
    1fc6:	89 81       	ldd	r24, Y+1	; 0x01
    1fc8:	8f 5f       	subi	r24, 0xFF	; 255
    1fca:	89 83       	std	Y+1, r24	; 0x01
    1fcc:	89 81       	ldd	r24, Y+1	; 0x01
    1fce:	83 30       	cpi	r24, 0x03	; 3
    1fd0:	08 f4       	brcc	.+2      	; 0x1fd4 <EINT_enuInit+0x2a6>
    1fd2:	c2 ce       	rjmp	.-636    	; 0x1d58 <EINT_enuInit+0x2a>
    1fd4:	02 c0       	rjmp	.+4      	; 0x1fda <EINT_enuInit+0x2ac>
			}
		}
	}
	else
	{
		Local_enuErrorstate=ES_NULL_POINTER;
    1fd6:	82 e0       	ldi	r24, 0x02	; 2
    1fd8:	8a 83       	std	Y+2, r24	; 0x02
	}

	return Local_enuErrorstate;
    1fda:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1fdc:	2c 96       	adiw	r28, 0x0c	; 12
    1fde:	0f b6       	in	r0, 0x3f	; 63
    1fe0:	f8 94       	cli
    1fe2:	de bf       	out	0x3e, r29	; 62
    1fe4:	0f be       	out	0x3f, r0	; 63
    1fe6:	cd bf       	out	0x3d, r28	; 61
    1fe8:	cf 91       	pop	r28
    1fea:	df 91       	pop	r29
    1fec:	08 95       	ret

00001fee <EINT_enuEnableINT>:

ES_t EINT_enuEnableINT(u8 Copy_u8ID)
{
    1fee:	df 93       	push	r29
    1ff0:	cf 93       	push	r28
    1ff2:	00 d0       	rcall	.+0      	; 0x1ff4 <EINT_enuEnableINT+0x6>
    1ff4:	00 d0       	rcall	.+0      	; 0x1ff6 <EINT_enuEnableINT+0x8>
    1ff6:	cd b7       	in	r28, 0x3d	; 61
    1ff8:	de b7       	in	r29, 0x3e	; 62
    1ffa:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorstate=ES_NOK;
    1ffc:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8ID<3)
    1ffe:	8a 81       	ldd	r24, Y+2	; 0x02
    2000:	83 30       	cpi	r24, 0x03	; 3
    2002:	88 f5       	brcc	.+98     	; 0x2066 <EINT_enuEnableINT+0x78>
	{
		switch(Copy_u8ID)
    2004:	8a 81       	ldd	r24, Y+2	; 0x02
    2006:	28 2f       	mov	r18, r24
    2008:	30 e0       	ldi	r19, 0x00	; 0
    200a:	3c 83       	std	Y+4, r19	; 0x04
    200c:	2b 83       	std	Y+3, r18	; 0x03
    200e:	8b 81       	ldd	r24, Y+3	; 0x03
    2010:	9c 81       	ldd	r25, Y+4	; 0x04
    2012:	81 30       	cpi	r24, 0x01	; 1
    2014:	91 05       	cpc	r25, r1
    2016:	99 f0       	breq	.+38     	; 0x203e <EINT_enuEnableINT+0x50>
    2018:	2b 81       	ldd	r18, Y+3	; 0x03
    201a:	3c 81       	ldd	r19, Y+4	; 0x04
    201c:	22 30       	cpi	r18, 0x02	; 2
    201e:	31 05       	cpc	r19, r1
    2020:	c1 f0       	breq	.+48     	; 0x2052 <EINT_enuEnableINT+0x64>
    2022:	8b 81       	ldd	r24, Y+3	; 0x03
    2024:	9c 81       	ldd	r25, Y+4	; 0x04
    2026:	00 97       	sbiw	r24, 0x00	; 0
    2028:	01 f5       	brne	.+64     	; 0x206a <EINT_enuEnableINT+0x7c>
		{
		case 0:
			GICR |=(1<<6);
    202a:	ab e5       	ldi	r26, 0x5B	; 91
    202c:	b0 e0       	ldi	r27, 0x00	; 0
    202e:	eb e5       	ldi	r30, 0x5B	; 91
    2030:	f0 e0       	ldi	r31, 0x00	; 0
    2032:	80 81       	ld	r24, Z
    2034:	80 64       	ori	r24, 0x40	; 64
    2036:	8c 93       	st	X, r24
			Local_enuErrorstate=ES_OK;
    2038:	81 e0       	ldi	r24, 0x01	; 1
    203a:	89 83       	std	Y+1, r24	; 0x01
    203c:	16 c0       	rjmp	.+44     	; 0x206a <EINT_enuEnableINT+0x7c>
			break;
		case 1:
			GICR |=(1<<7);
    203e:	ab e5       	ldi	r26, 0x5B	; 91
    2040:	b0 e0       	ldi	r27, 0x00	; 0
    2042:	eb e5       	ldi	r30, 0x5B	; 91
    2044:	f0 e0       	ldi	r31, 0x00	; 0
    2046:	80 81       	ld	r24, Z
    2048:	80 68       	ori	r24, 0x80	; 128
    204a:	8c 93       	st	X, r24
			Local_enuErrorstate=ES_OK;
    204c:	81 e0       	ldi	r24, 0x01	; 1
    204e:	89 83       	std	Y+1, r24	; 0x01
    2050:	0c c0       	rjmp	.+24     	; 0x206a <EINT_enuEnableINT+0x7c>
			break;
		case 2:
			GICR |=(1<<5);
    2052:	ab e5       	ldi	r26, 0x5B	; 91
    2054:	b0 e0       	ldi	r27, 0x00	; 0
    2056:	eb e5       	ldi	r30, 0x5B	; 91
    2058:	f0 e0       	ldi	r31, 0x00	; 0
    205a:	80 81       	ld	r24, Z
    205c:	80 62       	ori	r24, 0x20	; 32
    205e:	8c 93       	st	X, r24
			Local_enuErrorstate=ES_OK;
    2060:	81 e0       	ldi	r24, 0x01	; 1
    2062:	89 83       	std	Y+1, r24	; 0x01
    2064:	02 c0       	rjmp	.+4      	; 0x206a <EINT_enuEnableINT+0x7c>
			break;
		}
	}
	else
	{
		Local_enuErrorstate=ES_OUT_OF_RANGE;
    2066:	83 e0       	ldi	r24, 0x03	; 3
    2068:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
    206a:	89 81       	ldd	r24, Y+1	; 0x01
}
    206c:	0f 90       	pop	r0
    206e:	0f 90       	pop	r0
    2070:	0f 90       	pop	r0
    2072:	0f 90       	pop	r0
    2074:	cf 91       	pop	r28
    2076:	df 91       	pop	r29
    2078:	08 95       	ret

0000207a <EINT_enuDisableINT>:

ES_t EINT_enuDisableINT(u8 Copy_u8ID)
{
    207a:	df 93       	push	r29
    207c:	cf 93       	push	r28
    207e:	00 d0       	rcall	.+0      	; 0x2080 <EINT_enuDisableINT+0x6>
    2080:	00 d0       	rcall	.+0      	; 0x2082 <EINT_enuDisableINT+0x8>
    2082:	cd b7       	in	r28, 0x3d	; 61
    2084:	de b7       	in	r29, 0x3e	; 62
    2086:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorstate=ES_NOK;
    2088:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8ID<3)
    208a:	8a 81       	ldd	r24, Y+2	; 0x02
    208c:	83 30       	cpi	r24, 0x03	; 3
    208e:	88 f5       	brcc	.+98     	; 0x20f2 <EINT_enuDisableINT+0x78>
	{
		switch(Copy_u8ID)
    2090:	8a 81       	ldd	r24, Y+2	; 0x02
    2092:	28 2f       	mov	r18, r24
    2094:	30 e0       	ldi	r19, 0x00	; 0
    2096:	3c 83       	std	Y+4, r19	; 0x04
    2098:	2b 83       	std	Y+3, r18	; 0x03
    209a:	8b 81       	ldd	r24, Y+3	; 0x03
    209c:	9c 81       	ldd	r25, Y+4	; 0x04
    209e:	81 30       	cpi	r24, 0x01	; 1
    20a0:	91 05       	cpc	r25, r1
    20a2:	99 f0       	breq	.+38     	; 0x20ca <EINT_enuDisableINT+0x50>
    20a4:	2b 81       	ldd	r18, Y+3	; 0x03
    20a6:	3c 81       	ldd	r19, Y+4	; 0x04
    20a8:	22 30       	cpi	r18, 0x02	; 2
    20aa:	31 05       	cpc	r19, r1
    20ac:	c1 f0       	breq	.+48     	; 0x20de <EINT_enuDisableINT+0x64>
    20ae:	8b 81       	ldd	r24, Y+3	; 0x03
    20b0:	9c 81       	ldd	r25, Y+4	; 0x04
    20b2:	00 97       	sbiw	r24, 0x00	; 0
    20b4:	01 f5       	brne	.+64     	; 0x20f6 <EINT_enuDisableINT+0x7c>
		{
		case 0:
			GICR &=~(1<<6);
    20b6:	ab e5       	ldi	r26, 0x5B	; 91
    20b8:	b0 e0       	ldi	r27, 0x00	; 0
    20ba:	eb e5       	ldi	r30, 0x5B	; 91
    20bc:	f0 e0       	ldi	r31, 0x00	; 0
    20be:	80 81       	ld	r24, Z
    20c0:	8f 7b       	andi	r24, 0xBF	; 191
    20c2:	8c 93       	st	X, r24
			Local_enuErrorstate=ES_OK;
    20c4:	81 e0       	ldi	r24, 0x01	; 1
    20c6:	89 83       	std	Y+1, r24	; 0x01
    20c8:	16 c0       	rjmp	.+44     	; 0x20f6 <EINT_enuDisableINT+0x7c>
			break;
		case 1:
			GICR &=~(1<<7);
    20ca:	ab e5       	ldi	r26, 0x5B	; 91
    20cc:	b0 e0       	ldi	r27, 0x00	; 0
    20ce:	eb e5       	ldi	r30, 0x5B	; 91
    20d0:	f0 e0       	ldi	r31, 0x00	; 0
    20d2:	80 81       	ld	r24, Z
    20d4:	8f 77       	andi	r24, 0x7F	; 127
    20d6:	8c 93       	st	X, r24
			Local_enuErrorstate=ES_OK;
    20d8:	81 e0       	ldi	r24, 0x01	; 1
    20da:	89 83       	std	Y+1, r24	; 0x01
    20dc:	0c c0       	rjmp	.+24     	; 0x20f6 <EINT_enuDisableINT+0x7c>
			break;
		case 2:
			GICR &=~(1<<5);
    20de:	ab e5       	ldi	r26, 0x5B	; 91
    20e0:	b0 e0       	ldi	r27, 0x00	; 0
    20e2:	eb e5       	ldi	r30, 0x5B	; 91
    20e4:	f0 e0       	ldi	r31, 0x00	; 0
    20e6:	80 81       	ld	r24, Z
    20e8:	8f 7d       	andi	r24, 0xDF	; 223
    20ea:	8c 93       	st	X, r24
			Local_enuErrorstate=ES_OK;
    20ec:	81 e0       	ldi	r24, 0x01	; 1
    20ee:	89 83       	std	Y+1, r24	; 0x01
    20f0:	02 c0       	rjmp	.+4      	; 0x20f6 <EINT_enuDisableINT+0x7c>
			break;
		}
	}
	else
	{
		Local_enuErrorstate=ES_OUT_OF_RANGE;
    20f2:	83 e0       	ldi	r24, 0x03	; 3
    20f4:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
    20f6:	89 81       	ldd	r24, Y+1	; 0x01
}
    20f8:	0f 90       	pop	r0
    20fa:	0f 90       	pop	r0
    20fc:	0f 90       	pop	r0
    20fe:	0f 90       	pop	r0
    2100:	cf 91       	pop	r28
    2102:	df 91       	pop	r29
    2104:	08 95       	ret

00002106 <EINT_enuSelectSenceLevel>:

ES_t EINT_enuSelectSenceLevel(u8 Copy_u8ID , u8 Copy_u8SenceLevel)
{
    2106:	df 93       	push	r29
    2108:	cf 93       	push	r28
    210a:	cd b7       	in	r28, 0x3d	; 61
    210c:	de b7       	in	r29, 0x3e	; 62
    210e:	2b 97       	sbiw	r28, 0x0b	; 11
    2110:	0f b6       	in	r0, 0x3f	; 63
    2112:	f8 94       	cli
    2114:	de bf       	out	0x3e, r29	; 62
    2116:	0f be       	out	0x3f, r0	; 63
    2118:	cd bf       	out	0x3d, r28	; 61
    211a:	8a 83       	std	Y+2, r24	; 0x02
    211c:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorstate=ES_NOK;
    211e:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8ID<3)
    2120:	8a 81       	ldd	r24, Y+2	; 0x02
    2122:	83 30       	cpi	r24, 0x03	; 3
    2124:	08 f0       	brcs	.+2      	; 0x2128 <EINT_enuSelectSenceLevel+0x22>
    2126:	f3 c0       	rjmp	.+486    	; 0x230e <EINT_enuSelectSenceLevel+0x208>
	{
		switch(Copy_u8ID)
    2128:	8a 81       	ldd	r24, Y+2	; 0x02
    212a:	28 2f       	mov	r18, r24
    212c:	30 e0       	ldi	r19, 0x00	; 0
    212e:	3b 87       	std	Y+11, r19	; 0x0b
    2130:	2a 87       	std	Y+10, r18	; 0x0a
    2132:	8a 85       	ldd	r24, Y+10	; 0x0a
    2134:	9b 85       	ldd	r25, Y+11	; 0x0b
    2136:	81 30       	cpi	r24, 0x01	; 1
    2138:	91 05       	cpc	r25, r1
    213a:	09 f4       	brne	.+2      	; 0x213e <EINT_enuSelectSenceLevel+0x38>
    213c:	69 c0       	rjmp	.+210    	; 0x2210 <EINT_enuSelectSenceLevel+0x10a>
    213e:	2a 85       	ldd	r18, Y+10	; 0x0a
    2140:	3b 85       	ldd	r19, Y+11	; 0x0b
    2142:	22 30       	cpi	r18, 0x02	; 2
    2144:	31 05       	cpc	r19, r1
    2146:	09 f4       	brne	.+2      	; 0x214a <EINT_enuSelectSenceLevel+0x44>
    2148:	c1 c0       	rjmp	.+386    	; 0x22cc <EINT_enuSelectSenceLevel+0x1c6>
    214a:	8a 85       	ldd	r24, Y+10	; 0x0a
    214c:	9b 85       	ldd	r25, Y+11	; 0x0b
    214e:	00 97       	sbiw	r24, 0x00	; 0
    2150:	09 f0       	breq	.+2      	; 0x2154 <EINT_enuSelectSenceLevel+0x4e>
    2152:	df c0       	rjmp	.+446    	; 0x2312 <EINT_enuSelectSenceLevel+0x20c>
		{
		case 0:
			switch(Copy_u8SenceLevel)
    2154:	8b 81       	ldd	r24, Y+3	; 0x03
    2156:	28 2f       	mov	r18, r24
    2158:	30 e0       	ldi	r19, 0x00	; 0
    215a:	39 87       	std	Y+9, r19	; 0x09
    215c:	28 87       	std	Y+8, r18	; 0x08
    215e:	88 85       	ldd	r24, Y+8	; 0x08
    2160:	99 85       	ldd	r25, Y+9	; 0x09
    2162:	82 30       	cpi	r24, 0x02	; 2
    2164:	91 05       	cpc	r25, r1
    2166:	29 f1       	breq	.+74     	; 0x21b2 <EINT_enuSelectSenceLevel+0xac>
    2168:	28 85       	ldd	r18, Y+8	; 0x08
    216a:	39 85       	ldd	r19, Y+9	; 0x09
    216c:	23 30       	cpi	r18, 0x03	; 3
    216e:	31 05       	cpc	r19, r1
    2170:	34 f4       	brge	.+12     	; 0x217e <EINT_enuSelectSenceLevel+0x78>
    2172:	88 85       	ldd	r24, Y+8	; 0x08
    2174:	99 85       	ldd	r25, Y+9	; 0x09
    2176:	81 30       	cpi	r24, 0x01	; 1
    2178:	91 05       	cpc	r25, r1
    217a:	61 f0       	breq	.+24     	; 0x2194 <EINT_enuSelectSenceLevel+0x8e>
    217c:	46 c0       	rjmp	.+140    	; 0x220a <EINT_enuSelectSenceLevel+0x104>
    217e:	28 85       	ldd	r18, Y+8	; 0x08
    2180:	39 85       	ldd	r19, Y+9	; 0x09
    2182:	23 30       	cpi	r18, 0x03	; 3
    2184:	31 05       	cpc	r19, r1
    2186:	99 f1       	breq	.+102    	; 0x21ee <EINT_enuSelectSenceLevel+0xe8>
    2188:	88 85       	ldd	r24, Y+8	; 0x08
    218a:	99 85       	ldd	r25, Y+9	; 0x09
    218c:	84 30       	cpi	r24, 0x04	; 4
    218e:	91 05       	cpc	r25, r1
    2190:	f9 f0       	breq	.+62     	; 0x21d0 <EINT_enuSelectSenceLevel+0xca>
    2192:	3b c0       	rjmp	.+118    	; 0x220a <EINT_enuSelectSenceLevel+0x104>
			{
			case EINT_LOW_LEVEL:
				MCUCR&=~(1<<1);
    2194:	a5 e5       	ldi	r26, 0x55	; 85
    2196:	b0 e0       	ldi	r27, 0x00	; 0
    2198:	e5 e5       	ldi	r30, 0x55	; 85
    219a:	f0 e0       	ldi	r31, 0x00	; 0
    219c:	80 81       	ld	r24, Z
    219e:	8d 7f       	andi	r24, 0xFD	; 253
    21a0:	8c 93       	st	X, r24
				MCUCR&=~(1<<0);
    21a2:	a5 e5       	ldi	r26, 0x55	; 85
    21a4:	b0 e0       	ldi	r27, 0x00	; 0
    21a6:	e5 e5       	ldi	r30, 0x55	; 85
    21a8:	f0 e0       	ldi	r31, 0x00	; 0
    21aa:	80 81       	ld	r24, Z
    21ac:	8e 7f       	andi	r24, 0xFE	; 254
    21ae:	8c 93       	st	X, r24
    21b0:	2c c0       	rjmp	.+88     	; 0x220a <EINT_enuSelectSenceLevel+0x104>
				break;
			case EINT_ANY_LOG_CHANGE:
				MCUCR&=~(1<<1);
    21b2:	a5 e5       	ldi	r26, 0x55	; 85
    21b4:	b0 e0       	ldi	r27, 0x00	; 0
    21b6:	e5 e5       	ldi	r30, 0x55	; 85
    21b8:	f0 e0       	ldi	r31, 0x00	; 0
    21ba:	80 81       	ld	r24, Z
    21bc:	8d 7f       	andi	r24, 0xFD	; 253
    21be:	8c 93       	st	X, r24
				MCUCR |=(1<<0);
    21c0:	a5 e5       	ldi	r26, 0x55	; 85
    21c2:	b0 e0       	ldi	r27, 0x00	; 0
    21c4:	e5 e5       	ldi	r30, 0x55	; 85
    21c6:	f0 e0       	ldi	r31, 0x00	; 0
    21c8:	80 81       	ld	r24, Z
    21ca:	81 60       	ori	r24, 0x01	; 1
    21cc:	8c 93       	st	X, r24
    21ce:	1d c0       	rjmp	.+58     	; 0x220a <EINT_enuSelectSenceLevel+0x104>
				break;
			case EINT_FALLING_EDGE:
				MCUCR |=(1<<1);
    21d0:	a5 e5       	ldi	r26, 0x55	; 85
    21d2:	b0 e0       	ldi	r27, 0x00	; 0
    21d4:	e5 e5       	ldi	r30, 0x55	; 85
    21d6:	f0 e0       	ldi	r31, 0x00	; 0
    21d8:	80 81       	ld	r24, Z
    21da:	82 60       	ori	r24, 0x02	; 2
    21dc:	8c 93       	st	X, r24
				MCUCR&=~(1<<0);
    21de:	a5 e5       	ldi	r26, 0x55	; 85
    21e0:	b0 e0       	ldi	r27, 0x00	; 0
    21e2:	e5 e5       	ldi	r30, 0x55	; 85
    21e4:	f0 e0       	ldi	r31, 0x00	; 0
    21e6:	80 81       	ld	r24, Z
    21e8:	8e 7f       	andi	r24, 0xFE	; 254
    21ea:	8c 93       	st	X, r24
    21ec:	0e c0       	rjmp	.+28     	; 0x220a <EINT_enuSelectSenceLevel+0x104>
				break;
			case EINT_RISING_EDGE:
				MCUCR |=(1<<1);
    21ee:	a5 e5       	ldi	r26, 0x55	; 85
    21f0:	b0 e0       	ldi	r27, 0x00	; 0
    21f2:	e5 e5       	ldi	r30, 0x55	; 85
    21f4:	f0 e0       	ldi	r31, 0x00	; 0
    21f6:	80 81       	ld	r24, Z
    21f8:	82 60       	ori	r24, 0x02	; 2
    21fa:	8c 93       	st	X, r24
				MCUCR |=(1<<0);
    21fc:	a5 e5       	ldi	r26, 0x55	; 85
    21fe:	b0 e0       	ldi	r27, 0x00	; 0
    2200:	e5 e5       	ldi	r30, 0x55	; 85
    2202:	f0 e0       	ldi	r31, 0x00	; 0
    2204:	80 81       	ld	r24, Z
    2206:	81 60       	ori	r24, 0x01	; 1
    2208:	8c 93       	st	X, r24
				break;
			}
			Local_enuErrorstate=ES_OK;
    220a:	81 e0       	ldi	r24, 0x01	; 1
    220c:	89 83       	std	Y+1, r24	; 0x01
    220e:	81 c0       	rjmp	.+258    	; 0x2312 <EINT_enuSelectSenceLevel+0x20c>
			break;
		case 1:
			switch(Copy_u8SenceLevel)
    2210:	8b 81       	ldd	r24, Y+3	; 0x03
    2212:	28 2f       	mov	r18, r24
    2214:	30 e0       	ldi	r19, 0x00	; 0
    2216:	3f 83       	std	Y+7, r19	; 0x07
    2218:	2e 83       	std	Y+6, r18	; 0x06
    221a:	8e 81       	ldd	r24, Y+6	; 0x06
    221c:	9f 81       	ldd	r25, Y+7	; 0x07
    221e:	82 30       	cpi	r24, 0x02	; 2
    2220:	91 05       	cpc	r25, r1
    2222:	29 f1       	breq	.+74     	; 0x226e <EINT_enuSelectSenceLevel+0x168>
    2224:	2e 81       	ldd	r18, Y+6	; 0x06
    2226:	3f 81       	ldd	r19, Y+7	; 0x07
    2228:	23 30       	cpi	r18, 0x03	; 3
    222a:	31 05       	cpc	r19, r1
    222c:	34 f4       	brge	.+12     	; 0x223a <EINT_enuSelectSenceLevel+0x134>
    222e:	8e 81       	ldd	r24, Y+6	; 0x06
    2230:	9f 81       	ldd	r25, Y+7	; 0x07
    2232:	81 30       	cpi	r24, 0x01	; 1
    2234:	91 05       	cpc	r25, r1
    2236:	61 f0       	breq	.+24     	; 0x2250 <EINT_enuSelectSenceLevel+0x14a>
    2238:	46 c0       	rjmp	.+140    	; 0x22c6 <EINT_enuSelectSenceLevel+0x1c0>
    223a:	2e 81       	ldd	r18, Y+6	; 0x06
    223c:	3f 81       	ldd	r19, Y+7	; 0x07
    223e:	23 30       	cpi	r18, 0x03	; 3
    2240:	31 05       	cpc	r19, r1
    2242:	99 f1       	breq	.+102    	; 0x22aa <EINT_enuSelectSenceLevel+0x1a4>
    2244:	8e 81       	ldd	r24, Y+6	; 0x06
    2246:	9f 81       	ldd	r25, Y+7	; 0x07
    2248:	84 30       	cpi	r24, 0x04	; 4
    224a:	91 05       	cpc	r25, r1
    224c:	f9 f0       	breq	.+62     	; 0x228c <EINT_enuSelectSenceLevel+0x186>
    224e:	3b c0       	rjmp	.+118    	; 0x22c6 <EINT_enuSelectSenceLevel+0x1c0>
			{
			case EINT_LOW_LEVEL:
				MCUCR&=~(1<<3);
    2250:	a5 e5       	ldi	r26, 0x55	; 85
    2252:	b0 e0       	ldi	r27, 0x00	; 0
    2254:	e5 e5       	ldi	r30, 0x55	; 85
    2256:	f0 e0       	ldi	r31, 0x00	; 0
    2258:	80 81       	ld	r24, Z
    225a:	87 7f       	andi	r24, 0xF7	; 247
    225c:	8c 93       	st	X, r24
				MCUCR&=~(1<<2);
    225e:	a5 e5       	ldi	r26, 0x55	; 85
    2260:	b0 e0       	ldi	r27, 0x00	; 0
    2262:	e5 e5       	ldi	r30, 0x55	; 85
    2264:	f0 e0       	ldi	r31, 0x00	; 0
    2266:	80 81       	ld	r24, Z
    2268:	8b 7f       	andi	r24, 0xFB	; 251
    226a:	8c 93       	st	X, r24
    226c:	2c c0       	rjmp	.+88     	; 0x22c6 <EINT_enuSelectSenceLevel+0x1c0>
				break;
			case EINT_ANY_LOG_CHANGE:
				MCUCR&=~(1<<3);
    226e:	a5 e5       	ldi	r26, 0x55	; 85
    2270:	b0 e0       	ldi	r27, 0x00	; 0
    2272:	e5 e5       	ldi	r30, 0x55	; 85
    2274:	f0 e0       	ldi	r31, 0x00	; 0
    2276:	80 81       	ld	r24, Z
    2278:	87 7f       	andi	r24, 0xF7	; 247
    227a:	8c 93       	st	X, r24
				MCUCR |=(1<<2);
    227c:	a5 e5       	ldi	r26, 0x55	; 85
    227e:	b0 e0       	ldi	r27, 0x00	; 0
    2280:	e5 e5       	ldi	r30, 0x55	; 85
    2282:	f0 e0       	ldi	r31, 0x00	; 0
    2284:	80 81       	ld	r24, Z
    2286:	84 60       	ori	r24, 0x04	; 4
    2288:	8c 93       	st	X, r24
    228a:	1d c0       	rjmp	.+58     	; 0x22c6 <EINT_enuSelectSenceLevel+0x1c0>
				break;
			case EINT_FALLING_EDGE:
				MCUCR |=(1<<3);
    228c:	a5 e5       	ldi	r26, 0x55	; 85
    228e:	b0 e0       	ldi	r27, 0x00	; 0
    2290:	e5 e5       	ldi	r30, 0x55	; 85
    2292:	f0 e0       	ldi	r31, 0x00	; 0
    2294:	80 81       	ld	r24, Z
    2296:	88 60       	ori	r24, 0x08	; 8
    2298:	8c 93       	st	X, r24
				MCUCR&=~(1<<2);
    229a:	a5 e5       	ldi	r26, 0x55	; 85
    229c:	b0 e0       	ldi	r27, 0x00	; 0
    229e:	e5 e5       	ldi	r30, 0x55	; 85
    22a0:	f0 e0       	ldi	r31, 0x00	; 0
    22a2:	80 81       	ld	r24, Z
    22a4:	8b 7f       	andi	r24, 0xFB	; 251
    22a6:	8c 93       	st	X, r24
    22a8:	0e c0       	rjmp	.+28     	; 0x22c6 <EINT_enuSelectSenceLevel+0x1c0>
				break;
			case EINT_RISING_EDGE:
				MCUCR |=(1<<3);
    22aa:	a5 e5       	ldi	r26, 0x55	; 85
    22ac:	b0 e0       	ldi	r27, 0x00	; 0
    22ae:	e5 e5       	ldi	r30, 0x55	; 85
    22b0:	f0 e0       	ldi	r31, 0x00	; 0
    22b2:	80 81       	ld	r24, Z
    22b4:	88 60       	ori	r24, 0x08	; 8
    22b6:	8c 93       	st	X, r24
				MCUCR |=(1<<2);
    22b8:	a5 e5       	ldi	r26, 0x55	; 85
    22ba:	b0 e0       	ldi	r27, 0x00	; 0
    22bc:	e5 e5       	ldi	r30, 0x55	; 85
    22be:	f0 e0       	ldi	r31, 0x00	; 0
    22c0:	80 81       	ld	r24, Z
    22c2:	84 60       	ori	r24, 0x04	; 4
    22c4:	8c 93       	st	X, r24
				break;
			}
			Local_enuErrorstate=ES_OK;
    22c6:	81 e0       	ldi	r24, 0x01	; 1
    22c8:	89 83       	std	Y+1, r24	; 0x01
    22ca:	23 c0       	rjmp	.+70     	; 0x2312 <EINT_enuSelectSenceLevel+0x20c>
			break;
		case 2:
			switch(Copy_u8SenceLevel)
    22cc:	8b 81       	ldd	r24, Y+3	; 0x03
    22ce:	28 2f       	mov	r18, r24
    22d0:	30 e0       	ldi	r19, 0x00	; 0
    22d2:	3d 83       	std	Y+5, r19	; 0x05
    22d4:	2c 83       	std	Y+4, r18	; 0x04
    22d6:	8c 81       	ldd	r24, Y+4	; 0x04
    22d8:	9d 81       	ldd	r25, Y+5	; 0x05
    22da:	83 30       	cpi	r24, 0x03	; 3
    22dc:	91 05       	cpc	r25, r1
    22de:	69 f0       	breq	.+26     	; 0x22fa <EINT_enuSelectSenceLevel+0x1f4>
    22e0:	2c 81       	ldd	r18, Y+4	; 0x04
    22e2:	3d 81       	ldd	r19, Y+5	; 0x05
    22e4:	24 30       	cpi	r18, 0x04	; 4
    22e6:	31 05       	cpc	r19, r1
    22e8:	79 f4       	brne	.+30     	; 0x2308 <EINT_enuSelectSenceLevel+0x202>
			{
			case EINT_FALLING_EDGE:
				MCUCSR&=~(1<<6);
    22ea:	a4 e5       	ldi	r26, 0x54	; 84
    22ec:	b0 e0       	ldi	r27, 0x00	; 0
    22ee:	e4 e5       	ldi	r30, 0x54	; 84
    22f0:	f0 e0       	ldi	r31, 0x00	; 0
    22f2:	80 81       	ld	r24, Z
    22f4:	8f 7b       	andi	r24, 0xBF	; 191
    22f6:	8c 93       	st	X, r24
    22f8:	07 c0       	rjmp	.+14     	; 0x2308 <EINT_enuSelectSenceLevel+0x202>
				break;
			case EINT_RISING_EDGE:
				MCUCSR |=(1<<6);
    22fa:	a4 e5       	ldi	r26, 0x54	; 84
    22fc:	b0 e0       	ldi	r27, 0x00	; 0
    22fe:	e4 e5       	ldi	r30, 0x54	; 84
    2300:	f0 e0       	ldi	r31, 0x00	; 0
    2302:	80 81       	ld	r24, Z
    2304:	80 64       	ori	r24, 0x40	; 64
    2306:	8c 93       	st	X, r24
				break;
			}
			Local_enuErrorstate=ES_OK;
    2308:	81 e0       	ldi	r24, 0x01	; 1
    230a:	89 83       	std	Y+1, r24	; 0x01
    230c:	02 c0       	rjmp	.+4      	; 0x2312 <EINT_enuSelectSenceLevel+0x20c>
			break;
		}
	}
	else
	{
		Local_enuErrorstate=ES_OUT_OF_RANGE;
    230e:	83 e0       	ldi	r24, 0x03	; 3
    2310:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
    2312:	89 81       	ldd	r24, Y+1	; 0x01
}
    2314:	2b 96       	adiw	r28, 0x0b	; 11
    2316:	0f b6       	in	r0, 0x3f	; 63
    2318:	f8 94       	cli
    231a:	de bf       	out	0x3e, r29	; 62
    231c:	0f be       	out	0x3f, r0	; 63
    231e:	cd bf       	out	0x3d, r28	; 61
    2320:	cf 91       	pop	r28
    2322:	df 91       	pop	r29
    2324:	08 95       	ret

00002326 <EINT_enuCallBack>:

ES_t EINT_enuCallBack(void *(Copy_pfun)(void *),void *Copy_pvoid,u8 Copy_u8ID)
{
    2326:	df 93       	push	r29
    2328:	cf 93       	push	r28
    232a:	00 d0       	rcall	.+0      	; 0x232c <EINT_enuCallBack+0x6>
    232c:	00 d0       	rcall	.+0      	; 0x232e <EINT_enuCallBack+0x8>
    232e:	00 d0       	rcall	.+0      	; 0x2330 <EINT_enuCallBack+0xa>
    2330:	cd b7       	in	r28, 0x3d	; 61
    2332:	de b7       	in	r29, 0x3e	; 62
    2334:	9b 83       	std	Y+3, r25	; 0x03
    2336:	8a 83       	std	Y+2, r24	; 0x02
    2338:	7d 83       	std	Y+5, r23	; 0x05
    233a:	6c 83       	std	Y+4, r22	; 0x04
    233c:	4e 83       	std	Y+6, r20	; 0x06
	ES_t Local_enuErrorState=ES_NOK;
    233e:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_pfun!=NULL)
    2340:	8a 81       	ldd	r24, Y+2	; 0x02
    2342:	9b 81       	ldd	r25, Y+3	; 0x03
    2344:	00 97       	sbiw	r24, 0x00	; 0
    2346:	09 f1       	breq	.+66     	; 0x238a <EINT_enuCallBack+0x64>
	{
		if(Copy_u8ID<3)
    2348:	8e 81       	ldd	r24, Y+6	; 0x06
    234a:	83 30       	cpi	r24, 0x03	; 3
    234c:	d8 f4       	brcc	.+54     	; 0x2384 <EINT_enuCallBack+0x5e>
		{
			EINT_pfunINT[Copy_u8ID]=Copy_pfun;
    234e:	8e 81       	ldd	r24, Y+6	; 0x06
    2350:	88 2f       	mov	r24, r24
    2352:	90 e0       	ldi	r25, 0x00	; 0
    2354:	2a 81       	ldd	r18, Y+2	; 0x02
    2356:	3b 81       	ldd	r19, Y+3	; 0x03
    2358:	88 0f       	add	r24, r24
    235a:	99 1f       	adc	r25, r25
    235c:	fc 01       	movw	r30, r24
    235e:	e8 53       	subi	r30, 0x38	; 56
    2360:	fe 4f       	sbci	r31, 0xFE	; 254
    2362:	31 83       	std	Z+1, r19	; 0x01
    2364:	20 83       	st	Z, r18
			EINT_ApvoidINT[Copy_u8ID]=Copy_pvoid;
    2366:	8e 81       	ldd	r24, Y+6	; 0x06
    2368:	88 2f       	mov	r24, r24
    236a:	90 e0       	ldi	r25, 0x00	; 0
    236c:	88 0f       	add	r24, r24
    236e:	99 1f       	adc	r25, r25
    2370:	fc 01       	movw	r30, r24
    2372:	e2 53       	subi	r30, 0x32	; 50
    2374:	fe 4f       	sbci	r31, 0xFE	; 254
    2376:	8c 81       	ldd	r24, Y+4	; 0x04
    2378:	9d 81       	ldd	r25, Y+5	; 0x05
    237a:	91 83       	std	Z+1, r25	; 0x01
    237c:	80 83       	st	Z, r24
			Local_enuErrorState=ES_OK;
    237e:	81 e0       	ldi	r24, 0x01	; 1
    2380:	89 83       	std	Y+1, r24	; 0x01
    2382:	05 c0       	rjmp	.+10     	; 0x238e <EINT_enuCallBack+0x68>
		}
		else
		{
			Local_enuErrorState=ES_OUT_OF_RANGE;
    2384:	83 e0       	ldi	r24, 0x03	; 3
    2386:	89 83       	std	Y+1, r24	; 0x01
    2388:	02 c0       	rjmp	.+4      	; 0x238e <EINT_enuCallBack+0x68>
		}
	}
	else
	{
		Local_enuErrorState=ES_NULL_POINTER;
    238a:	82 e0       	ldi	r24, 0x02	; 2
    238c:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    238e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2390:	26 96       	adiw	r28, 0x06	; 6
    2392:	0f b6       	in	r0, 0x3f	; 63
    2394:	f8 94       	cli
    2396:	de bf       	out	0x3e, r29	; 62
    2398:	0f be       	out	0x3f, r0	; 63
    239a:	cd bf       	out	0x3d, r28	; 61
    239c:	cf 91       	pop	r28
    239e:	df 91       	pop	r29
    23a0:	08 95       	ret

000023a2 <__vector_1>:

ISR(VECT_INT0)
{
    23a2:	1f 92       	push	r1
    23a4:	0f 92       	push	r0
    23a6:	0f b6       	in	r0, 0x3f	; 63
    23a8:	0f 92       	push	r0
    23aa:	11 24       	eor	r1, r1
    23ac:	2f 93       	push	r18
    23ae:	3f 93       	push	r19
    23b0:	4f 93       	push	r20
    23b2:	5f 93       	push	r21
    23b4:	6f 93       	push	r22
    23b6:	7f 93       	push	r23
    23b8:	8f 93       	push	r24
    23ba:	9f 93       	push	r25
    23bc:	af 93       	push	r26
    23be:	bf 93       	push	r27
    23c0:	ef 93       	push	r30
    23c2:	ff 93       	push	r31
    23c4:	df 93       	push	r29
    23c6:	cf 93       	push	r28
    23c8:	cd b7       	in	r28, 0x3d	; 61
    23ca:	de b7       	in	r29, 0x3e	; 62
	if(EINT_pfunINT[0]!=NULL)
    23cc:	80 91 c8 01 	lds	r24, 0x01C8
    23d0:	90 91 c9 01 	lds	r25, 0x01C9
    23d4:	00 97       	sbiw	r24, 0x00	; 0
    23d6:	49 f0       	breq	.+18     	; 0x23ea <__vector_1+0x48>
	{
		EINT_pfunINT[0](EINT_ApvoidINT[0]);
    23d8:	e0 91 c8 01 	lds	r30, 0x01C8
    23dc:	f0 91 c9 01 	lds	r31, 0x01C9
    23e0:	80 91 ce 01 	lds	r24, 0x01CE
    23e4:	90 91 cf 01 	lds	r25, 0x01CF
    23e8:	09 95       	icall
	}
}
    23ea:	cf 91       	pop	r28
    23ec:	df 91       	pop	r29
    23ee:	ff 91       	pop	r31
    23f0:	ef 91       	pop	r30
    23f2:	bf 91       	pop	r27
    23f4:	af 91       	pop	r26
    23f6:	9f 91       	pop	r25
    23f8:	8f 91       	pop	r24
    23fa:	7f 91       	pop	r23
    23fc:	6f 91       	pop	r22
    23fe:	5f 91       	pop	r21
    2400:	4f 91       	pop	r20
    2402:	3f 91       	pop	r19
    2404:	2f 91       	pop	r18
    2406:	0f 90       	pop	r0
    2408:	0f be       	out	0x3f, r0	; 63
    240a:	0f 90       	pop	r0
    240c:	1f 90       	pop	r1
    240e:	18 95       	reti

00002410 <__vector_2>:
ISR(VECT_INT1)
{
    2410:	1f 92       	push	r1
    2412:	0f 92       	push	r0
    2414:	0f b6       	in	r0, 0x3f	; 63
    2416:	0f 92       	push	r0
    2418:	11 24       	eor	r1, r1
    241a:	2f 93       	push	r18
    241c:	3f 93       	push	r19
    241e:	4f 93       	push	r20
    2420:	5f 93       	push	r21
    2422:	6f 93       	push	r22
    2424:	7f 93       	push	r23
    2426:	8f 93       	push	r24
    2428:	9f 93       	push	r25
    242a:	af 93       	push	r26
    242c:	bf 93       	push	r27
    242e:	ef 93       	push	r30
    2430:	ff 93       	push	r31
    2432:	df 93       	push	r29
    2434:	cf 93       	push	r28
    2436:	cd b7       	in	r28, 0x3d	; 61
    2438:	de b7       	in	r29, 0x3e	; 62
	if(EINT_pfunINT[1]!=NULL)
    243a:	80 91 ca 01 	lds	r24, 0x01CA
    243e:	90 91 cb 01 	lds	r25, 0x01CB
    2442:	00 97       	sbiw	r24, 0x00	; 0
    2444:	49 f0       	breq	.+18     	; 0x2458 <__vector_2+0x48>
	{
		EINT_pfunINT[1](EINT_ApvoidINT[1]);
    2446:	e0 91 ca 01 	lds	r30, 0x01CA
    244a:	f0 91 cb 01 	lds	r31, 0x01CB
    244e:	80 91 d0 01 	lds	r24, 0x01D0
    2452:	90 91 d1 01 	lds	r25, 0x01D1
    2456:	09 95       	icall
	}
}
    2458:	cf 91       	pop	r28
    245a:	df 91       	pop	r29
    245c:	ff 91       	pop	r31
    245e:	ef 91       	pop	r30
    2460:	bf 91       	pop	r27
    2462:	af 91       	pop	r26
    2464:	9f 91       	pop	r25
    2466:	8f 91       	pop	r24
    2468:	7f 91       	pop	r23
    246a:	6f 91       	pop	r22
    246c:	5f 91       	pop	r21
    246e:	4f 91       	pop	r20
    2470:	3f 91       	pop	r19
    2472:	2f 91       	pop	r18
    2474:	0f 90       	pop	r0
    2476:	0f be       	out	0x3f, r0	; 63
    2478:	0f 90       	pop	r0
    247a:	1f 90       	pop	r1
    247c:	18 95       	reti

0000247e <__vector_3>:
ISR(VECT_INT2)
{
    247e:	1f 92       	push	r1
    2480:	0f 92       	push	r0
    2482:	0f b6       	in	r0, 0x3f	; 63
    2484:	0f 92       	push	r0
    2486:	11 24       	eor	r1, r1
    2488:	2f 93       	push	r18
    248a:	3f 93       	push	r19
    248c:	4f 93       	push	r20
    248e:	5f 93       	push	r21
    2490:	6f 93       	push	r22
    2492:	7f 93       	push	r23
    2494:	8f 93       	push	r24
    2496:	9f 93       	push	r25
    2498:	af 93       	push	r26
    249a:	bf 93       	push	r27
    249c:	ef 93       	push	r30
    249e:	ff 93       	push	r31
    24a0:	df 93       	push	r29
    24a2:	cf 93       	push	r28
    24a4:	cd b7       	in	r28, 0x3d	; 61
    24a6:	de b7       	in	r29, 0x3e	; 62
	if(EINT_pfunINT[2]!=NULL)
    24a8:	80 91 cc 01 	lds	r24, 0x01CC
    24ac:	90 91 cd 01 	lds	r25, 0x01CD
    24b0:	00 97       	sbiw	r24, 0x00	; 0
    24b2:	49 f0       	breq	.+18     	; 0x24c6 <__vector_3+0x48>
	{
		EINT_pfunINT[2](EINT_ApvoidINT[2]);
    24b4:	e0 91 cc 01 	lds	r30, 0x01CC
    24b8:	f0 91 cd 01 	lds	r31, 0x01CD
    24bc:	80 91 d2 01 	lds	r24, 0x01D2
    24c0:	90 91 d3 01 	lds	r25, 0x01D3
    24c4:	09 95       	icall
	}
}
    24c6:	cf 91       	pop	r28
    24c8:	df 91       	pop	r29
    24ca:	ff 91       	pop	r31
    24cc:	ef 91       	pop	r30
    24ce:	bf 91       	pop	r27
    24d0:	af 91       	pop	r26
    24d2:	9f 91       	pop	r25
    24d4:	8f 91       	pop	r24
    24d6:	7f 91       	pop	r23
    24d8:	6f 91       	pop	r22
    24da:	5f 91       	pop	r21
    24dc:	4f 91       	pop	r20
    24de:	3f 91       	pop	r19
    24e0:	2f 91       	pop	r18
    24e2:	0f 90       	pop	r0
    24e4:	0f be       	out	0x3f, r0	; 63
    24e6:	0f 90       	pop	r0
    24e8:	1f 90       	pop	r1
    24ea:	18 95       	reti

000024ec <DIO_enuInit>:
#include "DIO_priv.h"
#include "DIO_config.h"


ES_t DIO_enuInit(void)
{
    24ec:	df 93       	push	r29
    24ee:	cf 93       	push	r28
    24f0:	0f 92       	push	r0
    24f2:	cd b7       	in	r28, 0x3d	; 61
    24f4:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorstate=ES_NOK;
    24f6:	19 82       	std	Y+1, r1	; 0x01

	DDRA= CONC(PA_PIN7_DIR,PA_PIN6_DIR,PA_PIN5_DIR,PA_PIN4_DIR,PA_PIN3_DIR,PA_PIN2_DIR,PA_PIN1_DIR,PA_PIN0_DIR);
    24f8:	ea e3       	ldi	r30, 0x3A	; 58
    24fa:	f0 e0       	ldi	r31, 0x00	; 0
    24fc:	8f ef       	ldi	r24, 0xFF	; 255
    24fe:	80 83       	st	Z, r24
	DDRB= CONC(PB_PIN7_DIR,PB_PIN6_DIR,PB_PIN5_DIR,PB_PIN4_DIR,PB_PIN3_DIR,PB_PIN2_DIR,PB_PIN1_DIR,PB_PIN0_DIR);
    2500:	e7 e3       	ldi	r30, 0x37	; 55
    2502:	f0 e0       	ldi	r31, 0x00	; 0
    2504:	86 e0       	ldi	r24, 0x06	; 6
    2506:	80 83       	st	Z, r24
	DDRC= CONC(PC_PIN7_DIR,PC_PIN6_DIR,PC_PIN5_DIR,PC_PIN4_DIR,PC_PIN3_DIR,PC_PIN2_DIR,PC_PIN1_DIR,PC_PIN0_DIR);
    2508:	e4 e3       	ldi	r30, 0x34	; 52
    250a:	f0 e0       	ldi	r31, 0x00	; 0
    250c:	87 e9       	ldi	r24, 0x97	; 151
    250e:	80 83       	st	Z, r24
	DDRD= CONC(PD_PIN7_DIR,PD_PIN6_DIR,PD_PIN5_DIR,PD_PIN4_DIR,PD_PIN3_DIR,PD_PIN2_DIR,PD_PIN1_DIR,PD_PIN0_DIR);
    2510:	e1 e3       	ldi	r30, 0x31	; 49
    2512:	f0 e0       	ldi	r31, 0x00	; 0
    2514:	8f e0       	ldi	r24, 0x0F	; 15
    2516:	80 83       	st	Z, r24

	PORTA= CONC(PA_PIN7_VAL,PA_PIN6_VAL,PA_PIN5_VAL,PA_PIN4_VAL,PA_PIN3_VAL,PA_PIN2_VAL,PA_PIN1_VAL,PA_PIN0_VAL);
    2518:	eb e3       	ldi	r30, 0x3B	; 59
    251a:	f0 e0       	ldi	r31, 0x00	; 0
    251c:	10 82       	st	Z, r1
	PORTB= CONC(PB_PIN7_VAL,PB_PIN6_VAL,PB_PIN5_VAL,PB_PIN4_VAL,PB_PIN3_VAL,PB_PIN2_VAL,PB_PIN1_VAL,PB_PIN0_VAL);
    251e:	e8 e3       	ldi	r30, 0x38	; 56
    2520:	f0 e0       	ldi	r31, 0x00	; 0
    2522:	8a ef       	ldi	r24, 0xFA	; 250
    2524:	80 83       	st	Z, r24
	PORTC= CONC(PC_PIN7_VAL,PC_PIN6_VAL,PC_PIN5_VAL,PC_PIN4_VAL,PC_PIN3_VAL,PC_PIN2_VAL,PC_PIN1_VAL,PC_PIN0_VAL);
    2526:	e5 e3       	ldi	r30, 0x35	; 53
    2528:	f0 e0       	ldi	r31, 0x00	; 0
    252a:	88 e5       	ldi	r24, 0x58	; 88
    252c:	80 83       	st	Z, r24
	PORTD= CONC(PD_PIN7_VAL,PD_PIN6_VAL,PD_PIN5_VAL,PD_PIN4_VAL,PD_PIN3_VAL,PD_PIN2_VAL,PD_PIN1_VAL,PD_PIN0_VAL);
    252e:	e2 e3       	ldi	r30, 0x32	; 50
    2530:	f0 e0       	ldi	r31, 0x00	; 0
    2532:	8f ef       	ldi	r24, 0xFF	; 255
    2534:	80 83       	st	Z, r24

	Local_enuErrorstate=ES_OK;
    2536:	81 e0       	ldi	r24, 0x01	; 1
    2538:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorstate;
    253a:	89 81       	ldd	r24, Y+1	; 0x01
}
    253c:	0f 90       	pop	r0
    253e:	cf 91       	pop	r28
    2540:	df 91       	pop	r29
    2542:	08 95       	ret

00002544 <DIO_enuSetPortDirection>:

ES_t DIO_enuSetPortDirection(u8 Copy_u8PortID ,u8 Copy_u8Value)
{
    2544:	df 93       	push	r29
    2546:	cf 93       	push	r28
    2548:	00 d0       	rcall	.+0      	; 0x254a <DIO_enuSetPortDirection+0x6>
    254a:	00 d0       	rcall	.+0      	; 0x254c <DIO_enuSetPortDirection+0x8>
    254c:	0f 92       	push	r0
    254e:	cd b7       	in	r28, 0x3d	; 61
    2550:	de b7       	in	r29, 0x3e	; 62
    2552:	8a 83       	std	Y+2, r24	; 0x02
    2554:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorstate=ES_NOK;
    2556:	19 82       	std	Y+1, r1	; 0x01

	if( Copy_u8PortID <= DIO_PORTD)
    2558:	8a 81       	ldd	r24, Y+2	; 0x02
    255a:	84 30       	cpi	r24, 0x04	; 4
    255c:	a8 f5       	brcc	.+106    	; 0x25c8 <DIO_enuSetPortDirection+0x84>
	{
		switch(Copy_u8PortID)
    255e:	8a 81       	ldd	r24, Y+2	; 0x02
    2560:	28 2f       	mov	r18, r24
    2562:	30 e0       	ldi	r19, 0x00	; 0
    2564:	3d 83       	std	Y+5, r19	; 0x05
    2566:	2c 83       	std	Y+4, r18	; 0x04
    2568:	8c 81       	ldd	r24, Y+4	; 0x04
    256a:	9d 81       	ldd	r25, Y+5	; 0x05
    256c:	81 30       	cpi	r24, 0x01	; 1
    256e:	91 05       	cpc	r25, r1
    2570:	d1 f0       	breq	.+52     	; 0x25a6 <DIO_enuSetPortDirection+0x62>
    2572:	2c 81       	ldd	r18, Y+4	; 0x04
    2574:	3d 81       	ldd	r19, Y+5	; 0x05
    2576:	22 30       	cpi	r18, 0x02	; 2
    2578:	31 05       	cpc	r19, r1
    257a:	2c f4       	brge	.+10     	; 0x2586 <DIO_enuSetPortDirection+0x42>
    257c:	8c 81       	ldd	r24, Y+4	; 0x04
    257e:	9d 81       	ldd	r25, Y+5	; 0x05
    2580:	00 97       	sbiw	r24, 0x00	; 0
    2582:	61 f0       	breq	.+24     	; 0x259c <DIO_enuSetPortDirection+0x58>
    2584:	1e c0       	rjmp	.+60     	; 0x25c2 <DIO_enuSetPortDirection+0x7e>
    2586:	2c 81       	ldd	r18, Y+4	; 0x04
    2588:	3d 81       	ldd	r19, Y+5	; 0x05
    258a:	22 30       	cpi	r18, 0x02	; 2
    258c:	31 05       	cpc	r19, r1
    258e:	81 f0       	breq	.+32     	; 0x25b0 <DIO_enuSetPortDirection+0x6c>
    2590:	8c 81       	ldd	r24, Y+4	; 0x04
    2592:	9d 81       	ldd	r25, Y+5	; 0x05
    2594:	83 30       	cpi	r24, 0x03	; 3
    2596:	91 05       	cpc	r25, r1
    2598:	81 f0       	breq	.+32     	; 0x25ba <DIO_enuSetPortDirection+0x76>
    259a:	13 c0       	rjmp	.+38     	; 0x25c2 <DIO_enuSetPortDirection+0x7e>
		{
		case DIO_PORTA:
			DDRA=Copy_u8Value;
    259c:	ea e3       	ldi	r30, 0x3A	; 58
    259e:	f0 e0       	ldi	r31, 0x00	; 0
    25a0:	8b 81       	ldd	r24, Y+3	; 0x03
    25a2:	80 83       	st	Z, r24
    25a4:	0e c0       	rjmp	.+28     	; 0x25c2 <DIO_enuSetPortDirection+0x7e>
			break;
		case DIO_PORTB:
			DDRB=Copy_u8Value;
    25a6:	e7 e3       	ldi	r30, 0x37	; 55
    25a8:	f0 e0       	ldi	r31, 0x00	; 0
    25aa:	8b 81       	ldd	r24, Y+3	; 0x03
    25ac:	80 83       	st	Z, r24
    25ae:	09 c0       	rjmp	.+18     	; 0x25c2 <DIO_enuSetPortDirection+0x7e>
			break;
		case DIO_PORTC:
			DDRC=Copy_u8Value;
    25b0:	e4 e3       	ldi	r30, 0x34	; 52
    25b2:	f0 e0       	ldi	r31, 0x00	; 0
    25b4:	8b 81       	ldd	r24, Y+3	; 0x03
    25b6:	80 83       	st	Z, r24
    25b8:	04 c0       	rjmp	.+8      	; 0x25c2 <DIO_enuSetPortDirection+0x7e>
			break;
		case DIO_PORTD:
			DDRD=Copy_u8Value;
    25ba:	e1 e3       	ldi	r30, 0x31	; 49
    25bc:	f0 e0       	ldi	r31, 0x00	; 0
    25be:	8b 81       	ldd	r24, Y+3	; 0x03
    25c0:	80 83       	st	Z, r24
			break;
		}
		 Local_enuErrorstate=ES_OK;
    25c2:	81 e0       	ldi	r24, 0x01	; 1
    25c4:	89 83       	std	Y+1, r24	; 0x01
    25c6:	02 c0       	rjmp	.+4      	; 0x25cc <DIO_enuSetPortDirection+0x88>
	}
	else
	{
		Local_enuErrorstate=ES_OUT_OF_RANGE;
    25c8:	83 e0       	ldi	r24, 0x03	; 3
    25ca:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
    25cc:	89 81       	ldd	r24, Y+1	; 0x01
}
    25ce:	0f 90       	pop	r0
    25d0:	0f 90       	pop	r0
    25d2:	0f 90       	pop	r0
    25d4:	0f 90       	pop	r0
    25d6:	0f 90       	pop	r0
    25d8:	cf 91       	pop	r28
    25da:	df 91       	pop	r29
    25dc:	08 95       	ret

000025de <DIO_enuSetPortValue>:

ES_t DIO_enuSetPortValue(u8 Copy_u8PortID ,u8 Copy_u8Value)
{
    25de:	df 93       	push	r29
    25e0:	cf 93       	push	r28
    25e2:	00 d0       	rcall	.+0      	; 0x25e4 <DIO_enuSetPortValue+0x6>
    25e4:	00 d0       	rcall	.+0      	; 0x25e6 <DIO_enuSetPortValue+0x8>
    25e6:	0f 92       	push	r0
    25e8:	cd b7       	in	r28, 0x3d	; 61
    25ea:	de b7       	in	r29, 0x3e	; 62
    25ec:	8a 83       	std	Y+2, r24	; 0x02
    25ee:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorstate=ES_NOK;
    25f0:	19 82       	std	Y+1, r1	; 0x01
	if( Copy_u8PortID <= DIO_PORTD)
    25f2:	8a 81       	ldd	r24, Y+2	; 0x02
    25f4:	84 30       	cpi	r24, 0x04	; 4
    25f6:	a8 f5       	brcc	.+106    	; 0x2662 <DIO_enuSetPortValue+0x84>
	{
		switch(Copy_u8PortID)
    25f8:	8a 81       	ldd	r24, Y+2	; 0x02
    25fa:	28 2f       	mov	r18, r24
    25fc:	30 e0       	ldi	r19, 0x00	; 0
    25fe:	3d 83       	std	Y+5, r19	; 0x05
    2600:	2c 83       	std	Y+4, r18	; 0x04
    2602:	8c 81       	ldd	r24, Y+4	; 0x04
    2604:	9d 81       	ldd	r25, Y+5	; 0x05
    2606:	81 30       	cpi	r24, 0x01	; 1
    2608:	91 05       	cpc	r25, r1
    260a:	d1 f0       	breq	.+52     	; 0x2640 <DIO_enuSetPortValue+0x62>
    260c:	2c 81       	ldd	r18, Y+4	; 0x04
    260e:	3d 81       	ldd	r19, Y+5	; 0x05
    2610:	22 30       	cpi	r18, 0x02	; 2
    2612:	31 05       	cpc	r19, r1
    2614:	2c f4       	brge	.+10     	; 0x2620 <DIO_enuSetPortValue+0x42>
    2616:	8c 81       	ldd	r24, Y+4	; 0x04
    2618:	9d 81       	ldd	r25, Y+5	; 0x05
    261a:	00 97       	sbiw	r24, 0x00	; 0
    261c:	61 f0       	breq	.+24     	; 0x2636 <DIO_enuSetPortValue+0x58>
    261e:	1e c0       	rjmp	.+60     	; 0x265c <DIO_enuSetPortValue+0x7e>
    2620:	2c 81       	ldd	r18, Y+4	; 0x04
    2622:	3d 81       	ldd	r19, Y+5	; 0x05
    2624:	22 30       	cpi	r18, 0x02	; 2
    2626:	31 05       	cpc	r19, r1
    2628:	81 f0       	breq	.+32     	; 0x264a <DIO_enuSetPortValue+0x6c>
    262a:	8c 81       	ldd	r24, Y+4	; 0x04
    262c:	9d 81       	ldd	r25, Y+5	; 0x05
    262e:	83 30       	cpi	r24, 0x03	; 3
    2630:	91 05       	cpc	r25, r1
    2632:	81 f0       	breq	.+32     	; 0x2654 <DIO_enuSetPortValue+0x76>
    2634:	13 c0       	rjmp	.+38     	; 0x265c <DIO_enuSetPortValue+0x7e>
		{
		case DIO_PORTA:
			PORTA=Copy_u8Value;
    2636:	eb e3       	ldi	r30, 0x3B	; 59
    2638:	f0 e0       	ldi	r31, 0x00	; 0
    263a:	8b 81       	ldd	r24, Y+3	; 0x03
    263c:	80 83       	st	Z, r24
    263e:	0e c0       	rjmp	.+28     	; 0x265c <DIO_enuSetPortValue+0x7e>
			break;
		case DIO_PORTB:
			PORTB=Copy_u8Value;
    2640:	e8 e3       	ldi	r30, 0x38	; 56
    2642:	f0 e0       	ldi	r31, 0x00	; 0
    2644:	8b 81       	ldd	r24, Y+3	; 0x03
    2646:	80 83       	st	Z, r24
    2648:	09 c0       	rjmp	.+18     	; 0x265c <DIO_enuSetPortValue+0x7e>
			break;
		case DIO_PORTC:
			PORTC=Copy_u8Value;
    264a:	e5 e3       	ldi	r30, 0x35	; 53
    264c:	f0 e0       	ldi	r31, 0x00	; 0
    264e:	8b 81       	ldd	r24, Y+3	; 0x03
    2650:	80 83       	st	Z, r24
    2652:	04 c0       	rjmp	.+8      	; 0x265c <DIO_enuSetPortValue+0x7e>
			break;
		case DIO_PORTD:
			PORTD=Copy_u8Value;
    2654:	e2 e3       	ldi	r30, 0x32	; 50
    2656:	f0 e0       	ldi	r31, 0x00	; 0
    2658:	8b 81       	ldd	r24, Y+3	; 0x03
    265a:	80 83       	st	Z, r24
			break;
		}
		 Local_enuErrorstate=ES_OK;
    265c:	81 e0       	ldi	r24, 0x01	; 1
    265e:	89 83       	std	Y+1, r24	; 0x01
    2660:	02 c0       	rjmp	.+4      	; 0x2666 <DIO_enuSetPortValue+0x88>
	}
	else
	{
		Local_enuErrorstate=ES_OUT_OF_RANGE;
    2662:	83 e0       	ldi	r24, 0x03	; 3
    2664:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_enuErrorstate;
    2666:	89 81       	ldd	r24, Y+1	; 0x01
}
    2668:	0f 90       	pop	r0
    266a:	0f 90       	pop	r0
    266c:	0f 90       	pop	r0
    266e:	0f 90       	pop	r0
    2670:	0f 90       	pop	r0
    2672:	cf 91       	pop	r28
    2674:	df 91       	pop	r29
    2676:	08 95       	ret

00002678 <DIO_enuTogPortValue>:

ES_t DIO_enuTogPortValue(u8 Copy_u8PortID )
{
    2678:	df 93       	push	r29
    267a:	cf 93       	push	r28
    267c:	00 d0       	rcall	.+0      	; 0x267e <DIO_enuTogPortValue+0x6>
    267e:	00 d0       	rcall	.+0      	; 0x2680 <DIO_enuTogPortValue+0x8>
    2680:	cd b7       	in	r28, 0x3d	; 61
    2682:	de b7       	in	r29, 0x3e	; 62
    2684:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorstate=ES_NOK;
    2686:	19 82       	std	Y+1, r1	; 0x01
	if( Copy_u8PortID <= DIO_PORTD)
    2688:	8a 81       	ldd	r24, Y+2	; 0x02
    268a:	84 30       	cpi	r24, 0x04	; 4
    268c:	08 f0       	brcs	.+2      	; 0x2690 <DIO_enuTogPortValue+0x18>
    268e:	41 c0       	rjmp	.+130    	; 0x2712 <DIO_enuTogPortValue+0x9a>
	{
		switch(Copy_u8PortID)
    2690:	8a 81       	ldd	r24, Y+2	; 0x02
    2692:	28 2f       	mov	r18, r24
    2694:	30 e0       	ldi	r19, 0x00	; 0
    2696:	3c 83       	std	Y+4, r19	; 0x04
    2698:	2b 83       	std	Y+3, r18	; 0x03
    269a:	8b 81       	ldd	r24, Y+3	; 0x03
    269c:	9c 81       	ldd	r25, Y+4	; 0x04
    269e:	81 30       	cpi	r24, 0x01	; 1
    26a0:	91 05       	cpc	r25, r1
    26a2:	e9 f0       	breq	.+58     	; 0x26de <DIO_enuTogPortValue+0x66>
    26a4:	2b 81       	ldd	r18, Y+3	; 0x03
    26a6:	3c 81       	ldd	r19, Y+4	; 0x04
    26a8:	22 30       	cpi	r18, 0x02	; 2
    26aa:	31 05       	cpc	r19, r1
    26ac:	2c f4       	brge	.+10     	; 0x26b8 <DIO_enuTogPortValue+0x40>
    26ae:	8b 81       	ldd	r24, Y+3	; 0x03
    26b0:	9c 81       	ldd	r25, Y+4	; 0x04
    26b2:	00 97       	sbiw	r24, 0x00	; 0
    26b4:	61 f0       	breq	.+24     	; 0x26ce <DIO_enuTogPortValue+0x56>
    26b6:	2a c0       	rjmp	.+84     	; 0x270c <DIO_enuTogPortValue+0x94>
    26b8:	2b 81       	ldd	r18, Y+3	; 0x03
    26ba:	3c 81       	ldd	r19, Y+4	; 0x04
    26bc:	22 30       	cpi	r18, 0x02	; 2
    26be:	31 05       	cpc	r19, r1
    26c0:	b1 f0       	breq	.+44     	; 0x26ee <DIO_enuTogPortValue+0x76>
    26c2:	8b 81       	ldd	r24, Y+3	; 0x03
    26c4:	9c 81       	ldd	r25, Y+4	; 0x04
    26c6:	83 30       	cpi	r24, 0x03	; 3
    26c8:	91 05       	cpc	r25, r1
    26ca:	c9 f0       	breq	.+50     	; 0x26fe <DIO_enuTogPortValue+0x86>
    26cc:	1f c0       	rjmp	.+62     	; 0x270c <DIO_enuTogPortValue+0x94>
		{
		case DIO_PORTA:
			PORTA=~PORTA;
    26ce:	ab e3       	ldi	r26, 0x3B	; 59
    26d0:	b0 e0       	ldi	r27, 0x00	; 0
    26d2:	eb e3       	ldi	r30, 0x3B	; 59
    26d4:	f0 e0       	ldi	r31, 0x00	; 0
    26d6:	80 81       	ld	r24, Z
    26d8:	80 95       	com	r24
    26da:	8c 93       	st	X, r24
    26dc:	17 c0       	rjmp	.+46     	; 0x270c <DIO_enuTogPortValue+0x94>
			break;
		case DIO_PORTB:
			PORTB=~PORTB;
    26de:	a8 e3       	ldi	r26, 0x38	; 56
    26e0:	b0 e0       	ldi	r27, 0x00	; 0
    26e2:	e8 e3       	ldi	r30, 0x38	; 56
    26e4:	f0 e0       	ldi	r31, 0x00	; 0
    26e6:	80 81       	ld	r24, Z
    26e8:	80 95       	com	r24
    26ea:	8c 93       	st	X, r24
    26ec:	0f c0       	rjmp	.+30     	; 0x270c <DIO_enuTogPortValue+0x94>
			break;
		case DIO_PORTC:
			PORTC=~PORTC;
    26ee:	a5 e3       	ldi	r26, 0x35	; 53
    26f0:	b0 e0       	ldi	r27, 0x00	; 0
    26f2:	e5 e3       	ldi	r30, 0x35	; 53
    26f4:	f0 e0       	ldi	r31, 0x00	; 0
    26f6:	80 81       	ld	r24, Z
    26f8:	80 95       	com	r24
    26fa:	8c 93       	st	X, r24
    26fc:	07 c0       	rjmp	.+14     	; 0x270c <DIO_enuTogPortValue+0x94>
			break;
		case DIO_PORTD:
			PORTD=~PORTD;
    26fe:	a2 e3       	ldi	r26, 0x32	; 50
    2700:	b0 e0       	ldi	r27, 0x00	; 0
    2702:	e2 e3       	ldi	r30, 0x32	; 50
    2704:	f0 e0       	ldi	r31, 0x00	; 0
    2706:	80 81       	ld	r24, Z
    2708:	80 95       	com	r24
    270a:	8c 93       	st	X, r24
			break;
		}
		 Local_enuErrorstate=ES_OK;
    270c:	81 e0       	ldi	r24, 0x01	; 1
    270e:	89 83       	std	Y+1, r24	; 0x01
    2710:	02 c0       	rjmp	.+4      	; 0x2716 <DIO_enuTogPortValue+0x9e>
	}
	else
	{
		Local_enuErrorstate=ES_OUT_OF_RANGE;
    2712:	83 e0       	ldi	r24, 0x03	; 3
    2714:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_enuErrorstate;
    2716:	89 81       	ldd	r24, Y+1	; 0x01
}
    2718:	0f 90       	pop	r0
    271a:	0f 90       	pop	r0
    271c:	0f 90       	pop	r0
    271e:	0f 90       	pop	r0
    2720:	cf 91       	pop	r28
    2722:	df 91       	pop	r29
    2724:	08 95       	ret

00002726 <DIO_enuGetPortValue>:

ES_t DIO_enuGetPortValue(u8 Copy_u8PortID ,u8* Copy_pu8Value)
{
    2726:	df 93       	push	r29
    2728:	cf 93       	push	r28
    272a:	00 d0       	rcall	.+0      	; 0x272c <DIO_enuGetPortValue+0x6>
    272c:	00 d0       	rcall	.+0      	; 0x272e <DIO_enuGetPortValue+0x8>
    272e:	00 d0       	rcall	.+0      	; 0x2730 <DIO_enuGetPortValue+0xa>
    2730:	cd b7       	in	r28, 0x3d	; 61
    2732:	de b7       	in	r29, 0x3e	; 62
    2734:	8a 83       	std	Y+2, r24	; 0x02
    2736:	7c 83       	std	Y+4, r23	; 0x04
    2738:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorstate=ES_NOK;
    273a:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_pu8Value !=NULL)
    273c:	8b 81       	ldd	r24, Y+3	; 0x03
    273e:	9c 81       	ldd	r25, Y+4	; 0x04
    2740:	00 97       	sbiw	r24, 0x00	; 0
    2742:	09 f4       	brne	.+2      	; 0x2746 <DIO_enuGetPortValue+0x20>
    2744:	41 c0       	rjmp	.+130    	; 0x27c8 <DIO_enuGetPortValue+0xa2>
	{
		if( Copy_u8PortID <= DIO_PORTD)
    2746:	8a 81       	ldd	r24, Y+2	; 0x02
    2748:	84 30       	cpi	r24, 0x04	; 4
    274a:	d8 f5       	brcc	.+118    	; 0x27c2 <DIO_enuGetPortValue+0x9c>
		{
			switch(Copy_u8PortID)
    274c:	8a 81       	ldd	r24, Y+2	; 0x02
    274e:	28 2f       	mov	r18, r24
    2750:	30 e0       	ldi	r19, 0x00	; 0
    2752:	3e 83       	std	Y+6, r19	; 0x06
    2754:	2d 83       	std	Y+5, r18	; 0x05
    2756:	8d 81       	ldd	r24, Y+5	; 0x05
    2758:	9e 81       	ldd	r25, Y+6	; 0x06
    275a:	81 30       	cpi	r24, 0x01	; 1
    275c:	91 05       	cpc	r25, r1
    275e:	e1 f0       	breq	.+56     	; 0x2798 <DIO_enuGetPortValue+0x72>
    2760:	2d 81       	ldd	r18, Y+5	; 0x05
    2762:	3e 81       	ldd	r19, Y+6	; 0x06
    2764:	22 30       	cpi	r18, 0x02	; 2
    2766:	31 05       	cpc	r19, r1
    2768:	2c f4       	brge	.+10     	; 0x2774 <DIO_enuGetPortValue+0x4e>
    276a:	8d 81       	ldd	r24, Y+5	; 0x05
    276c:	9e 81       	ldd	r25, Y+6	; 0x06
    276e:	00 97       	sbiw	r24, 0x00	; 0
    2770:	61 f0       	breq	.+24     	; 0x278a <DIO_enuGetPortValue+0x64>
    2772:	2c c0       	rjmp	.+88     	; 0x27cc <DIO_enuGetPortValue+0xa6>
    2774:	2d 81       	ldd	r18, Y+5	; 0x05
    2776:	3e 81       	ldd	r19, Y+6	; 0x06
    2778:	22 30       	cpi	r18, 0x02	; 2
    277a:	31 05       	cpc	r19, r1
    277c:	a1 f0       	breq	.+40     	; 0x27a6 <DIO_enuGetPortValue+0x80>
    277e:	8d 81       	ldd	r24, Y+5	; 0x05
    2780:	9e 81       	ldd	r25, Y+6	; 0x06
    2782:	83 30       	cpi	r24, 0x03	; 3
    2784:	91 05       	cpc	r25, r1
    2786:	b1 f0       	breq	.+44     	; 0x27b4 <DIO_enuGetPortValue+0x8e>
    2788:	21 c0       	rjmp	.+66     	; 0x27cc <DIO_enuGetPortValue+0xa6>
			{
			case DIO_PORTA:
				*Copy_pu8Value=PINA;
    278a:	e9 e3       	ldi	r30, 0x39	; 57
    278c:	f0 e0       	ldi	r31, 0x00	; 0
    278e:	80 81       	ld	r24, Z
    2790:	eb 81       	ldd	r30, Y+3	; 0x03
    2792:	fc 81       	ldd	r31, Y+4	; 0x04
    2794:	80 83       	st	Z, r24
    2796:	1a c0       	rjmp	.+52     	; 0x27cc <DIO_enuGetPortValue+0xa6>
				break;
			case DIO_PORTB:
				*Copy_pu8Value=PINB;
    2798:	e6 e3       	ldi	r30, 0x36	; 54
    279a:	f0 e0       	ldi	r31, 0x00	; 0
    279c:	80 81       	ld	r24, Z
    279e:	eb 81       	ldd	r30, Y+3	; 0x03
    27a0:	fc 81       	ldd	r31, Y+4	; 0x04
    27a2:	80 83       	st	Z, r24
    27a4:	13 c0       	rjmp	.+38     	; 0x27cc <DIO_enuGetPortValue+0xa6>
				break;
			case DIO_PORTC:
				*Copy_pu8Value=PINC;
    27a6:	e3 e3       	ldi	r30, 0x33	; 51
    27a8:	f0 e0       	ldi	r31, 0x00	; 0
    27aa:	80 81       	ld	r24, Z
    27ac:	eb 81       	ldd	r30, Y+3	; 0x03
    27ae:	fc 81       	ldd	r31, Y+4	; 0x04
    27b0:	80 83       	st	Z, r24
    27b2:	0c c0       	rjmp	.+24     	; 0x27cc <DIO_enuGetPortValue+0xa6>
				break;
			case DIO_PORTD:
				*Copy_pu8Value=PIND;
    27b4:	e0 e3       	ldi	r30, 0x30	; 48
    27b6:	f0 e0       	ldi	r31, 0x00	; 0
    27b8:	80 81       	ld	r24, Z
    27ba:	eb 81       	ldd	r30, Y+3	; 0x03
    27bc:	fc 81       	ldd	r31, Y+4	; 0x04
    27be:	80 83       	st	Z, r24
    27c0:	05 c0       	rjmp	.+10     	; 0x27cc <DIO_enuGetPortValue+0xa6>
				break;
			}
		}
		else
		{
			Local_enuErrorstate=ES_OUT_OF_RANGE;
    27c2:	83 e0       	ldi	r24, 0x03	; 3
    27c4:	89 83       	std	Y+1, r24	; 0x01
    27c6:	02 c0       	rjmp	.+4      	; 0x27cc <DIO_enuGetPortValue+0xa6>
		}
	}
	else
	{
		Local_enuErrorstate=ES_NULL_POINTER;
    27c8:	82 e0       	ldi	r24, 0x02	; 2
    27ca:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_enuErrorstate;
    27cc:	89 81       	ldd	r24, Y+1	; 0x01
}
    27ce:	26 96       	adiw	r28, 0x06	; 6
    27d0:	0f b6       	in	r0, 0x3f	; 63
    27d2:	f8 94       	cli
    27d4:	de bf       	out	0x3e, r29	; 62
    27d6:	0f be       	out	0x3f, r0	; 63
    27d8:	cd bf       	out	0x3d, r28	; 61
    27da:	cf 91       	pop	r28
    27dc:	df 91       	pop	r29
    27de:	08 95       	ret

000027e0 <DIO_enuSetPinDirection>:

ES_t DIO_enuSetPinDirection(u8 Copy_u8PortID ,u8 Copy_u8PinID ,u8 Copy_u8Value)
{
    27e0:	df 93       	push	r29
    27e2:	cf 93       	push	r28
    27e4:	00 d0       	rcall	.+0      	; 0x27e6 <DIO_enuSetPinDirection+0x6>
    27e6:	00 d0       	rcall	.+0      	; 0x27e8 <DIO_enuSetPinDirection+0x8>
    27e8:	00 d0       	rcall	.+0      	; 0x27ea <DIO_enuSetPinDirection+0xa>
    27ea:	cd b7       	in	r28, 0x3d	; 61
    27ec:	de b7       	in	r29, 0x3e	; 62
    27ee:	8a 83       	std	Y+2, r24	; 0x02
    27f0:	6b 83       	std	Y+3, r22	; 0x03
    27f2:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorstate=ES_NOK;
    27f4:	19 82       	std	Y+1, r1	; 0x01

	if( Copy_u8PortID <= DIO_PORTD && Copy_u8PinID<=DIO_PIN7 && Copy_u8Value <=OUTPUT )
    27f6:	8a 81       	ldd	r24, Y+2	; 0x02
    27f8:	84 30       	cpi	r24, 0x04	; 4
    27fa:	08 f0       	brcs	.+2      	; 0x27fe <DIO_enuSetPinDirection+0x1e>
    27fc:	d1 c0       	rjmp	.+418    	; 0x29a0 <DIO_enuSetPinDirection+0x1c0>
    27fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2800:	88 30       	cpi	r24, 0x08	; 8
    2802:	08 f0       	brcs	.+2      	; 0x2806 <DIO_enuSetPinDirection+0x26>
    2804:	cd c0       	rjmp	.+410    	; 0x29a0 <DIO_enuSetPinDirection+0x1c0>
    2806:	8c 81       	ldd	r24, Y+4	; 0x04
    2808:	82 30       	cpi	r24, 0x02	; 2
    280a:	08 f0       	brcs	.+2      	; 0x280e <DIO_enuSetPinDirection+0x2e>
    280c:	c9 c0       	rjmp	.+402    	; 0x29a0 <DIO_enuSetPinDirection+0x1c0>
	{
		switch(Copy_u8PortID)
    280e:	8a 81       	ldd	r24, Y+2	; 0x02
    2810:	28 2f       	mov	r18, r24
    2812:	30 e0       	ldi	r19, 0x00	; 0
    2814:	3e 83       	std	Y+6, r19	; 0x06
    2816:	2d 83       	std	Y+5, r18	; 0x05
    2818:	6d 81       	ldd	r22, Y+5	; 0x05
    281a:	7e 81       	ldd	r23, Y+6	; 0x06
    281c:	61 30       	cpi	r22, 0x01	; 1
    281e:	71 05       	cpc	r23, r1
    2820:	09 f4       	brne	.+2      	; 0x2824 <DIO_enuSetPinDirection+0x44>
    2822:	41 c0       	rjmp	.+130    	; 0x28a6 <DIO_enuSetPinDirection+0xc6>
    2824:	8d 81       	ldd	r24, Y+5	; 0x05
    2826:	9e 81       	ldd	r25, Y+6	; 0x06
    2828:	82 30       	cpi	r24, 0x02	; 2
    282a:	91 05       	cpc	r25, r1
    282c:	34 f4       	brge	.+12     	; 0x283a <DIO_enuSetPinDirection+0x5a>
    282e:	2d 81       	ldd	r18, Y+5	; 0x05
    2830:	3e 81       	ldd	r19, Y+6	; 0x06
    2832:	21 15       	cp	r18, r1
    2834:	31 05       	cpc	r19, r1
    2836:	71 f0       	breq	.+28     	; 0x2854 <DIO_enuSetPinDirection+0x74>
    2838:	b0 c0       	rjmp	.+352    	; 0x299a <DIO_enuSetPinDirection+0x1ba>
    283a:	6d 81       	ldd	r22, Y+5	; 0x05
    283c:	7e 81       	ldd	r23, Y+6	; 0x06
    283e:	62 30       	cpi	r22, 0x02	; 2
    2840:	71 05       	cpc	r23, r1
    2842:	09 f4       	brne	.+2      	; 0x2846 <DIO_enuSetPinDirection+0x66>
    2844:	59 c0       	rjmp	.+178    	; 0x28f8 <DIO_enuSetPinDirection+0x118>
    2846:	8d 81       	ldd	r24, Y+5	; 0x05
    2848:	9e 81       	ldd	r25, Y+6	; 0x06
    284a:	83 30       	cpi	r24, 0x03	; 3
    284c:	91 05       	cpc	r25, r1
    284e:	09 f4       	brne	.+2      	; 0x2852 <DIO_enuSetPinDirection+0x72>
    2850:	7c c0       	rjmp	.+248    	; 0x294a <DIO_enuSetPinDirection+0x16a>
    2852:	a3 c0       	rjmp	.+326    	; 0x299a <DIO_enuSetPinDirection+0x1ba>
		{
		case DIO_PORTA:
			DDRA&=~(DIO_MASK_BIT<<Copy_u8PinID);
    2854:	aa e3       	ldi	r26, 0x3A	; 58
    2856:	b0 e0       	ldi	r27, 0x00	; 0
    2858:	ea e3       	ldi	r30, 0x3A	; 58
    285a:	f0 e0       	ldi	r31, 0x00	; 0
    285c:	80 81       	ld	r24, Z
    285e:	48 2f       	mov	r20, r24
    2860:	8b 81       	ldd	r24, Y+3	; 0x03
    2862:	28 2f       	mov	r18, r24
    2864:	30 e0       	ldi	r19, 0x00	; 0
    2866:	81 e0       	ldi	r24, 0x01	; 1
    2868:	90 e0       	ldi	r25, 0x00	; 0
    286a:	02 c0       	rjmp	.+4      	; 0x2870 <DIO_enuSetPinDirection+0x90>
    286c:	88 0f       	add	r24, r24
    286e:	99 1f       	adc	r25, r25
    2870:	2a 95       	dec	r18
    2872:	e2 f7       	brpl	.-8      	; 0x286c <DIO_enuSetPinDirection+0x8c>
    2874:	80 95       	com	r24
    2876:	84 23       	and	r24, r20
    2878:	8c 93       	st	X, r24
			DDRA |=(Copy_u8Value<<Copy_u8PinID);
    287a:	aa e3       	ldi	r26, 0x3A	; 58
    287c:	b0 e0       	ldi	r27, 0x00	; 0
    287e:	ea e3       	ldi	r30, 0x3A	; 58
    2880:	f0 e0       	ldi	r31, 0x00	; 0
    2882:	80 81       	ld	r24, Z
    2884:	48 2f       	mov	r20, r24
    2886:	8c 81       	ldd	r24, Y+4	; 0x04
    2888:	28 2f       	mov	r18, r24
    288a:	30 e0       	ldi	r19, 0x00	; 0
    288c:	8b 81       	ldd	r24, Y+3	; 0x03
    288e:	88 2f       	mov	r24, r24
    2890:	90 e0       	ldi	r25, 0x00	; 0
    2892:	b9 01       	movw	r22, r18
    2894:	02 c0       	rjmp	.+4      	; 0x289a <DIO_enuSetPinDirection+0xba>
    2896:	66 0f       	add	r22, r22
    2898:	77 1f       	adc	r23, r23
    289a:	8a 95       	dec	r24
    289c:	e2 f7       	brpl	.-8      	; 0x2896 <DIO_enuSetPinDirection+0xb6>
    289e:	cb 01       	movw	r24, r22
    28a0:	84 2b       	or	r24, r20
    28a2:	8c 93       	st	X, r24
    28a4:	7a c0       	rjmp	.+244    	; 0x299a <DIO_enuSetPinDirection+0x1ba>
			break;
		case DIO_PORTB:
			DDRB&=~(DIO_MASK_BIT<<Copy_u8PinID);
    28a6:	a7 e3       	ldi	r26, 0x37	; 55
    28a8:	b0 e0       	ldi	r27, 0x00	; 0
    28aa:	e7 e3       	ldi	r30, 0x37	; 55
    28ac:	f0 e0       	ldi	r31, 0x00	; 0
    28ae:	80 81       	ld	r24, Z
    28b0:	48 2f       	mov	r20, r24
    28b2:	8b 81       	ldd	r24, Y+3	; 0x03
    28b4:	28 2f       	mov	r18, r24
    28b6:	30 e0       	ldi	r19, 0x00	; 0
    28b8:	81 e0       	ldi	r24, 0x01	; 1
    28ba:	90 e0       	ldi	r25, 0x00	; 0
    28bc:	02 c0       	rjmp	.+4      	; 0x28c2 <DIO_enuSetPinDirection+0xe2>
    28be:	88 0f       	add	r24, r24
    28c0:	99 1f       	adc	r25, r25
    28c2:	2a 95       	dec	r18
    28c4:	e2 f7       	brpl	.-8      	; 0x28be <DIO_enuSetPinDirection+0xde>
    28c6:	80 95       	com	r24
    28c8:	84 23       	and	r24, r20
    28ca:	8c 93       	st	X, r24
			DDRB |=(Copy_u8Value<<Copy_u8PinID);
    28cc:	a7 e3       	ldi	r26, 0x37	; 55
    28ce:	b0 e0       	ldi	r27, 0x00	; 0
    28d0:	e7 e3       	ldi	r30, 0x37	; 55
    28d2:	f0 e0       	ldi	r31, 0x00	; 0
    28d4:	80 81       	ld	r24, Z
    28d6:	48 2f       	mov	r20, r24
    28d8:	8c 81       	ldd	r24, Y+4	; 0x04
    28da:	28 2f       	mov	r18, r24
    28dc:	30 e0       	ldi	r19, 0x00	; 0
    28de:	8b 81       	ldd	r24, Y+3	; 0x03
    28e0:	88 2f       	mov	r24, r24
    28e2:	90 e0       	ldi	r25, 0x00	; 0
    28e4:	b9 01       	movw	r22, r18
    28e6:	02 c0       	rjmp	.+4      	; 0x28ec <DIO_enuSetPinDirection+0x10c>
    28e8:	66 0f       	add	r22, r22
    28ea:	77 1f       	adc	r23, r23
    28ec:	8a 95       	dec	r24
    28ee:	e2 f7       	brpl	.-8      	; 0x28e8 <DIO_enuSetPinDirection+0x108>
    28f0:	cb 01       	movw	r24, r22
    28f2:	84 2b       	or	r24, r20
    28f4:	8c 93       	st	X, r24
    28f6:	51 c0       	rjmp	.+162    	; 0x299a <DIO_enuSetPinDirection+0x1ba>
			break;
		case DIO_PORTC:
			DDRC&=~(DIO_MASK_BIT<<Copy_u8PinID);
    28f8:	a4 e3       	ldi	r26, 0x34	; 52
    28fa:	b0 e0       	ldi	r27, 0x00	; 0
    28fc:	e4 e3       	ldi	r30, 0x34	; 52
    28fe:	f0 e0       	ldi	r31, 0x00	; 0
    2900:	80 81       	ld	r24, Z
    2902:	48 2f       	mov	r20, r24
    2904:	8b 81       	ldd	r24, Y+3	; 0x03
    2906:	28 2f       	mov	r18, r24
    2908:	30 e0       	ldi	r19, 0x00	; 0
    290a:	81 e0       	ldi	r24, 0x01	; 1
    290c:	90 e0       	ldi	r25, 0x00	; 0
    290e:	02 c0       	rjmp	.+4      	; 0x2914 <DIO_enuSetPinDirection+0x134>
    2910:	88 0f       	add	r24, r24
    2912:	99 1f       	adc	r25, r25
    2914:	2a 95       	dec	r18
    2916:	e2 f7       	brpl	.-8      	; 0x2910 <DIO_enuSetPinDirection+0x130>
    2918:	80 95       	com	r24
    291a:	84 23       	and	r24, r20
    291c:	8c 93       	st	X, r24
			DDRC |=(Copy_u8Value<<Copy_u8PinID);
    291e:	a4 e3       	ldi	r26, 0x34	; 52
    2920:	b0 e0       	ldi	r27, 0x00	; 0
    2922:	e4 e3       	ldi	r30, 0x34	; 52
    2924:	f0 e0       	ldi	r31, 0x00	; 0
    2926:	80 81       	ld	r24, Z
    2928:	48 2f       	mov	r20, r24
    292a:	8c 81       	ldd	r24, Y+4	; 0x04
    292c:	28 2f       	mov	r18, r24
    292e:	30 e0       	ldi	r19, 0x00	; 0
    2930:	8b 81       	ldd	r24, Y+3	; 0x03
    2932:	88 2f       	mov	r24, r24
    2934:	90 e0       	ldi	r25, 0x00	; 0
    2936:	b9 01       	movw	r22, r18
    2938:	02 c0       	rjmp	.+4      	; 0x293e <DIO_enuSetPinDirection+0x15e>
    293a:	66 0f       	add	r22, r22
    293c:	77 1f       	adc	r23, r23
    293e:	8a 95       	dec	r24
    2940:	e2 f7       	brpl	.-8      	; 0x293a <DIO_enuSetPinDirection+0x15a>
    2942:	cb 01       	movw	r24, r22
    2944:	84 2b       	or	r24, r20
    2946:	8c 93       	st	X, r24
    2948:	28 c0       	rjmp	.+80     	; 0x299a <DIO_enuSetPinDirection+0x1ba>
			break;
		case DIO_PORTD:
			DDRD&=~(DIO_MASK_BIT<<Copy_u8PinID);
    294a:	a1 e3       	ldi	r26, 0x31	; 49
    294c:	b0 e0       	ldi	r27, 0x00	; 0
    294e:	e1 e3       	ldi	r30, 0x31	; 49
    2950:	f0 e0       	ldi	r31, 0x00	; 0
    2952:	80 81       	ld	r24, Z
    2954:	48 2f       	mov	r20, r24
    2956:	8b 81       	ldd	r24, Y+3	; 0x03
    2958:	28 2f       	mov	r18, r24
    295a:	30 e0       	ldi	r19, 0x00	; 0
    295c:	81 e0       	ldi	r24, 0x01	; 1
    295e:	90 e0       	ldi	r25, 0x00	; 0
    2960:	02 c0       	rjmp	.+4      	; 0x2966 <DIO_enuSetPinDirection+0x186>
    2962:	88 0f       	add	r24, r24
    2964:	99 1f       	adc	r25, r25
    2966:	2a 95       	dec	r18
    2968:	e2 f7       	brpl	.-8      	; 0x2962 <DIO_enuSetPinDirection+0x182>
    296a:	80 95       	com	r24
    296c:	84 23       	and	r24, r20
    296e:	8c 93       	st	X, r24
			DDRD |=(Copy_u8Value<<Copy_u8PinID);
    2970:	a1 e3       	ldi	r26, 0x31	; 49
    2972:	b0 e0       	ldi	r27, 0x00	; 0
    2974:	e1 e3       	ldi	r30, 0x31	; 49
    2976:	f0 e0       	ldi	r31, 0x00	; 0
    2978:	80 81       	ld	r24, Z
    297a:	48 2f       	mov	r20, r24
    297c:	8c 81       	ldd	r24, Y+4	; 0x04
    297e:	28 2f       	mov	r18, r24
    2980:	30 e0       	ldi	r19, 0x00	; 0
    2982:	8b 81       	ldd	r24, Y+3	; 0x03
    2984:	88 2f       	mov	r24, r24
    2986:	90 e0       	ldi	r25, 0x00	; 0
    2988:	b9 01       	movw	r22, r18
    298a:	02 c0       	rjmp	.+4      	; 0x2990 <DIO_enuSetPinDirection+0x1b0>
    298c:	66 0f       	add	r22, r22
    298e:	77 1f       	adc	r23, r23
    2990:	8a 95       	dec	r24
    2992:	e2 f7       	brpl	.-8      	; 0x298c <DIO_enuSetPinDirection+0x1ac>
    2994:	cb 01       	movw	r24, r22
    2996:	84 2b       	or	r24, r20
    2998:	8c 93       	st	X, r24
			break;
		}
		 Local_enuErrorstate=ES_OK;
    299a:	81 e0       	ldi	r24, 0x01	; 1
    299c:	89 83       	std	Y+1, r24	; 0x01
    299e:	02 c0       	rjmp	.+4      	; 0x29a4 <DIO_enuSetPinDirection+0x1c4>
	}
	else
	{
		Local_enuErrorstate=ES_OUT_OF_RANGE;
    29a0:	83 e0       	ldi	r24, 0x03	; 3
    29a2:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
    29a4:	89 81       	ldd	r24, Y+1	; 0x01
}
    29a6:	26 96       	adiw	r28, 0x06	; 6
    29a8:	0f b6       	in	r0, 0x3f	; 63
    29aa:	f8 94       	cli
    29ac:	de bf       	out	0x3e, r29	; 62
    29ae:	0f be       	out	0x3f, r0	; 63
    29b0:	cd bf       	out	0x3d, r28	; 61
    29b2:	cf 91       	pop	r28
    29b4:	df 91       	pop	r29
    29b6:	08 95       	ret

000029b8 <DIO_enuSetPinValue>:

ES_t DIO_enuSetPinValue(u8 Copy_u8PortID ,u8 Copy_u8PinID ,u8 Copy_u8Value)
{
    29b8:	df 93       	push	r29
    29ba:	cf 93       	push	r28
    29bc:	00 d0       	rcall	.+0      	; 0x29be <DIO_enuSetPinValue+0x6>
    29be:	00 d0       	rcall	.+0      	; 0x29c0 <DIO_enuSetPinValue+0x8>
    29c0:	00 d0       	rcall	.+0      	; 0x29c2 <DIO_enuSetPinValue+0xa>
    29c2:	cd b7       	in	r28, 0x3d	; 61
    29c4:	de b7       	in	r29, 0x3e	; 62
    29c6:	8a 83       	std	Y+2, r24	; 0x02
    29c8:	6b 83       	std	Y+3, r22	; 0x03
    29ca:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorstate=ES_NOK;
    29cc:	19 82       	std	Y+1, r1	; 0x01
	if( Copy_u8PortID <= DIO_PORTD && Copy_u8PinID<=DIO_PIN7 && Copy_u8Value <=OUTPUT )
    29ce:	8a 81       	ldd	r24, Y+2	; 0x02
    29d0:	84 30       	cpi	r24, 0x04	; 4
    29d2:	08 f0       	brcs	.+2      	; 0x29d6 <DIO_enuSetPinValue+0x1e>
    29d4:	d1 c0       	rjmp	.+418    	; 0x2b78 <DIO_enuSetPinValue+0x1c0>
    29d6:	8b 81       	ldd	r24, Y+3	; 0x03
    29d8:	88 30       	cpi	r24, 0x08	; 8
    29da:	08 f0       	brcs	.+2      	; 0x29de <DIO_enuSetPinValue+0x26>
    29dc:	cd c0       	rjmp	.+410    	; 0x2b78 <DIO_enuSetPinValue+0x1c0>
    29de:	8c 81       	ldd	r24, Y+4	; 0x04
    29e0:	82 30       	cpi	r24, 0x02	; 2
    29e2:	08 f0       	brcs	.+2      	; 0x29e6 <DIO_enuSetPinValue+0x2e>
    29e4:	c9 c0       	rjmp	.+402    	; 0x2b78 <DIO_enuSetPinValue+0x1c0>
	{
		switch(Copy_u8PortID)
    29e6:	8a 81       	ldd	r24, Y+2	; 0x02
    29e8:	28 2f       	mov	r18, r24
    29ea:	30 e0       	ldi	r19, 0x00	; 0
    29ec:	3e 83       	std	Y+6, r19	; 0x06
    29ee:	2d 83       	std	Y+5, r18	; 0x05
    29f0:	6d 81       	ldd	r22, Y+5	; 0x05
    29f2:	7e 81       	ldd	r23, Y+6	; 0x06
    29f4:	61 30       	cpi	r22, 0x01	; 1
    29f6:	71 05       	cpc	r23, r1
    29f8:	09 f4       	brne	.+2      	; 0x29fc <DIO_enuSetPinValue+0x44>
    29fa:	41 c0       	rjmp	.+130    	; 0x2a7e <DIO_enuSetPinValue+0xc6>
    29fc:	8d 81       	ldd	r24, Y+5	; 0x05
    29fe:	9e 81       	ldd	r25, Y+6	; 0x06
    2a00:	82 30       	cpi	r24, 0x02	; 2
    2a02:	91 05       	cpc	r25, r1
    2a04:	34 f4       	brge	.+12     	; 0x2a12 <DIO_enuSetPinValue+0x5a>
    2a06:	2d 81       	ldd	r18, Y+5	; 0x05
    2a08:	3e 81       	ldd	r19, Y+6	; 0x06
    2a0a:	21 15       	cp	r18, r1
    2a0c:	31 05       	cpc	r19, r1
    2a0e:	71 f0       	breq	.+28     	; 0x2a2c <DIO_enuSetPinValue+0x74>
    2a10:	b0 c0       	rjmp	.+352    	; 0x2b72 <DIO_enuSetPinValue+0x1ba>
    2a12:	6d 81       	ldd	r22, Y+5	; 0x05
    2a14:	7e 81       	ldd	r23, Y+6	; 0x06
    2a16:	62 30       	cpi	r22, 0x02	; 2
    2a18:	71 05       	cpc	r23, r1
    2a1a:	09 f4       	brne	.+2      	; 0x2a1e <DIO_enuSetPinValue+0x66>
    2a1c:	59 c0       	rjmp	.+178    	; 0x2ad0 <DIO_enuSetPinValue+0x118>
    2a1e:	8d 81       	ldd	r24, Y+5	; 0x05
    2a20:	9e 81       	ldd	r25, Y+6	; 0x06
    2a22:	83 30       	cpi	r24, 0x03	; 3
    2a24:	91 05       	cpc	r25, r1
    2a26:	09 f4       	brne	.+2      	; 0x2a2a <DIO_enuSetPinValue+0x72>
    2a28:	7c c0       	rjmp	.+248    	; 0x2b22 <DIO_enuSetPinValue+0x16a>
    2a2a:	a3 c0       	rjmp	.+326    	; 0x2b72 <DIO_enuSetPinValue+0x1ba>
		{
		case DIO_PORTA:
			PORTA&=~(DIO_MASK_BIT<<Copy_u8PinID);
    2a2c:	ab e3       	ldi	r26, 0x3B	; 59
    2a2e:	b0 e0       	ldi	r27, 0x00	; 0
    2a30:	eb e3       	ldi	r30, 0x3B	; 59
    2a32:	f0 e0       	ldi	r31, 0x00	; 0
    2a34:	80 81       	ld	r24, Z
    2a36:	48 2f       	mov	r20, r24
    2a38:	8b 81       	ldd	r24, Y+3	; 0x03
    2a3a:	28 2f       	mov	r18, r24
    2a3c:	30 e0       	ldi	r19, 0x00	; 0
    2a3e:	81 e0       	ldi	r24, 0x01	; 1
    2a40:	90 e0       	ldi	r25, 0x00	; 0
    2a42:	02 c0       	rjmp	.+4      	; 0x2a48 <DIO_enuSetPinValue+0x90>
    2a44:	88 0f       	add	r24, r24
    2a46:	99 1f       	adc	r25, r25
    2a48:	2a 95       	dec	r18
    2a4a:	e2 f7       	brpl	.-8      	; 0x2a44 <DIO_enuSetPinValue+0x8c>
    2a4c:	80 95       	com	r24
    2a4e:	84 23       	and	r24, r20
    2a50:	8c 93       	st	X, r24
			PORTA |=(Copy_u8Value<<Copy_u8PinID);
    2a52:	ab e3       	ldi	r26, 0x3B	; 59
    2a54:	b0 e0       	ldi	r27, 0x00	; 0
    2a56:	eb e3       	ldi	r30, 0x3B	; 59
    2a58:	f0 e0       	ldi	r31, 0x00	; 0
    2a5a:	80 81       	ld	r24, Z
    2a5c:	48 2f       	mov	r20, r24
    2a5e:	8c 81       	ldd	r24, Y+4	; 0x04
    2a60:	28 2f       	mov	r18, r24
    2a62:	30 e0       	ldi	r19, 0x00	; 0
    2a64:	8b 81       	ldd	r24, Y+3	; 0x03
    2a66:	88 2f       	mov	r24, r24
    2a68:	90 e0       	ldi	r25, 0x00	; 0
    2a6a:	b9 01       	movw	r22, r18
    2a6c:	02 c0       	rjmp	.+4      	; 0x2a72 <DIO_enuSetPinValue+0xba>
    2a6e:	66 0f       	add	r22, r22
    2a70:	77 1f       	adc	r23, r23
    2a72:	8a 95       	dec	r24
    2a74:	e2 f7       	brpl	.-8      	; 0x2a6e <DIO_enuSetPinValue+0xb6>
    2a76:	cb 01       	movw	r24, r22
    2a78:	84 2b       	or	r24, r20
    2a7a:	8c 93       	st	X, r24
    2a7c:	7a c0       	rjmp	.+244    	; 0x2b72 <DIO_enuSetPinValue+0x1ba>
			break;
		case DIO_PORTB:
			PORTB&=~(DIO_MASK_BIT<<Copy_u8PinID);
    2a7e:	a8 e3       	ldi	r26, 0x38	; 56
    2a80:	b0 e0       	ldi	r27, 0x00	; 0
    2a82:	e8 e3       	ldi	r30, 0x38	; 56
    2a84:	f0 e0       	ldi	r31, 0x00	; 0
    2a86:	80 81       	ld	r24, Z
    2a88:	48 2f       	mov	r20, r24
    2a8a:	8b 81       	ldd	r24, Y+3	; 0x03
    2a8c:	28 2f       	mov	r18, r24
    2a8e:	30 e0       	ldi	r19, 0x00	; 0
    2a90:	81 e0       	ldi	r24, 0x01	; 1
    2a92:	90 e0       	ldi	r25, 0x00	; 0
    2a94:	02 c0       	rjmp	.+4      	; 0x2a9a <DIO_enuSetPinValue+0xe2>
    2a96:	88 0f       	add	r24, r24
    2a98:	99 1f       	adc	r25, r25
    2a9a:	2a 95       	dec	r18
    2a9c:	e2 f7       	brpl	.-8      	; 0x2a96 <DIO_enuSetPinValue+0xde>
    2a9e:	80 95       	com	r24
    2aa0:	84 23       	and	r24, r20
    2aa2:	8c 93       	st	X, r24
			PORTB |=(Copy_u8Value<<Copy_u8PinID);
    2aa4:	a8 e3       	ldi	r26, 0x38	; 56
    2aa6:	b0 e0       	ldi	r27, 0x00	; 0
    2aa8:	e8 e3       	ldi	r30, 0x38	; 56
    2aaa:	f0 e0       	ldi	r31, 0x00	; 0
    2aac:	80 81       	ld	r24, Z
    2aae:	48 2f       	mov	r20, r24
    2ab0:	8c 81       	ldd	r24, Y+4	; 0x04
    2ab2:	28 2f       	mov	r18, r24
    2ab4:	30 e0       	ldi	r19, 0x00	; 0
    2ab6:	8b 81       	ldd	r24, Y+3	; 0x03
    2ab8:	88 2f       	mov	r24, r24
    2aba:	90 e0       	ldi	r25, 0x00	; 0
    2abc:	b9 01       	movw	r22, r18
    2abe:	02 c0       	rjmp	.+4      	; 0x2ac4 <DIO_enuSetPinValue+0x10c>
    2ac0:	66 0f       	add	r22, r22
    2ac2:	77 1f       	adc	r23, r23
    2ac4:	8a 95       	dec	r24
    2ac6:	e2 f7       	brpl	.-8      	; 0x2ac0 <DIO_enuSetPinValue+0x108>
    2ac8:	cb 01       	movw	r24, r22
    2aca:	84 2b       	or	r24, r20
    2acc:	8c 93       	st	X, r24
    2ace:	51 c0       	rjmp	.+162    	; 0x2b72 <DIO_enuSetPinValue+0x1ba>
			break;
		case DIO_PORTC:
			PORTC&=~(DIO_MASK_BIT<<Copy_u8PinID);
    2ad0:	a5 e3       	ldi	r26, 0x35	; 53
    2ad2:	b0 e0       	ldi	r27, 0x00	; 0
    2ad4:	e5 e3       	ldi	r30, 0x35	; 53
    2ad6:	f0 e0       	ldi	r31, 0x00	; 0
    2ad8:	80 81       	ld	r24, Z
    2ada:	48 2f       	mov	r20, r24
    2adc:	8b 81       	ldd	r24, Y+3	; 0x03
    2ade:	28 2f       	mov	r18, r24
    2ae0:	30 e0       	ldi	r19, 0x00	; 0
    2ae2:	81 e0       	ldi	r24, 0x01	; 1
    2ae4:	90 e0       	ldi	r25, 0x00	; 0
    2ae6:	02 c0       	rjmp	.+4      	; 0x2aec <DIO_enuSetPinValue+0x134>
    2ae8:	88 0f       	add	r24, r24
    2aea:	99 1f       	adc	r25, r25
    2aec:	2a 95       	dec	r18
    2aee:	e2 f7       	brpl	.-8      	; 0x2ae8 <DIO_enuSetPinValue+0x130>
    2af0:	80 95       	com	r24
    2af2:	84 23       	and	r24, r20
    2af4:	8c 93       	st	X, r24
			PORTC |=(Copy_u8Value<<Copy_u8PinID);
    2af6:	a5 e3       	ldi	r26, 0x35	; 53
    2af8:	b0 e0       	ldi	r27, 0x00	; 0
    2afa:	e5 e3       	ldi	r30, 0x35	; 53
    2afc:	f0 e0       	ldi	r31, 0x00	; 0
    2afe:	80 81       	ld	r24, Z
    2b00:	48 2f       	mov	r20, r24
    2b02:	8c 81       	ldd	r24, Y+4	; 0x04
    2b04:	28 2f       	mov	r18, r24
    2b06:	30 e0       	ldi	r19, 0x00	; 0
    2b08:	8b 81       	ldd	r24, Y+3	; 0x03
    2b0a:	88 2f       	mov	r24, r24
    2b0c:	90 e0       	ldi	r25, 0x00	; 0
    2b0e:	b9 01       	movw	r22, r18
    2b10:	02 c0       	rjmp	.+4      	; 0x2b16 <DIO_enuSetPinValue+0x15e>
    2b12:	66 0f       	add	r22, r22
    2b14:	77 1f       	adc	r23, r23
    2b16:	8a 95       	dec	r24
    2b18:	e2 f7       	brpl	.-8      	; 0x2b12 <DIO_enuSetPinValue+0x15a>
    2b1a:	cb 01       	movw	r24, r22
    2b1c:	84 2b       	or	r24, r20
    2b1e:	8c 93       	st	X, r24
    2b20:	28 c0       	rjmp	.+80     	; 0x2b72 <DIO_enuSetPinValue+0x1ba>
			break;
		case DIO_PORTD:
			PORTD&=~(DIO_MASK_BIT<<Copy_u8PinID);
    2b22:	a2 e3       	ldi	r26, 0x32	; 50
    2b24:	b0 e0       	ldi	r27, 0x00	; 0
    2b26:	e2 e3       	ldi	r30, 0x32	; 50
    2b28:	f0 e0       	ldi	r31, 0x00	; 0
    2b2a:	80 81       	ld	r24, Z
    2b2c:	48 2f       	mov	r20, r24
    2b2e:	8b 81       	ldd	r24, Y+3	; 0x03
    2b30:	28 2f       	mov	r18, r24
    2b32:	30 e0       	ldi	r19, 0x00	; 0
    2b34:	81 e0       	ldi	r24, 0x01	; 1
    2b36:	90 e0       	ldi	r25, 0x00	; 0
    2b38:	02 c0       	rjmp	.+4      	; 0x2b3e <DIO_enuSetPinValue+0x186>
    2b3a:	88 0f       	add	r24, r24
    2b3c:	99 1f       	adc	r25, r25
    2b3e:	2a 95       	dec	r18
    2b40:	e2 f7       	brpl	.-8      	; 0x2b3a <DIO_enuSetPinValue+0x182>
    2b42:	80 95       	com	r24
    2b44:	84 23       	and	r24, r20
    2b46:	8c 93       	st	X, r24
			PORTD |=(Copy_u8Value<<Copy_u8PinID);
    2b48:	a2 e3       	ldi	r26, 0x32	; 50
    2b4a:	b0 e0       	ldi	r27, 0x00	; 0
    2b4c:	e2 e3       	ldi	r30, 0x32	; 50
    2b4e:	f0 e0       	ldi	r31, 0x00	; 0
    2b50:	80 81       	ld	r24, Z
    2b52:	48 2f       	mov	r20, r24
    2b54:	8c 81       	ldd	r24, Y+4	; 0x04
    2b56:	28 2f       	mov	r18, r24
    2b58:	30 e0       	ldi	r19, 0x00	; 0
    2b5a:	8b 81       	ldd	r24, Y+3	; 0x03
    2b5c:	88 2f       	mov	r24, r24
    2b5e:	90 e0       	ldi	r25, 0x00	; 0
    2b60:	b9 01       	movw	r22, r18
    2b62:	02 c0       	rjmp	.+4      	; 0x2b68 <DIO_enuSetPinValue+0x1b0>
    2b64:	66 0f       	add	r22, r22
    2b66:	77 1f       	adc	r23, r23
    2b68:	8a 95       	dec	r24
    2b6a:	e2 f7       	brpl	.-8      	; 0x2b64 <DIO_enuSetPinValue+0x1ac>
    2b6c:	cb 01       	movw	r24, r22
    2b6e:	84 2b       	or	r24, r20
    2b70:	8c 93       	st	X, r24
			break;
		}
		 Local_enuErrorstate=ES_OK;
    2b72:	81 e0       	ldi	r24, 0x01	; 1
    2b74:	89 83       	std	Y+1, r24	; 0x01
    2b76:	02 c0       	rjmp	.+4      	; 0x2b7c <DIO_enuSetPinValue+0x1c4>
	}
	else
	{
		Local_enuErrorstate=ES_OUT_OF_RANGE;
    2b78:	83 e0       	ldi	r24, 0x03	; 3
    2b7a:	89 83       	std	Y+1, r24	; 0x01
	}



	return Local_enuErrorstate;
    2b7c:	89 81       	ldd	r24, Y+1	; 0x01
}
    2b7e:	26 96       	adiw	r28, 0x06	; 6
    2b80:	0f b6       	in	r0, 0x3f	; 63
    2b82:	f8 94       	cli
    2b84:	de bf       	out	0x3e, r29	; 62
    2b86:	0f be       	out	0x3f, r0	; 63
    2b88:	cd bf       	out	0x3d, r28	; 61
    2b8a:	cf 91       	pop	r28
    2b8c:	df 91       	pop	r29
    2b8e:	08 95       	ret

00002b90 <DIO_enuTogPinValue>:

ES_t DIO_enuTogPinValue(u8 Copy_u8PortID ,u8 Copy_u8PinID )
{
    2b90:	df 93       	push	r29
    2b92:	cf 93       	push	r28
    2b94:	00 d0       	rcall	.+0      	; 0x2b96 <DIO_enuTogPinValue+0x6>
    2b96:	00 d0       	rcall	.+0      	; 0x2b98 <DIO_enuTogPinValue+0x8>
    2b98:	0f 92       	push	r0
    2b9a:	cd b7       	in	r28, 0x3d	; 61
    2b9c:	de b7       	in	r29, 0x3e	; 62
    2b9e:	8a 83       	std	Y+2, r24	; 0x02
    2ba0:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorstate=ES_NOK;
    2ba2:	19 82       	std	Y+1, r1	; 0x01
	if( Copy_u8PortID <= DIO_PORTD && Copy_u8PinID<=DIO_PIN7  )
    2ba4:	8a 81       	ldd	r24, Y+2	; 0x02
    2ba6:	84 30       	cpi	r24, 0x04	; 4
    2ba8:	08 f0       	brcs	.+2      	; 0x2bac <DIO_enuTogPinValue+0x1c>
    2baa:	75 c0       	rjmp	.+234    	; 0x2c96 <DIO_enuTogPinValue+0x106>
    2bac:	8b 81       	ldd	r24, Y+3	; 0x03
    2bae:	88 30       	cpi	r24, 0x08	; 8
    2bb0:	08 f0       	brcs	.+2      	; 0x2bb4 <DIO_enuTogPinValue+0x24>
    2bb2:	71 c0       	rjmp	.+226    	; 0x2c96 <DIO_enuTogPinValue+0x106>
	{
		switch(Copy_u8PortID)
    2bb4:	8a 81       	ldd	r24, Y+2	; 0x02
    2bb6:	28 2f       	mov	r18, r24
    2bb8:	30 e0       	ldi	r19, 0x00	; 0
    2bba:	3d 83       	std	Y+5, r19	; 0x05
    2bbc:	2c 83       	std	Y+4, r18	; 0x04
    2bbe:	8c 81       	ldd	r24, Y+4	; 0x04
    2bc0:	9d 81       	ldd	r25, Y+5	; 0x05
    2bc2:	81 30       	cpi	r24, 0x01	; 1
    2bc4:	91 05       	cpc	r25, r1
    2bc6:	49 f1       	breq	.+82     	; 0x2c1a <DIO_enuTogPinValue+0x8a>
    2bc8:	2c 81       	ldd	r18, Y+4	; 0x04
    2bca:	3d 81       	ldd	r19, Y+5	; 0x05
    2bcc:	22 30       	cpi	r18, 0x02	; 2
    2bce:	31 05       	cpc	r19, r1
    2bd0:	2c f4       	brge	.+10     	; 0x2bdc <DIO_enuTogPinValue+0x4c>
    2bd2:	8c 81       	ldd	r24, Y+4	; 0x04
    2bd4:	9d 81       	ldd	r25, Y+5	; 0x05
    2bd6:	00 97       	sbiw	r24, 0x00	; 0
    2bd8:	61 f0       	breq	.+24     	; 0x2bf2 <DIO_enuTogPinValue+0x62>
    2bda:	5a c0       	rjmp	.+180    	; 0x2c90 <DIO_enuTogPinValue+0x100>
    2bdc:	2c 81       	ldd	r18, Y+4	; 0x04
    2bde:	3d 81       	ldd	r19, Y+5	; 0x05
    2be0:	22 30       	cpi	r18, 0x02	; 2
    2be2:	31 05       	cpc	r19, r1
    2be4:	71 f1       	breq	.+92     	; 0x2c42 <DIO_enuTogPinValue+0xb2>
    2be6:	8c 81       	ldd	r24, Y+4	; 0x04
    2be8:	9d 81       	ldd	r25, Y+5	; 0x05
    2bea:	83 30       	cpi	r24, 0x03	; 3
    2bec:	91 05       	cpc	r25, r1
    2bee:	e9 f1       	breq	.+122    	; 0x2c6a <DIO_enuTogPinValue+0xda>
    2bf0:	4f c0       	rjmp	.+158    	; 0x2c90 <DIO_enuTogPinValue+0x100>
		{
		case DIO_PORTA:
			PORTA ^=(DIO_MASK_BIT<<Copy_u8PinID);
    2bf2:	ab e3       	ldi	r26, 0x3B	; 59
    2bf4:	b0 e0       	ldi	r27, 0x00	; 0
    2bf6:	eb e3       	ldi	r30, 0x3B	; 59
    2bf8:	f0 e0       	ldi	r31, 0x00	; 0
    2bfa:	80 81       	ld	r24, Z
    2bfc:	48 2f       	mov	r20, r24
    2bfe:	8b 81       	ldd	r24, Y+3	; 0x03
    2c00:	28 2f       	mov	r18, r24
    2c02:	30 e0       	ldi	r19, 0x00	; 0
    2c04:	81 e0       	ldi	r24, 0x01	; 1
    2c06:	90 e0       	ldi	r25, 0x00	; 0
    2c08:	02 2e       	mov	r0, r18
    2c0a:	02 c0       	rjmp	.+4      	; 0x2c10 <DIO_enuTogPinValue+0x80>
    2c0c:	88 0f       	add	r24, r24
    2c0e:	99 1f       	adc	r25, r25
    2c10:	0a 94       	dec	r0
    2c12:	e2 f7       	brpl	.-8      	; 0x2c0c <DIO_enuTogPinValue+0x7c>
    2c14:	84 27       	eor	r24, r20
    2c16:	8c 93       	st	X, r24
    2c18:	3b c0       	rjmp	.+118    	; 0x2c90 <DIO_enuTogPinValue+0x100>
			break;
		case DIO_PORTB:
			PORTB ^=(DIO_MASK_BIT<<Copy_u8PinID);
    2c1a:	a8 e3       	ldi	r26, 0x38	; 56
    2c1c:	b0 e0       	ldi	r27, 0x00	; 0
    2c1e:	e8 e3       	ldi	r30, 0x38	; 56
    2c20:	f0 e0       	ldi	r31, 0x00	; 0
    2c22:	80 81       	ld	r24, Z
    2c24:	48 2f       	mov	r20, r24
    2c26:	8b 81       	ldd	r24, Y+3	; 0x03
    2c28:	28 2f       	mov	r18, r24
    2c2a:	30 e0       	ldi	r19, 0x00	; 0
    2c2c:	81 e0       	ldi	r24, 0x01	; 1
    2c2e:	90 e0       	ldi	r25, 0x00	; 0
    2c30:	02 2e       	mov	r0, r18
    2c32:	02 c0       	rjmp	.+4      	; 0x2c38 <DIO_enuTogPinValue+0xa8>
    2c34:	88 0f       	add	r24, r24
    2c36:	99 1f       	adc	r25, r25
    2c38:	0a 94       	dec	r0
    2c3a:	e2 f7       	brpl	.-8      	; 0x2c34 <DIO_enuTogPinValue+0xa4>
    2c3c:	84 27       	eor	r24, r20
    2c3e:	8c 93       	st	X, r24
    2c40:	27 c0       	rjmp	.+78     	; 0x2c90 <DIO_enuTogPinValue+0x100>
			break;
		case DIO_PORTC:
			PORTC ^=(DIO_MASK_BIT<<Copy_u8PinID);
    2c42:	a5 e3       	ldi	r26, 0x35	; 53
    2c44:	b0 e0       	ldi	r27, 0x00	; 0
    2c46:	e5 e3       	ldi	r30, 0x35	; 53
    2c48:	f0 e0       	ldi	r31, 0x00	; 0
    2c4a:	80 81       	ld	r24, Z
    2c4c:	48 2f       	mov	r20, r24
    2c4e:	8b 81       	ldd	r24, Y+3	; 0x03
    2c50:	28 2f       	mov	r18, r24
    2c52:	30 e0       	ldi	r19, 0x00	; 0
    2c54:	81 e0       	ldi	r24, 0x01	; 1
    2c56:	90 e0       	ldi	r25, 0x00	; 0
    2c58:	02 2e       	mov	r0, r18
    2c5a:	02 c0       	rjmp	.+4      	; 0x2c60 <DIO_enuTogPinValue+0xd0>
    2c5c:	88 0f       	add	r24, r24
    2c5e:	99 1f       	adc	r25, r25
    2c60:	0a 94       	dec	r0
    2c62:	e2 f7       	brpl	.-8      	; 0x2c5c <DIO_enuTogPinValue+0xcc>
    2c64:	84 27       	eor	r24, r20
    2c66:	8c 93       	st	X, r24
    2c68:	13 c0       	rjmp	.+38     	; 0x2c90 <DIO_enuTogPinValue+0x100>
			break;
		case DIO_PORTD:
			PORTD ^=(DIO_MASK_BIT<<Copy_u8PinID);
    2c6a:	a2 e3       	ldi	r26, 0x32	; 50
    2c6c:	b0 e0       	ldi	r27, 0x00	; 0
    2c6e:	e2 e3       	ldi	r30, 0x32	; 50
    2c70:	f0 e0       	ldi	r31, 0x00	; 0
    2c72:	80 81       	ld	r24, Z
    2c74:	48 2f       	mov	r20, r24
    2c76:	8b 81       	ldd	r24, Y+3	; 0x03
    2c78:	28 2f       	mov	r18, r24
    2c7a:	30 e0       	ldi	r19, 0x00	; 0
    2c7c:	81 e0       	ldi	r24, 0x01	; 1
    2c7e:	90 e0       	ldi	r25, 0x00	; 0
    2c80:	02 2e       	mov	r0, r18
    2c82:	02 c0       	rjmp	.+4      	; 0x2c88 <DIO_enuTogPinValue+0xf8>
    2c84:	88 0f       	add	r24, r24
    2c86:	99 1f       	adc	r25, r25
    2c88:	0a 94       	dec	r0
    2c8a:	e2 f7       	brpl	.-8      	; 0x2c84 <DIO_enuTogPinValue+0xf4>
    2c8c:	84 27       	eor	r24, r20
    2c8e:	8c 93       	st	X, r24
			break;
		}
		 Local_enuErrorstate=ES_OK;
    2c90:	81 e0       	ldi	r24, 0x01	; 1
    2c92:	89 83       	std	Y+1, r24	; 0x01
    2c94:	02 c0       	rjmp	.+4      	; 0x2c9a <DIO_enuTogPinValue+0x10a>
	}
	else
	{
		Local_enuErrorstate=ES_OUT_OF_RANGE;
    2c96:	83 e0       	ldi	r24, 0x03	; 3
    2c98:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_enuErrorstate;
    2c9a:	89 81       	ldd	r24, Y+1	; 0x01
}
    2c9c:	0f 90       	pop	r0
    2c9e:	0f 90       	pop	r0
    2ca0:	0f 90       	pop	r0
    2ca2:	0f 90       	pop	r0
    2ca4:	0f 90       	pop	r0
    2ca6:	cf 91       	pop	r28
    2ca8:	df 91       	pop	r29
    2caa:	08 95       	ret

00002cac <DIO_enuGetPinValue>:

ES_t DIO_enuGetPinValue(u8 Copy_u8PortID ,u8 Copy_u8PinID ,u8* Copy_pu8Value)
{
    2cac:	df 93       	push	r29
    2cae:	cf 93       	push	r28
    2cb0:	cd b7       	in	r28, 0x3d	; 61
    2cb2:	de b7       	in	r29, 0x3e	; 62
    2cb4:	27 97       	sbiw	r28, 0x07	; 7
    2cb6:	0f b6       	in	r0, 0x3f	; 63
    2cb8:	f8 94       	cli
    2cba:	de bf       	out	0x3e, r29	; 62
    2cbc:	0f be       	out	0x3f, r0	; 63
    2cbe:	cd bf       	out	0x3d, r28	; 61
    2cc0:	8a 83       	std	Y+2, r24	; 0x02
    2cc2:	6b 83       	std	Y+3, r22	; 0x03
    2cc4:	5d 83       	std	Y+5, r21	; 0x05
    2cc6:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorstate=ES_NOK;
    2cc8:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pu8Value !=NULL)
    2cca:	8c 81       	ldd	r24, Y+4	; 0x04
    2ccc:	9d 81       	ldd	r25, Y+5	; 0x05
    2cce:	00 97       	sbiw	r24, 0x00	; 0
    2cd0:	09 f4       	brne	.+2      	; 0x2cd4 <DIO_enuGetPinValue+0x28>
    2cd2:	7c c0       	rjmp	.+248    	; 0x2dcc <DIO_enuGetPinValue+0x120>
	{
		if( Copy_u8PortID <= DIO_PORTD && Copy_u8PinID<=DIO_PIN7 )
    2cd4:	8a 81       	ldd	r24, Y+2	; 0x02
    2cd6:	84 30       	cpi	r24, 0x04	; 4
    2cd8:	08 f0       	brcs	.+2      	; 0x2cdc <DIO_enuGetPinValue+0x30>
    2cda:	75 c0       	rjmp	.+234    	; 0x2dc6 <DIO_enuGetPinValue+0x11a>
    2cdc:	8b 81       	ldd	r24, Y+3	; 0x03
    2cde:	88 30       	cpi	r24, 0x08	; 8
    2ce0:	08 f0       	brcs	.+2      	; 0x2ce4 <DIO_enuGetPinValue+0x38>
    2ce2:	71 c0       	rjmp	.+226    	; 0x2dc6 <DIO_enuGetPinValue+0x11a>
		{
			switch(Copy_u8PortID)
    2ce4:	8a 81       	ldd	r24, Y+2	; 0x02
    2ce6:	28 2f       	mov	r18, r24
    2ce8:	30 e0       	ldi	r19, 0x00	; 0
    2cea:	3f 83       	std	Y+7, r19	; 0x07
    2cec:	2e 83       	std	Y+6, r18	; 0x06
    2cee:	4e 81       	ldd	r20, Y+6	; 0x06
    2cf0:	5f 81       	ldd	r21, Y+7	; 0x07
    2cf2:	41 30       	cpi	r20, 0x01	; 1
    2cf4:	51 05       	cpc	r21, r1
    2cf6:	59 f1       	breq	.+86     	; 0x2d4e <DIO_enuGetPinValue+0xa2>
    2cf8:	8e 81       	ldd	r24, Y+6	; 0x06
    2cfa:	9f 81       	ldd	r25, Y+7	; 0x07
    2cfc:	82 30       	cpi	r24, 0x02	; 2
    2cfe:	91 05       	cpc	r25, r1
    2d00:	34 f4       	brge	.+12     	; 0x2d0e <DIO_enuGetPinValue+0x62>
    2d02:	2e 81       	ldd	r18, Y+6	; 0x06
    2d04:	3f 81       	ldd	r19, Y+7	; 0x07
    2d06:	21 15       	cp	r18, r1
    2d08:	31 05       	cpc	r19, r1
    2d0a:	69 f0       	breq	.+26     	; 0x2d26 <DIO_enuGetPinValue+0x7a>
    2d0c:	61 c0       	rjmp	.+194    	; 0x2dd0 <DIO_enuGetPinValue+0x124>
    2d0e:	4e 81       	ldd	r20, Y+6	; 0x06
    2d10:	5f 81       	ldd	r21, Y+7	; 0x07
    2d12:	42 30       	cpi	r20, 0x02	; 2
    2d14:	51 05       	cpc	r21, r1
    2d16:	79 f1       	breq	.+94     	; 0x2d76 <DIO_enuGetPinValue+0xca>
    2d18:	8e 81       	ldd	r24, Y+6	; 0x06
    2d1a:	9f 81       	ldd	r25, Y+7	; 0x07
    2d1c:	83 30       	cpi	r24, 0x03	; 3
    2d1e:	91 05       	cpc	r25, r1
    2d20:	09 f4       	brne	.+2      	; 0x2d24 <DIO_enuGetPinValue+0x78>
    2d22:	3d c0       	rjmp	.+122    	; 0x2d9e <DIO_enuGetPinValue+0xf2>
    2d24:	55 c0       	rjmp	.+170    	; 0x2dd0 <DIO_enuGetPinValue+0x124>
			{
			case DIO_PORTA:
				*Copy_pu8Value=!((PINA & (DIO_MASK_BIT << Copy_u8PinID)) == 0);
    2d26:	e9 e3       	ldi	r30, 0x39	; 57
    2d28:	f0 e0       	ldi	r31, 0x00	; 0
    2d2a:	80 81       	ld	r24, Z
    2d2c:	28 2f       	mov	r18, r24
    2d2e:	30 e0       	ldi	r19, 0x00	; 0
    2d30:	8b 81       	ldd	r24, Y+3	; 0x03
    2d32:	88 2f       	mov	r24, r24
    2d34:	90 e0       	ldi	r25, 0x00	; 0
    2d36:	a9 01       	movw	r20, r18
    2d38:	02 c0       	rjmp	.+4      	; 0x2d3e <DIO_enuGetPinValue+0x92>
    2d3a:	55 95       	asr	r21
    2d3c:	47 95       	ror	r20
    2d3e:	8a 95       	dec	r24
    2d40:	e2 f7       	brpl	.-8      	; 0x2d3a <DIO_enuGetPinValue+0x8e>
    2d42:	ca 01       	movw	r24, r20
    2d44:	81 70       	andi	r24, 0x01	; 1
    2d46:	ec 81       	ldd	r30, Y+4	; 0x04
    2d48:	fd 81       	ldd	r31, Y+5	; 0x05
    2d4a:	80 83       	st	Z, r24
    2d4c:	41 c0       	rjmp	.+130    	; 0x2dd0 <DIO_enuGetPinValue+0x124>
				break;
			case DIO_PORTB:
				*Copy_pu8Value=!((PINB & (DIO_MASK_BIT << Copy_u8PinID)) == 0);
    2d4e:	e6 e3       	ldi	r30, 0x36	; 54
    2d50:	f0 e0       	ldi	r31, 0x00	; 0
    2d52:	80 81       	ld	r24, Z
    2d54:	28 2f       	mov	r18, r24
    2d56:	30 e0       	ldi	r19, 0x00	; 0
    2d58:	8b 81       	ldd	r24, Y+3	; 0x03
    2d5a:	88 2f       	mov	r24, r24
    2d5c:	90 e0       	ldi	r25, 0x00	; 0
    2d5e:	a9 01       	movw	r20, r18
    2d60:	02 c0       	rjmp	.+4      	; 0x2d66 <DIO_enuGetPinValue+0xba>
    2d62:	55 95       	asr	r21
    2d64:	47 95       	ror	r20
    2d66:	8a 95       	dec	r24
    2d68:	e2 f7       	brpl	.-8      	; 0x2d62 <DIO_enuGetPinValue+0xb6>
    2d6a:	ca 01       	movw	r24, r20
    2d6c:	81 70       	andi	r24, 0x01	; 1
    2d6e:	ec 81       	ldd	r30, Y+4	; 0x04
    2d70:	fd 81       	ldd	r31, Y+5	; 0x05
    2d72:	80 83       	st	Z, r24
    2d74:	2d c0       	rjmp	.+90     	; 0x2dd0 <DIO_enuGetPinValue+0x124>
				break;
			case DIO_PORTC:
				*Copy_pu8Value=!((PINC & (DIO_MASK_BIT << Copy_u8PinID)) == 0);
    2d76:	e3 e3       	ldi	r30, 0x33	; 51
    2d78:	f0 e0       	ldi	r31, 0x00	; 0
    2d7a:	80 81       	ld	r24, Z
    2d7c:	28 2f       	mov	r18, r24
    2d7e:	30 e0       	ldi	r19, 0x00	; 0
    2d80:	8b 81       	ldd	r24, Y+3	; 0x03
    2d82:	88 2f       	mov	r24, r24
    2d84:	90 e0       	ldi	r25, 0x00	; 0
    2d86:	a9 01       	movw	r20, r18
    2d88:	02 c0       	rjmp	.+4      	; 0x2d8e <DIO_enuGetPinValue+0xe2>
    2d8a:	55 95       	asr	r21
    2d8c:	47 95       	ror	r20
    2d8e:	8a 95       	dec	r24
    2d90:	e2 f7       	brpl	.-8      	; 0x2d8a <DIO_enuGetPinValue+0xde>
    2d92:	ca 01       	movw	r24, r20
    2d94:	81 70       	andi	r24, 0x01	; 1
    2d96:	ec 81       	ldd	r30, Y+4	; 0x04
    2d98:	fd 81       	ldd	r31, Y+5	; 0x05
    2d9a:	80 83       	st	Z, r24
    2d9c:	19 c0       	rjmp	.+50     	; 0x2dd0 <DIO_enuGetPinValue+0x124>
				break;
			case DIO_PORTD:
				*Copy_pu8Value=!((PIND & (DIO_MASK_BIT << Copy_u8PinID)) == 0);
    2d9e:	e0 e3       	ldi	r30, 0x30	; 48
    2da0:	f0 e0       	ldi	r31, 0x00	; 0
    2da2:	80 81       	ld	r24, Z
    2da4:	28 2f       	mov	r18, r24
    2da6:	30 e0       	ldi	r19, 0x00	; 0
    2da8:	8b 81       	ldd	r24, Y+3	; 0x03
    2daa:	88 2f       	mov	r24, r24
    2dac:	90 e0       	ldi	r25, 0x00	; 0
    2dae:	a9 01       	movw	r20, r18
    2db0:	02 c0       	rjmp	.+4      	; 0x2db6 <DIO_enuGetPinValue+0x10a>
    2db2:	55 95       	asr	r21
    2db4:	47 95       	ror	r20
    2db6:	8a 95       	dec	r24
    2db8:	e2 f7       	brpl	.-8      	; 0x2db2 <DIO_enuGetPinValue+0x106>
    2dba:	ca 01       	movw	r24, r20
    2dbc:	81 70       	andi	r24, 0x01	; 1
    2dbe:	ec 81       	ldd	r30, Y+4	; 0x04
    2dc0:	fd 81       	ldd	r31, Y+5	; 0x05
    2dc2:	80 83       	st	Z, r24
    2dc4:	05 c0       	rjmp	.+10     	; 0x2dd0 <DIO_enuGetPinValue+0x124>
				break;
			}
		}
		else
		{
			Local_enuErrorstate=ES_OUT_OF_RANGE;
    2dc6:	83 e0       	ldi	r24, 0x03	; 3
    2dc8:	89 83       	std	Y+1, r24	; 0x01
    2dca:	02 c0       	rjmp	.+4      	; 0x2dd0 <DIO_enuGetPinValue+0x124>
		}
	}
	else
	{
		Local_enuErrorstate=ES_NULL_POINTER;
    2dcc:	82 e0       	ldi	r24, 0x02	; 2
    2dce:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_enuErrorstate;
    2dd0:	89 81       	ldd	r24, Y+1	; 0x01
}
    2dd2:	27 96       	adiw	r28, 0x07	; 7
    2dd4:	0f b6       	in	r0, 0x3f	; 63
    2dd6:	f8 94       	cli
    2dd8:	de bf       	out	0x3e, r29	; 62
    2dda:	0f be       	out	0x3f, r0	; 63
    2ddc:	cd bf       	out	0x3d, r28	; 61
    2dde:	cf 91       	pop	r28
    2de0:	df 91       	pop	r29
    2de2:	08 95       	ret

00002de4 <ADC_enuInit>:

static void (*ADC_pfunISRFun)(void *)=NULL;
static void *ADC_pvidISRParameter =NULL;

ES_t ADC_enuInit(void)
{
    2de4:	df 93       	push	r29
    2de6:	cf 93       	push	r28
    2de8:	0f 92       	push	r0
    2dea:	cd b7       	in	r28, 0x3d	; 61
    2dec:	de b7       	in	r29, 0x3e	; 62
	 ES_t Local_enuErrorState=ES_NOK;
    2dee:	19 82       	std	Y+1, r1	; 0x01
	 ADCSRA |=(1<<2);
	 ADCSRA |=(1<<1);
	 ADCSRA &=~(1<<0);
	 Local_enuErrorState=ES_OK;
#elif ADC_PRES==PRES_128
	 ADCSRA |=(1<<2);
    2df0:	a6 e2       	ldi	r26, 0x26	; 38
    2df2:	b0 e0       	ldi	r27, 0x00	; 0
    2df4:	e6 e2       	ldi	r30, 0x26	; 38
    2df6:	f0 e0       	ldi	r31, 0x00	; 0
    2df8:	80 81       	ld	r24, Z
    2dfa:	84 60       	ori	r24, 0x04	; 4
    2dfc:	8c 93       	st	X, r24
	 ADCSRA |=(1<<1);
    2dfe:	a6 e2       	ldi	r26, 0x26	; 38
    2e00:	b0 e0       	ldi	r27, 0x00	; 0
    2e02:	e6 e2       	ldi	r30, 0x26	; 38
    2e04:	f0 e0       	ldi	r31, 0x00	; 0
    2e06:	80 81       	ld	r24, Z
    2e08:	82 60       	ori	r24, 0x02	; 2
    2e0a:	8c 93       	st	X, r24
	 ADCSRA |=(1<<0);
    2e0c:	a6 e2       	ldi	r26, 0x26	; 38
    2e0e:	b0 e0       	ldi	r27, 0x00	; 0
    2e10:	e6 e2       	ldi	r30, 0x26	; 38
    2e12:	f0 e0       	ldi	r31, 0x00	; 0
    2e14:	80 81       	ld	r24, Z
    2e16:	81 60       	ori	r24, 0x01	; 1
    2e18:	8c 93       	st	X, r24
	 Local_enuErrorState=ES_OK;
    2e1a:	81 e0       	ldi	r24, 0x01	; 1
    2e1c:	89 83       	std	Y+1, r24	; 0x01
#if ADC_REF_VOLT==AREF_REF
	 ADMUX &=~(1<<7);
	 ADMUX &=~(1<<6);
	 Local_enuErrorState=ES_OK;
#elif ADC_REF_VOLT==AVCC_REF
	 ADMUX &=~(1<<7);
    2e1e:	a7 e2       	ldi	r26, 0x27	; 39
    2e20:	b0 e0       	ldi	r27, 0x00	; 0
    2e22:	e7 e2       	ldi	r30, 0x27	; 39
    2e24:	f0 e0       	ldi	r31, 0x00	; 0
    2e26:	80 81       	ld	r24, Z
    2e28:	8f 77       	andi	r24, 0x7F	; 127
    2e2a:	8c 93       	st	X, r24
	 ADMUX |=(1<<6);
    2e2c:	a7 e2       	ldi	r26, 0x27	; 39
    2e2e:	b0 e0       	ldi	r27, 0x00	; 0
    2e30:	e7 e2       	ldi	r30, 0x27	; 39
    2e32:	f0 e0       	ldi	r31, 0x00	; 0
    2e34:	80 81       	ld	r24, Z
    2e36:	80 64       	ori	r24, 0x40	; 64
    2e38:	8c 93       	st	X, r24
	 Local_enuErrorState=ES_OK;
    2e3a:	81 e0       	ldi	r24, 0x01	; 1
    2e3c:	89 83       	std	Y+1, r24	; 0x01
	 //ADJUSTEMENT
#if ADC_ADJ==RIGHT_ADJ
	 ADMUX &=~(1<<5);
	 Local_enuErrorState=ES_OK;
#elif ADC_ADJ==LEFT_ADJ
	 ADMUX |=(1<<5);
    2e3e:	a7 e2       	ldi	r26, 0x27	; 39
    2e40:	b0 e0       	ldi	r27, 0x00	; 0
    2e42:	e7 e2       	ldi	r30, 0x27	; 39
    2e44:	f0 e0       	ldi	r31, 0x00	; 0
    2e46:	80 81       	ld	r24, Z
    2e48:	80 62       	ori	r24, 0x20	; 32
    2e4a:	8c 93       	st	X, r24
	 Local_enuErrorState=ES_OK;
    2e4c:	81 e0       	ldi	r24, 0x01	; 1
    2e4e:	89 83       	std	Y+1, r24	; 0x01
	 Local_enuErrorState=ES_OUT_OF_RANGE;
#error"your ADC_ADJ has a wrong selection"
#endif


	 return Local_enuErrorState;
    2e50:	89 81       	ldd	r24, Y+1	; 0x01
}
    2e52:	0f 90       	pop	r0
    2e54:	cf 91       	pop	r28
    2e56:	df 91       	pop	r29
    2e58:	08 95       	ret

00002e5a <ADC_enuStartConversion>:

ES_t ADC_enuStartConversion(void)
{
    2e5a:	df 93       	push	r29
    2e5c:	cf 93       	push	r28
    2e5e:	0f 92       	push	r0
    2e60:	cd b7       	in	r28, 0x3d	; 61
    2e62:	de b7       	in	r29, 0x3e	; 62
	 ES_t Local_enuErrorState=ES_NOK;
    2e64:	19 82       	std	Y+1, r1	; 0x01

	 ADCSRA |=(1<<6);
    2e66:	a6 e2       	ldi	r26, 0x26	; 38
    2e68:	b0 e0       	ldi	r27, 0x00	; 0
    2e6a:	e6 e2       	ldi	r30, 0x26	; 38
    2e6c:	f0 e0       	ldi	r31, 0x00	; 0
    2e6e:	80 81       	ld	r24, Z
    2e70:	80 64       	ori	r24, 0x40	; 64
    2e72:	8c 93       	st	X, r24
	 Local_enuErrorState=ES_OK;
    2e74:	81 e0       	ldi	r24, 0x01	; 1
    2e76:	89 83       	std	Y+1, r24	; 0x01

	 return Local_enuErrorState;
    2e78:	89 81       	ldd	r24, Y+1	; 0x01
}
    2e7a:	0f 90       	pop	r0
    2e7c:	cf 91       	pop	r28
    2e7e:	df 91       	pop	r29
    2e80:	08 95       	ret

00002e82 <ADC_enuPollingSystem>:

ES_t ADC_enuPollingSystem(void)
{
    2e82:	df 93       	push	r29
    2e84:	cf 93       	push	r28
    2e86:	0f 92       	push	r0
    2e88:	cd b7       	in	r28, 0x3d	; 61
    2e8a:	de b7       	in	r29, 0x3e	; 62
	 ES_t Local_enuErrorState=ES_NOK;
    2e8c:	19 82       	std	Y+1, r1	; 0x01

	 while(((ADCSRA >>4)&1)==0); //WAIT FOR FLAG (ADIF)
    2e8e:	e6 e2       	ldi	r30, 0x26	; 38
    2e90:	f0 e0       	ldi	r31, 0x00	; 0
    2e92:	80 81       	ld	r24, Z
    2e94:	82 95       	swap	r24
    2e96:	8f 70       	andi	r24, 0x0F	; 15
    2e98:	88 2f       	mov	r24, r24
    2e9a:	90 e0       	ldi	r25, 0x00	; 0
    2e9c:	81 70       	andi	r24, 0x01	; 1
    2e9e:	90 70       	andi	r25, 0x00	; 0
    2ea0:	00 97       	sbiw	r24, 0x00	; 0
    2ea2:	a9 f3       	breq	.-22     	; 0x2e8e <ADC_enuPollingSystem+0xc>
	 ADCSRA |=(1<<4);   //CLEAR FLAG
    2ea4:	a6 e2       	ldi	r26, 0x26	; 38
    2ea6:	b0 e0       	ldi	r27, 0x00	; 0
    2ea8:	e6 e2       	ldi	r30, 0x26	; 38
    2eaa:	f0 e0       	ldi	r31, 0x00	; 0
    2eac:	80 81       	ld	r24, Z
    2eae:	80 61       	ori	r24, 0x10	; 16
    2eb0:	8c 93       	st	X, r24
	 Local_enuErrorState=ES_OK;
    2eb2:	81 e0       	ldi	r24, 0x01	; 1
    2eb4:	89 83       	std	Y+1, r24	; 0x01

	 return Local_enuErrorState;
    2eb6:	89 81       	ldd	r24, Y+1	; 0x01
}
    2eb8:	0f 90       	pop	r0
    2eba:	cf 91       	pop	r28
    2ebc:	df 91       	pop	r29
    2ebe:	08 95       	ret

00002ec0 <ADC_enuReadHighValue>:

ES_t ADC_enuReadHighValue(u8 *Copy_pu8Value)
{
    2ec0:	df 93       	push	r29
    2ec2:	cf 93       	push	r28
    2ec4:	00 d0       	rcall	.+0      	; 0x2ec6 <ADC_enuReadHighValue+0x6>
    2ec6:	0f 92       	push	r0
    2ec8:	cd b7       	in	r28, 0x3d	; 61
    2eca:	de b7       	in	r29, 0x3e	; 62
    2ecc:	9b 83       	std	Y+3, r25	; 0x03
    2ece:	8a 83       	std	Y+2, r24	; 0x02
	 ES_t Local_enuErrorState=ES_NOK;
    2ed0:	19 82       	std	Y+1, r1	; 0x01
#if ADC_ADJ==RIGHT_ADJ
	 *Copy_pu8Value =(ADCL >>2);
	 *Copy_pu8Value |=(ADCH <<6);
	 Local_enuErrorState=ES_OK;
#elif ADC_ADJ==LEFT_ADJ
	 *Copy_pu8Value =ADCH;
    2ed2:	e5 e2       	ldi	r30, 0x25	; 37
    2ed4:	f0 e0       	ldi	r31, 0x00	; 0
    2ed6:	80 81       	ld	r24, Z
    2ed8:	ea 81       	ldd	r30, Y+2	; 0x02
    2eda:	fb 81       	ldd	r31, Y+3	; 0x03
    2edc:	80 83       	st	Z, r24
	 Local_enuErrorState=ES_OK;
    2ede:	81 e0       	ldi	r24, 0x01	; 1
    2ee0:	89 83       	std	Y+1, r24	; 0x01
#else
	 Local_enuErrorState=ES_OUT_OF_RANGE;
#error"your ADC_ADJ has a wrong selection"
#endif

	 return Local_enuErrorState;
    2ee2:	89 81       	ldd	r24, Y+1	; 0x01
}
    2ee4:	0f 90       	pop	r0
    2ee6:	0f 90       	pop	r0
    2ee8:	0f 90       	pop	r0
    2eea:	cf 91       	pop	r28
    2eec:	df 91       	pop	r29
    2eee:	08 95       	ret

00002ef0 <ADC_enuRead>:

ES_t ADC_enuRead(u16 *Copy_pu16Value)
{
    2ef0:	df 93       	push	r29
    2ef2:	cf 93       	push	r28
    2ef4:	00 d0       	rcall	.+0      	; 0x2ef6 <ADC_enuRead+0x6>
    2ef6:	0f 92       	push	r0
    2ef8:	cd b7       	in	r28, 0x3d	; 61
    2efa:	de b7       	in	r29, 0x3e	; 62
    2efc:	9b 83       	std	Y+3, r25	; 0x03
    2efe:	8a 83       	std	Y+2, r24	; 0x02
	 ES_t Local_enuErrorState=ES_NOK;
    2f00:	19 82       	std	Y+1, r1	; 0x01
#if ADC_ADJ==RIGHT_ADJ
	 *Copy_pu16Value =ADCL;
	 *Copy_pu16Value |=((u16)ADCH <<8);
	 Local_enuErrorState=ES_OK;
#elif ADC_ADJ==LEFT_ADJ
	 *Copy_pu16Value =(ADCL>>6);
    2f02:	e4 e2       	ldi	r30, 0x24	; 36
    2f04:	f0 e0       	ldi	r31, 0x00	; 0
    2f06:	80 81       	ld	r24, Z
    2f08:	82 95       	swap	r24
    2f0a:	86 95       	lsr	r24
    2f0c:	86 95       	lsr	r24
    2f0e:	83 70       	andi	r24, 0x03	; 3
    2f10:	88 2f       	mov	r24, r24
    2f12:	90 e0       	ldi	r25, 0x00	; 0
    2f14:	ea 81       	ldd	r30, Y+2	; 0x02
    2f16:	fb 81       	ldd	r31, Y+3	; 0x03
    2f18:	91 83       	std	Z+1, r25	; 0x01
    2f1a:	80 83       	st	Z, r24
	 *Copy_pu16Value |=(ADCH<<2); ///
    2f1c:	ea 81       	ldd	r30, Y+2	; 0x02
    2f1e:	fb 81       	ldd	r31, Y+3	; 0x03
    2f20:	20 81       	ld	r18, Z
    2f22:	31 81       	ldd	r19, Z+1	; 0x01
    2f24:	e5 e2       	ldi	r30, 0x25	; 37
    2f26:	f0 e0       	ldi	r31, 0x00	; 0
    2f28:	80 81       	ld	r24, Z
    2f2a:	88 2f       	mov	r24, r24
    2f2c:	90 e0       	ldi	r25, 0x00	; 0
    2f2e:	88 0f       	add	r24, r24
    2f30:	99 1f       	adc	r25, r25
    2f32:	88 0f       	add	r24, r24
    2f34:	99 1f       	adc	r25, r25
    2f36:	82 2b       	or	r24, r18
    2f38:	93 2b       	or	r25, r19
    2f3a:	ea 81       	ldd	r30, Y+2	; 0x02
    2f3c:	fb 81       	ldd	r31, Y+3	; 0x03
    2f3e:	91 83       	std	Z+1, r25	; 0x01
    2f40:	80 83       	st	Z, r24
	 Local_enuErrorState=ES_OK;
    2f42:	81 e0       	ldi	r24, 0x01	; 1
    2f44:	89 83       	std	Y+1, r24	; 0x01
#else
	 Local_enuErrorState=ES_OUT_OF_RANGE;
#error"your ADC_ADJ has a wrong selection"
#endif

	 return Local_enuErrorState;
    2f46:	89 81       	ldd	r24, Y+1	; 0x01
}
    2f48:	0f 90       	pop	r0
    2f4a:	0f 90       	pop	r0
    2f4c:	0f 90       	pop	r0
    2f4e:	cf 91       	pop	r28
    2f50:	df 91       	pop	r29
    2f52:	08 95       	ret

00002f54 <ADC_enuCallBack>:

ES_t ADC_enuCallBack(void(Copy_pfunAppFun)(void*),void *Copy_pvidAppParameter)
{
    2f54:	df 93       	push	r29
    2f56:	cf 93       	push	r28
    2f58:	00 d0       	rcall	.+0      	; 0x2f5a <ADC_enuCallBack+0x6>
    2f5a:	00 d0       	rcall	.+0      	; 0x2f5c <ADC_enuCallBack+0x8>
    2f5c:	0f 92       	push	r0
    2f5e:	cd b7       	in	r28, 0x3d	; 61
    2f60:	de b7       	in	r29, 0x3e	; 62
    2f62:	9b 83       	std	Y+3, r25	; 0x03
    2f64:	8a 83       	std	Y+2, r24	; 0x02
    2f66:	7d 83       	std	Y+5, r23	; 0x05
    2f68:	6c 83       	std	Y+4, r22	; 0x04
	 ES_t Local_enuErrorState=ES_NOK;
    2f6a:	19 82       	std	Y+1, r1	; 0x01

	 if(Copy_pfunAppFun!=NULL)
    2f6c:	8a 81       	ldd	r24, Y+2	; 0x02
    2f6e:	9b 81       	ldd	r25, Y+3	; 0x03
    2f70:	00 97       	sbiw	r24, 0x00	; 0
    2f72:	79 f0       	breq	.+30     	; 0x2f92 <ADC_enuCallBack+0x3e>
	 {
		 ADC_pfunISRFun=Copy_pfunAppFun;
    2f74:	8a 81       	ldd	r24, Y+2	; 0x02
    2f76:	9b 81       	ldd	r25, Y+3	; 0x03
    2f78:	90 93 d5 01 	sts	0x01D5, r25
    2f7c:	80 93 d4 01 	sts	0x01D4, r24
		 ADC_pvidISRParameter=Copy_pvidAppParameter;
    2f80:	8c 81       	ldd	r24, Y+4	; 0x04
    2f82:	9d 81       	ldd	r25, Y+5	; 0x05
    2f84:	90 93 d7 01 	sts	0x01D7, r25
    2f88:	80 93 d6 01 	sts	0x01D6, r24
		 Local_enuErrorState=ES_OK;
    2f8c:	81 e0       	ldi	r24, 0x01	; 1
    2f8e:	89 83       	std	Y+1, r24	; 0x01
    2f90:	02 c0       	rjmp	.+4      	; 0x2f96 <ADC_enuCallBack+0x42>
	 }
	 else
	 {
		 Local_enuErrorState=ES_NULL_POINTER;
    2f92:	82 e0       	ldi	r24, 0x02	; 2
    2f94:	89 83       	std	Y+1, r24	; 0x01
	 }

	 return Local_enuErrorState;
    2f96:	89 81       	ldd	r24, Y+1	; 0x01
}
    2f98:	0f 90       	pop	r0
    2f9a:	0f 90       	pop	r0
    2f9c:	0f 90       	pop	r0
    2f9e:	0f 90       	pop	r0
    2fa0:	0f 90       	pop	r0
    2fa2:	cf 91       	pop	r28
    2fa4:	df 91       	pop	r29
    2fa6:	08 95       	ret

00002fa8 <ADC_enuSelectChannel>:

ES_t ADC_enuSelectChannel(u8 Copy_u8ChannelID)
{
    2fa8:	df 93       	push	r29
    2faa:	cf 93       	push	r28
    2fac:	00 d0       	rcall	.+0      	; 0x2fae <ADC_enuSelectChannel+0x6>
    2fae:	cd b7       	in	r28, 0x3d	; 61
    2fb0:	de b7       	in	r29, 0x3e	; 62
    2fb2:	8a 83       	std	Y+2, r24	; 0x02
	 ES_t Local_enuErrorState=ES_NOK;
    2fb4:	19 82       	std	Y+1, r1	; 0x01

	 if(Copy_u8ChannelID<32)
    2fb6:	8a 81       	ldd	r24, Y+2	; 0x02
    2fb8:	80 32       	cpi	r24, 0x20	; 32
    2fba:	90 f4       	brcc	.+36     	; 0x2fe0 <ADC_enuSelectChannel+0x38>
	 {
		 ADMUX &=~ 0x1F;  //clear bits 4 3 2 1 0 >> 0b00011111 ~ 0b11100000
    2fbc:	a7 e2       	ldi	r26, 0x27	; 39
    2fbe:	b0 e0       	ldi	r27, 0x00	; 0
    2fc0:	e7 e2       	ldi	r30, 0x27	; 39
    2fc2:	f0 e0       	ldi	r31, 0x00	; 0
    2fc4:	80 81       	ld	r24, Z
    2fc6:	80 7e       	andi	r24, 0xE0	; 224
    2fc8:	8c 93       	st	X, r24
		 ADMUX |=Copy_u8ChannelID;
    2fca:	a7 e2       	ldi	r26, 0x27	; 39
    2fcc:	b0 e0       	ldi	r27, 0x00	; 0
    2fce:	e7 e2       	ldi	r30, 0x27	; 39
    2fd0:	f0 e0       	ldi	r31, 0x00	; 0
    2fd2:	90 81       	ld	r25, Z
    2fd4:	8a 81       	ldd	r24, Y+2	; 0x02
    2fd6:	89 2b       	or	r24, r25
    2fd8:	8c 93       	st	X, r24
		 Local_enuErrorState=ES_OK;
    2fda:	81 e0       	ldi	r24, 0x01	; 1
    2fdc:	89 83       	std	Y+1, r24	; 0x01
    2fde:	02 c0       	rjmp	.+4      	; 0x2fe4 <ADC_enuSelectChannel+0x3c>
	 }
	 else
	 {
		 Local_enuErrorState=ES_OUT_OF_RANGE;
    2fe0:	83 e0       	ldi	r24, 0x03	; 3
    2fe2:	89 83       	std	Y+1, r24	; 0x01
	 }

	 return Local_enuErrorState;
    2fe4:	89 81       	ldd	r24, Y+1	; 0x01
}
    2fe6:	0f 90       	pop	r0
    2fe8:	0f 90       	pop	r0
    2fea:	cf 91       	pop	r28
    2fec:	df 91       	pop	r29
    2fee:	08 95       	ret

00002ff0 <ADC_enuEnableTriggeringMode>:

ES_t ADC_enuEnableTriggeringMode(u8 Copy_u8TriggeringSource)
{
    2ff0:	df 93       	push	r29
    2ff2:	cf 93       	push	r28
    2ff4:	00 d0       	rcall	.+0      	; 0x2ff6 <ADC_enuEnableTriggeringMode+0x6>
    2ff6:	00 d0       	rcall	.+0      	; 0x2ff8 <ADC_enuEnableTriggeringMode+0x8>
    2ff8:	cd b7       	in	r28, 0x3d	; 61
    2ffa:	de b7       	in	r29, 0x3e	; 62
    2ffc:	8a 83       	std	Y+2, r24	; 0x02
	 ES_t Local_enuErrorState=ES_NOK;
    2ffe:	19 82       	std	Y+1, r1	; 0x01

	 ADCSRA &=~(1<<5); //CLOSE AUTO_TRIGEERING TO SELECT TRIGGER SOURCE
    3000:	a6 e2       	ldi	r26, 0x26	; 38
    3002:	b0 e0       	ldi	r27, 0x00	; 0
    3004:	e6 e2       	ldi	r30, 0x26	; 38
    3006:	f0 e0       	ldi	r31, 0x00	; 0
    3008:	80 81       	ld	r24, Z
    300a:	8f 7d       	andi	r24, 0xDF	; 223
    300c:	8c 93       	st	X, r24

	 switch(Copy_u8TriggeringSource)
    300e:	8a 81       	ldd	r24, Y+2	; 0x02
    3010:	28 2f       	mov	r18, r24
    3012:	30 e0       	ldi	r19, 0x00	; 0
    3014:	3c 83       	std	Y+4, r19	; 0x04
    3016:	2b 83       	std	Y+3, r18	; 0x03
    3018:	8b 81       	ldd	r24, Y+3	; 0x03
    301a:	9c 81       	ldd	r25, Y+4	; 0x04
    301c:	84 30       	cpi	r24, 0x04	; 4
    301e:	91 05       	cpc	r25, r1
    3020:	09 f4       	brne	.+2      	; 0x3024 <ADC_enuEnableTriggeringMode+0x34>
    3022:	77 c0       	rjmp	.+238    	; 0x3112 <ADC_enuEnableTriggeringMode+0x122>
    3024:	2b 81       	ldd	r18, Y+3	; 0x03
    3026:	3c 81       	ldd	r19, Y+4	; 0x04
    3028:	25 30       	cpi	r18, 0x05	; 5
    302a:	31 05       	cpc	r19, r1
    302c:	8c f4       	brge	.+34     	; 0x3050 <ADC_enuEnableTriggeringMode+0x60>
    302e:	8b 81       	ldd	r24, Y+3	; 0x03
    3030:	9c 81       	ldd	r25, Y+4	; 0x04
    3032:	82 30       	cpi	r24, 0x02	; 2
    3034:	91 05       	cpc	r25, r1
    3036:	e9 f1       	breq	.+122    	; 0x30b2 <ADC_enuEnableTriggeringMode+0xc2>
    3038:	2b 81       	ldd	r18, Y+3	; 0x03
    303a:	3c 81       	ldd	r19, Y+4	; 0x04
    303c:	23 30       	cpi	r18, 0x03	; 3
    303e:	31 05       	cpc	r19, r1
    3040:	0c f0       	brlt	.+2      	; 0x3044 <ADC_enuEnableTriggeringMode+0x54>
    3042:	4f c0       	rjmp	.+158    	; 0x30e2 <ADC_enuEnableTriggeringMode+0xf2>
    3044:	8b 81       	ldd	r24, Y+3	; 0x03
    3046:	9c 81       	ldd	r25, Y+4	; 0x04
    3048:	81 30       	cpi	r24, 0x01	; 1
    304a:	91 05       	cpc	r25, r1
    304c:	d1 f0       	breq	.+52     	; 0x3082 <ADC_enuEnableTriggeringMode+0x92>
    304e:	d9 c0       	rjmp	.+434    	; 0x3202 <ADC_enuEnableTriggeringMode+0x212>
    3050:	2b 81       	ldd	r18, Y+3	; 0x03
    3052:	3c 81       	ldd	r19, Y+4	; 0x04
    3054:	26 30       	cpi	r18, 0x06	; 6
    3056:	31 05       	cpc	r19, r1
    3058:	09 f4       	brne	.+2      	; 0x305c <ADC_enuEnableTriggeringMode+0x6c>
    305a:	8b c0       	rjmp	.+278    	; 0x3172 <ADC_enuEnableTriggeringMode+0x182>
    305c:	8b 81       	ldd	r24, Y+3	; 0x03
    305e:	9c 81       	ldd	r25, Y+4	; 0x04
    3060:	86 30       	cpi	r24, 0x06	; 6
    3062:	91 05       	cpc	r25, r1
    3064:	0c f4       	brge	.+2      	; 0x3068 <ADC_enuEnableTriggeringMode+0x78>
    3066:	6d c0       	rjmp	.+218    	; 0x3142 <ADC_enuEnableTriggeringMode+0x152>
    3068:	2b 81       	ldd	r18, Y+3	; 0x03
    306a:	3c 81       	ldd	r19, Y+4	; 0x04
    306c:	27 30       	cpi	r18, 0x07	; 7
    306e:	31 05       	cpc	r19, r1
    3070:	09 f4       	brne	.+2      	; 0x3074 <ADC_enuEnableTriggeringMode+0x84>
    3072:	97 c0       	rjmp	.+302    	; 0x31a2 <ADC_enuEnableTriggeringMode+0x1b2>
    3074:	8b 81       	ldd	r24, Y+3	; 0x03
    3076:	9c 81       	ldd	r25, Y+4	; 0x04
    3078:	88 30       	cpi	r24, 0x08	; 8
    307a:	91 05       	cpc	r25, r1
    307c:	09 f4       	brne	.+2      	; 0x3080 <ADC_enuEnableTriggeringMode+0x90>
    307e:	a9 c0       	rjmp	.+338    	; 0x31d2 <ADC_enuEnableTriggeringMode+0x1e2>
    3080:	c0 c0       	rjmp	.+384    	; 0x3202 <ADC_enuEnableTriggeringMode+0x212>
	 {
	 case FREE_RUNNING:
		 SFIOR &=~(1<<7);
    3082:	a0 e5       	ldi	r26, 0x50	; 80
    3084:	b0 e0       	ldi	r27, 0x00	; 0
    3086:	e0 e5       	ldi	r30, 0x50	; 80
    3088:	f0 e0       	ldi	r31, 0x00	; 0
    308a:	80 81       	ld	r24, Z
    308c:	8f 77       	andi	r24, 0x7F	; 127
    308e:	8c 93       	st	X, r24
		 SFIOR &=~(1<<6);
    3090:	a0 e5       	ldi	r26, 0x50	; 80
    3092:	b0 e0       	ldi	r27, 0x00	; 0
    3094:	e0 e5       	ldi	r30, 0x50	; 80
    3096:	f0 e0       	ldi	r31, 0x00	; 0
    3098:	80 81       	ld	r24, Z
    309a:	8f 7b       	andi	r24, 0xBF	; 191
    309c:	8c 93       	st	X, r24
		 SFIOR &=~(1<<5);
    309e:	a0 e5       	ldi	r26, 0x50	; 80
    30a0:	b0 e0       	ldi	r27, 0x00	; 0
    30a2:	e0 e5       	ldi	r30, 0x50	; 80
    30a4:	f0 e0       	ldi	r31, 0x00	; 0
    30a6:	80 81       	ld	r24, Z
    30a8:	8f 7d       	andi	r24, 0xDF	; 223
    30aa:	8c 93       	st	X, r24
		 Local_enuErrorState=ES_OK;
    30ac:	81 e0       	ldi	r24, 0x01	; 1
    30ae:	89 83       	std	Y+1, r24	; 0x01
    30b0:	aa c0       	rjmp	.+340    	; 0x3206 <ADC_enuEnableTriggeringMode+0x216>
		 break;
	 case ANALOG_COMPARATOR:
		 SFIOR &=~(1<<7);
    30b2:	a0 e5       	ldi	r26, 0x50	; 80
    30b4:	b0 e0       	ldi	r27, 0x00	; 0
    30b6:	e0 e5       	ldi	r30, 0x50	; 80
    30b8:	f0 e0       	ldi	r31, 0x00	; 0
    30ba:	80 81       	ld	r24, Z
    30bc:	8f 77       	andi	r24, 0x7F	; 127
    30be:	8c 93       	st	X, r24
		 SFIOR &=~(1<<6);
    30c0:	a0 e5       	ldi	r26, 0x50	; 80
    30c2:	b0 e0       	ldi	r27, 0x00	; 0
    30c4:	e0 e5       	ldi	r30, 0x50	; 80
    30c6:	f0 e0       	ldi	r31, 0x00	; 0
    30c8:	80 81       	ld	r24, Z
    30ca:	8f 7b       	andi	r24, 0xBF	; 191
    30cc:	8c 93       	st	X, r24
		 SFIOR |=(1<<5);
    30ce:	a0 e5       	ldi	r26, 0x50	; 80
    30d0:	b0 e0       	ldi	r27, 0x00	; 0
    30d2:	e0 e5       	ldi	r30, 0x50	; 80
    30d4:	f0 e0       	ldi	r31, 0x00	; 0
    30d6:	80 81       	ld	r24, Z
    30d8:	80 62       	ori	r24, 0x20	; 32
    30da:	8c 93       	st	X, r24
		 Local_enuErrorState=ES_OK;
    30dc:	81 e0       	ldi	r24, 0x01	; 1
    30de:	89 83       	std	Y+1, r24	; 0x01
    30e0:	92 c0       	rjmp	.+292    	; 0x3206 <ADC_enuEnableTriggeringMode+0x216>
		 break;
	 case EXT_INT0_REQ:
		 SFIOR &=~(1<<7);
    30e2:	a0 e5       	ldi	r26, 0x50	; 80
    30e4:	b0 e0       	ldi	r27, 0x00	; 0
    30e6:	e0 e5       	ldi	r30, 0x50	; 80
    30e8:	f0 e0       	ldi	r31, 0x00	; 0
    30ea:	80 81       	ld	r24, Z
    30ec:	8f 77       	andi	r24, 0x7F	; 127
    30ee:	8c 93       	st	X, r24
		 SFIOR |=(1<<6);
    30f0:	a0 e5       	ldi	r26, 0x50	; 80
    30f2:	b0 e0       	ldi	r27, 0x00	; 0
    30f4:	e0 e5       	ldi	r30, 0x50	; 80
    30f6:	f0 e0       	ldi	r31, 0x00	; 0
    30f8:	80 81       	ld	r24, Z
    30fa:	80 64       	ori	r24, 0x40	; 64
    30fc:	8c 93       	st	X, r24
		 SFIOR &=~(1<<5);
    30fe:	a0 e5       	ldi	r26, 0x50	; 80
    3100:	b0 e0       	ldi	r27, 0x00	; 0
    3102:	e0 e5       	ldi	r30, 0x50	; 80
    3104:	f0 e0       	ldi	r31, 0x00	; 0
    3106:	80 81       	ld	r24, Z
    3108:	8f 7d       	andi	r24, 0xDF	; 223
    310a:	8c 93       	st	X, r24
		 Local_enuErrorState=ES_OK;
    310c:	81 e0       	ldi	r24, 0x01	; 1
    310e:	89 83       	std	Y+1, r24	; 0x01
    3110:	7a c0       	rjmp	.+244    	; 0x3206 <ADC_enuEnableTriggeringMode+0x216>
		 break;
	 case TIM_COUNT_0_COMPARE_MATCH:
		 SFIOR &=~(1<<7);
    3112:	a0 e5       	ldi	r26, 0x50	; 80
    3114:	b0 e0       	ldi	r27, 0x00	; 0
    3116:	e0 e5       	ldi	r30, 0x50	; 80
    3118:	f0 e0       	ldi	r31, 0x00	; 0
    311a:	80 81       	ld	r24, Z
    311c:	8f 77       	andi	r24, 0x7F	; 127
    311e:	8c 93       	st	X, r24
		 SFIOR |=(1<<6);
    3120:	a0 e5       	ldi	r26, 0x50	; 80
    3122:	b0 e0       	ldi	r27, 0x00	; 0
    3124:	e0 e5       	ldi	r30, 0x50	; 80
    3126:	f0 e0       	ldi	r31, 0x00	; 0
    3128:	80 81       	ld	r24, Z
    312a:	80 64       	ori	r24, 0x40	; 64
    312c:	8c 93       	st	X, r24
		 SFIOR |=(1<<5);
    312e:	a0 e5       	ldi	r26, 0x50	; 80
    3130:	b0 e0       	ldi	r27, 0x00	; 0
    3132:	e0 e5       	ldi	r30, 0x50	; 80
    3134:	f0 e0       	ldi	r31, 0x00	; 0
    3136:	80 81       	ld	r24, Z
    3138:	80 62       	ori	r24, 0x20	; 32
    313a:	8c 93       	st	X, r24
		 Local_enuErrorState=ES_OK;
    313c:	81 e0       	ldi	r24, 0x01	; 1
    313e:	89 83       	std	Y+1, r24	; 0x01
    3140:	62 c0       	rjmp	.+196    	; 0x3206 <ADC_enuEnableTriggeringMode+0x216>
		 break;
	 case TIM_COUNT_0_OVERFLOW:
		 SFIOR |=(1<<7);
    3142:	a0 e5       	ldi	r26, 0x50	; 80
    3144:	b0 e0       	ldi	r27, 0x00	; 0
    3146:	e0 e5       	ldi	r30, 0x50	; 80
    3148:	f0 e0       	ldi	r31, 0x00	; 0
    314a:	80 81       	ld	r24, Z
    314c:	80 68       	ori	r24, 0x80	; 128
    314e:	8c 93       	st	X, r24
		 SFIOR &=~(1<<6);
    3150:	a0 e5       	ldi	r26, 0x50	; 80
    3152:	b0 e0       	ldi	r27, 0x00	; 0
    3154:	e0 e5       	ldi	r30, 0x50	; 80
    3156:	f0 e0       	ldi	r31, 0x00	; 0
    3158:	80 81       	ld	r24, Z
    315a:	8f 7b       	andi	r24, 0xBF	; 191
    315c:	8c 93       	st	X, r24
		 SFIOR &=~(1<<5);
    315e:	a0 e5       	ldi	r26, 0x50	; 80
    3160:	b0 e0       	ldi	r27, 0x00	; 0
    3162:	e0 e5       	ldi	r30, 0x50	; 80
    3164:	f0 e0       	ldi	r31, 0x00	; 0
    3166:	80 81       	ld	r24, Z
    3168:	8f 7d       	andi	r24, 0xDF	; 223
    316a:	8c 93       	st	X, r24
		 Local_enuErrorState=ES_OK;
    316c:	81 e0       	ldi	r24, 0x01	; 1
    316e:	89 83       	std	Y+1, r24	; 0x01
    3170:	4a c0       	rjmp	.+148    	; 0x3206 <ADC_enuEnableTriggeringMode+0x216>
		 break;
	 case TIM_COUNT_1_COMPARE_MATCH:
		 SFIOR |=(1<<7);
    3172:	a0 e5       	ldi	r26, 0x50	; 80
    3174:	b0 e0       	ldi	r27, 0x00	; 0
    3176:	e0 e5       	ldi	r30, 0x50	; 80
    3178:	f0 e0       	ldi	r31, 0x00	; 0
    317a:	80 81       	ld	r24, Z
    317c:	80 68       	ori	r24, 0x80	; 128
    317e:	8c 93       	st	X, r24
		 SFIOR &=~(1<<6);
    3180:	a0 e5       	ldi	r26, 0x50	; 80
    3182:	b0 e0       	ldi	r27, 0x00	; 0
    3184:	e0 e5       	ldi	r30, 0x50	; 80
    3186:	f0 e0       	ldi	r31, 0x00	; 0
    3188:	80 81       	ld	r24, Z
    318a:	8f 7b       	andi	r24, 0xBF	; 191
    318c:	8c 93       	st	X, r24
		 SFIOR |=(1<<5);
    318e:	a0 e5       	ldi	r26, 0x50	; 80
    3190:	b0 e0       	ldi	r27, 0x00	; 0
    3192:	e0 e5       	ldi	r30, 0x50	; 80
    3194:	f0 e0       	ldi	r31, 0x00	; 0
    3196:	80 81       	ld	r24, Z
    3198:	80 62       	ori	r24, 0x20	; 32
    319a:	8c 93       	st	X, r24
		 Local_enuErrorState=ES_OK;
    319c:	81 e0       	ldi	r24, 0x01	; 1
    319e:	89 83       	std	Y+1, r24	; 0x01
    31a0:	32 c0       	rjmp	.+100    	; 0x3206 <ADC_enuEnableTriggeringMode+0x216>
		 break;
	 case TIM_COUNT_1_OVERFLOW:
		 SFIOR |=(1<<7);
    31a2:	a0 e5       	ldi	r26, 0x50	; 80
    31a4:	b0 e0       	ldi	r27, 0x00	; 0
    31a6:	e0 e5       	ldi	r30, 0x50	; 80
    31a8:	f0 e0       	ldi	r31, 0x00	; 0
    31aa:	80 81       	ld	r24, Z
    31ac:	80 68       	ori	r24, 0x80	; 128
    31ae:	8c 93       	st	X, r24
		 SFIOR |=(1<<6);
    31b0:	a0 e5       	ldi	r26, 0x50	; 80
    31b2:	b0 e0       	ldi	r27, 0x00	; 0
    31b4:	e0 e5       	ldi	r30, 0x50	; 80
    31b6:	f0 e0       	ldi	r31, 0x00	; 0
    31b8:	80 81       	ld	r24, Z
    31ba:	80 64       	ori	r24, 0x40	; 64
    31bc:	8c 93       	st	X, r24
		 SFIOR &=~(1<<5);
    31be:	a0 e5       	ldi	r26, 0x50	; 80
    31c0:	b0 e0       	ldi	r27, 0x00	; 0
    31c2:	e0 e5       	ldi	r30, 0x50	; 80
    31c4:	f0 e0       	ldi	r31, 0x00	; 0
    31c6:	80 81       	ld	r24, Z
    31c8:	8f 7d       	andi	r24, 0xDF	; 223
    31ca:	8c 93       	st	X, r24
		 Local_enuErrorState=ES_OK;
    31cc:	81 e0       	ldi	r24, 0x01	; 1
    31ce:	89 83       	std	Y+1, r24	; 0x01
    31d0:	1a c0       	rjmp	.+52     	; 0x3206 <ADC_enuEnableTriggeringMode+0x216>
		 break;
	 case TIM_COUNT_1_CAP_EVENT:
		 SFIOR |=(1<<7);
    31d2:	a0 e5       	ldi	r26, 0x50	; 80
    31d4:	b0 e0       	ldi	r27, 0x00	; 0
    31d6:	e0 e5       	ldi	r30, 0x50	; 80
    31d8:	f0 e0       	ldi	r31, 0x00	; 0
    31da:	80 81       	ld	r24, Z
    31dc:	80 68       	ori	r24, 0x80	; 128
    31de:	8c 93       	st	X, r24
		 SFIOR |=(1<<6);
    31e0:	a0 e5       	ldi	r26, 0x50	; 80
    31e2:	b0 e0       	ldi	r27, 0x00	; 0
    31e4:	e0 e5       	ldi	r30, 0x50	; 80
    31e6:	f0 e0       	ldi	r31, 0x00	; 0
    31e8:	80 81       	ld	r24, Z
    31ea:	80 64       	ori	r24, 0x40	; 64
    31ec:	8c 93       	st	X, r24
		 SFIOR |=(1<<5);
    31ee:	a0 e5       	ldi	r26, 0x50	; 80
    31f0:	b0 e0       	ldi	r27, 0x00	; 0
    31f2:	e0 e5       	ldi	r30, 0x50	; 80
    31f4:	f0 e0       	ldi	r31, 0x00	; 0
    31f6:	80 81       	ld	r24, Z
    31f8:	80 62       	ori	r24, 0x20	; 32
    31fa:	8c 93       	st	X, r24
		 Local_enuErrorState=ES_OK;
    31fc:	81 e0       	ldi	r24, 0x01	; 1
    31fe:	89 83       	std	Y+1, r24	; 0x01
    3200:	02 c0       	rjmp	.+4      	; 0x3206 <ADC_enuEnableTriggeringMode+0x216>
		 break;
	 default:
		 Local_enuErrorState=ES_OUT_OF_RANGE;
    3202:	83 e0       	ldi	r24, 0x03	; 3
    3204:	89 83       	std	Y+1, r24	; 0x01
		 break;
	 }
	 ADCSRA |=(1<<5);
    3206:	a6 e2       	ldi	r26, 0x26	; 38
    3208:	b0 e0       	ldi	r27, 0x00	; 0
    320a:	e6 e2       	ldi	r30, 0x26	; 38
    320c:	f0 e0       	ldi	r31, 0x00	; 0
    320e:	80 81       	ld	r24, Z
    3210:	80 62       	ori	r24, 0x20	; 32
    3212:	8c 93       	st	X, r24

	 return Local_enuErrorState;
    3214:	89 81       	ldd	r24, Y+1	; 0x01
}
    3216:	0f 90       	pop	r0
    3218:	0f 90       	pop	r0
    321a:	0f 90       	pop	r0
    321c:	0f 90       	pop	r0
    321e:	cf 91       	pop	r28
    3220:	df 91       	pop	r29
    3222:	08 95       	ret

00003224 <ADC_enuDisableTriggeringMode>:

ES_t ADC_enuDisableTriggeringMode(void)
{
    3224:	df 93       	push	r29
    3226:	cf 93       	push	r28
    3228:	0f 92       	push	r0
    322a:	cd b7       	in	r28, 0x3d	; 61
    322c:	de b7       	in	r29, 0x3e	; 62
	 ES_t Local_enuErrorState=ES_NOK;
    322e:	19 82       	std	Y+1, r1	; 0x01

	 ADCSRA &=~(1<<5);
    3230:	a6 e2       	ldi	r26, 0x26	; 38
    3232:	b0 e0       	ldi	r27, 0x00	; 0
    3234:	e6 e2       	ldi	r30, 0x26	; 38
    3236:	f0 e0       	ldi	r31, 0x00	; 0
    3238:	80 81       	ld	r24, Z
    323a:	8f 7d       	andi	r24, 0xDF	; 223
    323c:	8c 93       	st	X, r24
	 Local_enuErrorState=ES_OK;
    323e:	81 e0       	ldi	r24, 0x01	; 1
    3240:	89 83       	std	Y+1, r24	; 0x01

	 return Local_enuErrorState;
    3242:	89 81       	ldd	r24, Y+1	; 0x01
}
    3244:	0f 90       	pop	r0
    3246:	cf 91       	pop	r28
    3248:	df 91       	pop	r29
    324a:	08 95       	ret

0000324c <ADC_enuEnableInterruptMode>:

ES_t ADC_enuEnableInterruptMode(void)
{
    324c:	df 93       	push	r29
    324e:	cf 93       	push	r28
    3250:	0f 92       	push	r0
    3252:	cd b7       	in	r28, 0x3d	; 61
    3254:	de b7       	in	r29, 0x3e	; 62
	 ES_t Local_enuErrorState=ES_NOK;
    3256:	19 82       	std	Y+1, r1	; 0x01

	 ADCSRA |=(1<<3);
    3258:	a6 e2       	ldi	r26, 0x26	; 38
    325a:	b0 e0       	ldi	r27, 0x00	; 0
    325c:	e6 e2       	ldi	r30, 0x26	; 38
    325e:	f0 e0       	ldi	r31, 0x00	; 0
    3260:	80 81       	ld	r24, Z
    3262:	88 60       	ori	r24, 0x08	; 8
    3264:	8c 93       	st	X, r24
	 Local_enuErrorState=ES_OK;
    3266:	81 e0       	ldi	r24, 0x01	; 1
    3268:	89 83       	std	Y+1, r24	; 0x01

	 return Local_enuErrorState;
    326a:	89 81       	ldd	r24, Y+1	; 0x01
}
    326c:	0f 90       	pop	r0
    326e:	cf 91       	pop	r28
    3270:	df 91       	pop	r29
    3272:	08 95       	ret

00003274 <ADC_enuDisableInterruptMode>:

ES_t ADC_enuDisableInterruptMode(void)
{
    3274:	df 93       	push	r29
    3276:	cf 93       	push	r28
    3278:	0f 92       	push	r0
    327a:	cd b7       	in	r28, 0x3d	; 61
    327c:	de b7       	in	r29, 0x3e	; 62
	 ES_t Local_enuErrorState=ES_NOK;
    327e:	19 82       	std	Y+1, r1	; 0x01

	 ADCSRA &=~(1<<3);
    3280:	a6 e2       	ldi	r26, 0x26	; 38
    3282:	b0 e0       	ldi	r27, 0x00	; 0
    3284:	e6 e2       	ldi	r30, 0x26	; 38
    3286:	f0 e0       	ldi	r31, 0x00	; 0
    3288:	80 81       	ld	r24, Z
    328a:	87 7f       	andi	r24, 0xF7	; 247
    328c:	8c 93       	st	X, r24
	 Local_enuErrorState=ES_OK;
    328e:	81 e0       	ldi	r24, 0x01	; 1
    3290:	89 83       	std	Y+1, r24	; 0x01

	 return Local_enuErrorState;
    3292:	89 81       	ldd	r24, Y+1	; 0x01
}
    3294:	0f 90       	pop	r0
    3296:	cf 91       	pop	r28
    3298:	df 91       	pop	r29
    329a:	08 95       	ret

0000329c <ADC_enuEnable>:

ES_t ADC_enuEnable(void)
{
    329c:	df 93       	push	r29
    329e:	cf 93       	push	r28
    32a0:	0f 92       	push	r0
    32a2:	cd b7       	in	r28, 0x3d	; 61
    32a4:	de b7       	in	r29, 0x3e	; 62
	 ES_t Local_enuErrorState=ES_NOK;
    32a6:	19 82       	std	Y+1, r1	; 0x01

	 ADCSRA |=(1<<7);
    32a8:	a6 e2       	ldi	r26, 0x26	; 38
    32aa:	b0 e0       	ldi	r27, 0x00	; 0
    32ac:	e6 e2       	ldi	r30, 0x26	; 38
    32ae:	f0 e0       	ldi	r31, 0x00	; 0
    32b0:	80 81       	ld	r24, Z
    32b2:	80 68       	ori	r24, 0x80	; 128
    32b4:	8c 93       	st	X, r24
	 Local_enuErrorState=ES_OK;
    32b6:	81 e0       	ldi	r24, 0x01	; 1
    32b8:	89 83       	std	Y+1, r24	; 0x01

	 return Local_enuErrorState;
    32ba:	89 81       	ldd	r24, Y+1	; 0x01
}
    32bc:	0f 90       	pop	r0
    32be:	cf 91       	pop	r28
    32c0:	df 91       	pop	r29
    32c2:	08 95       	ret

000032c4 <ADC_enuDisable>:

ES_t ADC_enuDisable(void)
{
    32c4:	df 93       	push	r29
    32c6:	cf 93       	push	r28
    32c8:	0f 92       	push	r0
    32ca:	cd b7       	in	r28, 0x3d	; 61
    32cc:	de b7       	in	r29, 0x3e	; 62
	 ES_t Local_enuErrorState=ES_NOK;
    32ce:	19 82       	std	Y+1, r1	; 0x01

	 ADCSRA &=~(1<<7);
    32d0:	a6 e2       	ldi	r26, 0x26	; 38
    32d2:	b0 e0       	ldi	r27, 0x00	; 0
    32d4:	e6 e2       	ldi	r30, 0x26	; 38
    32d6:	f0 e0       	ldi	r31, 0x00	; 0
    32d8:	80 81       	ld	r24, Z
    32da:	8f 77       	andi	r24, 0x7F	; 127
    32dc:	8c 93       	st	X, r24
	 Local_enuErrorState=ES_OK;
    32de:	81 e0       	ldi	r24, 0x01	; 1
    32e0:	89 83       	std	Y+1, r24	; 0x01

	 return Local_enuErrorState;
    32e2:	89 81       	ldd	r24, Y+1	; 0x01
}
    32e4:	0f 90       	pop	r0
    32e6:	cf 91       	pop	r28
    32e8:	df 91       	pop	r29
    32ea:	08 95       	ret

000032ec <__vector_16>:


ISR(VECT_ADC)
{
    32ec:	1f 92       	push	r1
    32ee:	0f 92       	push	r0
    32f0:	0f b6       	in	r0, 0x3f	; 63
    32f2:	0f 92       	push	r0
    32f4:	11 24       	eor	r1, r1
    32f6:	2f 93       	push	r18
    32f8:	3f 93       	push	r19
    32fa:	4f 93       	push	r20
    32fc:	5f 93       	push	r21
    32fe:	6f 93       	push	r22
    3300:	7f 93       	push	r23
    3302:	8f 93       	push	r24
    3304:	9f 93       	push	r25
    3306:	af 93       	push	r26
    3308:	bf 93       	push	r27
    330a:	ef 93       	push	r30
    330c:	ff 93       	push	r31
    330e:	df 93       	push	r29
    3310:	cf 93       	push	r28
    3312:	cd b7       	in	r28, 0x3d	; 61
    3314:	de b7       	in	r29, 0x3e	; 62
	if(ADC_pfunISRFun!=NULL)
    3316:	80 91 d4 01 	lds	r24, 0x01D4
    331a:	90 91 d5 01 	lds	r25, 0x01D5
    331e:	00 97       	sbiw	r24, 0x00	; 0
    3320:	49 f0       	breq	.+18     	; 0x3334 <__vector_16+0x48>
	{
		ADC_pfunISRFun(ADC_pvidISRParameter);
    3322:	e0 91 d4 01 	lds	r30, 0x01D4
    3326:	f0 91 d5 01 	lds	r31, 0x01D5
    332a:	80 91 d6 01 	lds	r24, 0x01D6
    332e:	90 91 d7 01 	lds	r25, 0x01D7
    3332:	09 95       	icall
	}

}
    3334:	cf 91       	pop	r28
    3336:	df 91       	pop	r29
    3338:	ff 91       	pop	r31
    333a:	ef 91       	pop	r30
    333c:	bf 91       	pop	r27
    333e:	af 91       	pop	r26
    3340:	9f 91       	pop	r25
    3342:	8f 91       	pop	r24
    3344:	7f 91       	pop	r23
    3346:	6f 91       	pop	r22
    3348:	5f 91       	pop	r21
    334a:	4f 91       	pop	r20
    334c:	3f 91       	pop	r19
    334e:	2f 91       	pop	r18
    3350:	0f 90       	pop	r0
    3352:	0f be       	out	0x3f, r0	; 63
    3354:	0f 90       	pop	r0
    3356:	1f 90       	pop	r1
    3358:	18 95       	reti

0000335a <Switch_enuInit>:
#include "Switch_priv.h"

#include "../../MCAL/DIO/DIO_int.h"

ES_t Switch_enuInit(SW_t * copy_AstrSwitchs)
{
    335a:	df 93       	push	r29
    335c:	cf 93       	push	r28
    335e:	00 d0       	rcall	.+0      	; 0x3360 <Switch_enuInit+0x6>
    3360:	00 d0       	rcall	.+0      	; 0x3362 <Switch_enuInit+0x8>
    3362:	cd b7       	in	r28, 0x3d	; 61
    3364:	de b7       	in	r29, 0x3e	; 62
    3366:	9c 83       	std	Y+4, r25	; 0x04
    3368:	8b 83       	std	Y+3, r24	; 0x03
	ES_t Local_enuErrorState = ES_NOK ;
    336a:	1a 82       	std	Y+2, r1	; 0x02

	if(copy_AstrSwitchs !=NULL)
    336c:	8b 81       	ldd	r24, Y+3	; 0x03
    336e:	9c 81       	ldd	r25, Y+4	; 0x04
    3370:	00 97       	sbiw	r24, 0x00	; 0
    3372:	09 f4       	brne	.+2      	; 0x3376 <Switch_enuInit+0x1c>
    3374:	5d c0       	rjmp	.+186    	; 0x3430 <Switch_enuInit+0xd6>
	{
		u8 Local_u8Iterator=0;
    3376:	19 82       	std	Y+1, r1	; 0x01
		for(Local_u8Iterator=0;Local_u8Iterator<SW_NUM;Local_u8Iterator++)
    3378:	19 82       	std	Y+1, r1	; 0x01
    337a:	55 c0       	rjmp	.+170    	; 0x3426 <Switch_enuInit+0xcc>
		{
			Local_enuErrorState=DIO_enuSetPinDirection(copy_AstrSwitchs[Local_u8Iterator].SW_PortID,copy_AstrSwitchs[Local_u8Iterator].SW_PinID,DIO_u8INPUT);
    337c:	89 81       	ldd	r24, Y+1	; 0x01
    337e:	28 2f       	mov	r18, r24
    3380:	30 e0       	ldi	r19, 0x00	; 0
    3382:	c9 01       	movw	r24, r18
    3384:	88 0f       	add	r24, r24
    3386:	99 1f       	adc	r25, r25
    3388:	28 0f       	add	r18, r24
    338a:	39 1f       	adc	r19, r25
    338c:	8b 81       	ldd	r24, Y+3	; 0x03
    338e:	9c 81       	ldd	r25, Y+4	; 0x04
    3390:	fc 01       	movw	r30, r24
    3392:	e2 0f       	add	r30, r18
    3394:	f3 1f       	adc	r31, r19
    3396:	40 81       	ld	r20, Z
    3398:	89 81       	ldd	r24, Y+1	; 0x01
    339a:	28 2f       	mov	r18, r24
    339c:	30 e0       	ldi	r19, 0x00	; 0
    339e:	c9 01       	movw	r24, r18
    33a0:	88 0f       	add	r24, r24
    33a2:	99 1f       	adc	r25, r25
    33a4:	28 0f       	add	r18, r24
    33a6:	39 1f       	adc	r19, r25
    33a8:	8b 81       	ldd	r24, Y+3	; 0x03
    33aa:	9c 81       	ldd	r25, Y+4	; 0x04
    33ac:	fc 01       	movw	r30, r24
    33ae:	e2 0f       	add	r30, r18
    33b0:	f3 1f       	adc	r31, r19
    33b2:	91 81       	ldd	r25, Z+1	; 0x01
    33b4:	84 2f       	mov	r24, r20
    33b6:	69 2f       	mov	r22, r25
    33b8:	40 e0       	ldi	r20, 0x00	; 0
    33ba:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <DIO_enuSetPinDirection>
    33be:	8a 83       	std	Y+2, r24	; 0x02
			Local_enuErrorState=DIO_enuSetPinValue(copy_AstrSwitchs[Local_u8Iterator].SW_PortID,copy_AstrSwitchs[Local_u8Iterator].SW_PinID,copy_AstrSwitchs[Local_u8Iterator].SW_Status);
    33c0:	89 81       	ldd	r24, Y+1	; 0x01
    33c2:	28 2f       	mov	r18, r24
    33c4:	30 e0       	ldi	r19, 0x00	; 0
    33c6:	c9 01       	movw	r24, r18
    33c8:	88 0f       	add	r24, r24
    33ca:	99 1f       	adc	r25, r25
    33cc:	28 0f       	add	r18, r24
    33ce:	39 1f       	adc	r19, r25
    33d0:	8b 81       	ldd	r24, Y+3	; 0x03
    33d2:	9c 81       	ldd	r25, Y+4	; 0x04
    33d4:	fc 01       	movw	r30, r24
    33d6:	e2 0f       	add	r30, r18
    33d8:	f3 1f       	adc	r31, r19
    33da:	50 81       	ld	r21, Z
    33dc:	89 81       	ldd	r24, Y+1	; 0x01
    33de:	28 2f       	mov	r18, r24
    33e0:	30 e0       	ldi	r19, 0x00	; 0
    33e2:	c9 01       	movw	r24, r18
    33e4:	88 0f       	add	r24, r24
    33e6:	99 1f       	adc	r25, r25
    33e8:	28 0f       	add	r18, r24
    33ea:	39 1f       	adc	r19, r25
    33ec:	8b 81       	ldd	r24, Y+3	; 0x03
    33ee:	9c 81       	ldd	r25, Y+4	; 0x04
    33f0:	fc 01       	movw	r30, r24
    33f2:	e2 0f       	add	r30, r18
    33f4:	f3 1f       	adc	r31, r19
    33f6:	41 81       	ldd	r20, Z+1	; 0x01
    33f8:	89 81       	ldd	r24, Y+1	; 0x01
    33fa:	28 2f       	mov	r18, r24
    33fc:	30 e0       	ldi	r19, 0x00	; 0
    33fe:	c9 01       	movw	r24, r18
    3400:	88 0f       	add	r24, r24
    3402:	99 1f       	adc	r25, r25
    3404:	28 0f       	add	r18, r24
    3406:	39 1f       	adc	r19, r25
    3408:	8b 81       	ldd	r24, Y+3	; 0x03
    340a:	9c 81       	ldd	r25, Y+4	; 0x04
    340c:	fc 01       	movw	r30, r24
    340e:	e2 0f       	add	r30, r18
    3410:	f3 1f       	adc	r31, r19
    3412:	92 81       	ldd	r25, Z+2	; 0x02
    3414:	85 2f       	mov	r24, r21
    3416:	64 2f       	mov	r22, r20
    3418:	49 2f       	mov	r20, r25
    341a:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <DIO_enuSetPinValue>
    341e:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK ;

	if(copy_AstrSwitchs !=NULL)
	{
		u8 Local_u8Iterator=0;
		for(Local_u8Iterator=0;Local_u8Iterator<SW_NUM;Local_u8Iterator++)
    3420:	89 81       	ldd	r24, Y+1	; 0x01
    3422:	8f 5f       	subi	r24, 0xFF	; 255
    3424:	89 83       	std	Y+1, r24	; 0x01
    3426:	89 81       	ldd	r24, Y+1	; 0x01
    3428:	83 30       	cpi	r24, 0x03	; 3
    342a:	08 f4       	brcc	.+2      	; 0x342e <Switch_enuInit+0xd4>
    342c:	a7 cf       	rjmp	.-178    	; 0x337c <Switch_enuInit+0x22>
    342e:	02 c0       	rjmp	.+4      	; 0x3434 <Switch_enuInit+0xda>
			Local_enuErrorState=DIO_enuSetPinValue(copy_AstrSwitchs[Local_u8Iterator].SW_PortID,copy_AstrSwitchs[Local_u8Iterator].SW_PinID,copy_AstrSwitchs[Local_u8Iterator].SW_Status);
		}
	}
	else
	{
		Local_enuErrorState=ES_NULL_POINTER;
    3430:	82 e0       	ldi	r24, 0x02	; 2
    3432:	8a 83       	std	Y+2, r24	; 0x02
	}

	return Local_enuErrorState;
    3434:	8a 81       	ldd	r24, Y+2	; 0x02
}
    3436:	0f 90       	pop	r0
    3438:	0f 90       	pop	r0
    343a:	0f 90       	pop	r0
    343c:	0f 90       	pop	r0
    343e:	cf 91       	pop	r28
    3440:	df 91       	pop	r29
    3442:	08 95       	ret

00003444 <Switch_enuGetState>:

ES_t Switch_enuGetState(SW_t * copy_AstrSwitchs,u8 * copy_pu8SwState)
{
    3444:	df 93       	push	r29
    3446:	cf 93       	push	r28
    3448:	00 d0       	rcall	.+0      	; 0x344a <Switch_enuGetState+0x6>
    344a:	00 d0       	rcall	.+0      	; 0x344c <Switch_enuGetState+0x8>
    344c:	0f 92       	push	r0
    344e:	cd b7       	in	r28, 0x3d	; 61
    3450:	de b7       	in	r29, 0x3e	; 62
    3452:	9b 83       	std	Y+3, r25	; 0x03
    3454:	8a 83       	std	Y+2, r24	; 0x02
    3456:	7d 83       	std	Y+5, r23	; 0x05
    3458:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrorState = ES_NOK ;
    345a:	19 82       	std	Y+1, r1	; 0x01

	if(copy_AstrSwitchs !=NULL && copy_pu8SwState !=NULL)
    345c:	8a 81       	ldd	r24, Y+2	; 0x02
    345e:	9b 81       	ldd	r25, Y+3	; 0x03
    3460:	00 97       	sbiw	r24, 0x00	; 0
    3462:	89 f0       	breq	.+34     	; 0x3486 <Switch_enuGetState+0x42>
    3464:	8c 81       	ldd	r24, Y+4	; 0x04
    3466:	9d 81       	ldd	r25, Y+5	; 0x05
    3468:	00 97       	sbiw	r24, 0x00	; 0
    346a:	69 f0       	breq	.+26     	; 0x3486 <Switch_enuGetState+0x42>
	{
		Local_enuErrorState=DIO_enuGetPinValue(copy_AstrSwitchs->SW_PortID,copy_AstrSwitchs->SW_PinID,copy_pu8SwState);
    346c:	ea 81       	ldd	r30, Y+2	; 0x02
    346e:	fb 81       	ldd	r31, Y+3	; 0x03
    3470:	80 81       	ld	r24, Z
    3472:	ea 81       	ldd	r30, Y+2	; 0x02
    3474:	fb 81       	ldd	r31, Y+3	; 0x03
    3476:	91 81       	ldd	r25, Z+1	; 0x01
    3478:	2c 81       	ldd	r18, Y+4	; 0x04
    347a:	3d 81       	ldd	r19, Y+5	; 0x05
    347c:	69 2f       	mov	r22, r25
    347e:	a9 01       	movw	r20, r18
    3480:	0e 94 56 16 	call	0x2cac	; 0x2cac <DIO_enuGetPinValue>
    3484:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    3486:	89 81       	ldd	r24, Y+1	; 0x01
}
    3488:	0f 90       	pop	r0
    348a:	0f 90       	pop	r0
    348c:	0f 90       	pop	r0
    348e:	0f 90       	pop	r0
    3490:	0f 90       	pop	r0
    3492:	cf 91       	pop	r28
    3494:	df 91       	pop	r29
    3496:	08 95       	ret

00003498 <LM35_enuInit>:




ES_t LM35_enuInit(TR_t *Copy_pstrLM)
{
    3498:	df 93       	push	r29
    349a:	cf 93       	push	r28
    349c:	00 d0       	rcall	.+0      	; 0x349e <LM35_enuInit+0x6>
    349e:	0f 92       	push	r0
    34a0:	cd b7       	in	r28, 0x3d	; 61
    34a2:	de b7       	in	r29, 0x3e	; 62
    34a4:	9b 83       	std	Y+3, r25	; 0x03
    34a6:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState=ES_NOK;
    34a8:	19 82       	std	Y+1, r1	; 0x01


	if(Copy_pstrLM!=NULL)
    34aa:	8a 81       	ldd	r24, Y+2	; 0x02
    34ac:	9b 81       	ldd	r25, Y+3	; 0x03
    34ae:	00 97       	sbiw	r24, 0x00	; 0
    34b0:	31 f1       	breq	.+76     	; 0x34fe <LM35_enuInit+0x66>
	{

		if(Copy_pstrLM->TR_u8PosPinID!=NOT_CONNECTED)
    34b2:	ea 81       	ldd	r30, Y+2	; 0x02
    34b4:	fb 81       	ldd	r31, Y+3	; 0x03
    34b6:	80 81       	ld	r24, Z
    34b8:	88 23       	and	r24, r24
    34ba:	91 f0       	breq	.+36     	; 0x34e0 <LM35_enuInit+0x48>
		{
			Local_enuErrorState=DIO_enuSetPinDirection(DIO_u8PORTA,Copy_pstrLM->TR_u8PosPinID,DIO_u8INPUT);
    34bc:	ea 81       	ldd	r30, Y+2	; 0x02
    34be:	fb 81       	ldd	r31, Y+3	; 0x03
    34c0:	90 81       	ld	r25, Z
    34c2:	80 e0       	ldi	r24, 0x00	; 0
    34c4:	69 2f       	mov	r22, r25
    34c6:	40 e0       	ldi	r20, 0x00	; 0
    34c8:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <DIO_enuSetPinDirection>
    34cc:	89 83       	std	Y+1, r24	; 0x01
			Local_enuErrorState=ADC_enuInit();
    34ce:	0e 94 f2 16 	call	0x2de4	; 0x2de4 <ADC_enuInit>
    34d2:	89 83       	std	Y+1, r24	; 0x01
			Local_enuErrorState=ADC_enuSelectChannel(Copy_pstrLM->TR_u8PosPinID);
    34d4:	ea 81       	ldd	r30, Y+2	; 0x02
    34d6:	fb 81       	ldd	r31, Y+3	; 0x03
    34d8:	80 81       	ld	r24, Z
    34da:	0e 94 d4 17 	call	0x2fa8	; 0x2fa8 <ADC_enuSelectChannel>
    34de:	89 83       	std	Y+1, r24	; 0x01

		}
		if(Copy_pstrLM->TR_u8NegPinID!=NOT_CONNECTED)
    34e0:	ea 81       	ldd	r30, Y+2	; 0x02
    34e2:	fb 81       	ldd	r31, Y+3	; 0x03
    34e4:	81 81       	ldd	r24, Z+1	; 0x01
    34e6:	88 23       	and	r24, r24
    34e8:	61 f0       	breq	.+24     	; 0x3502 <LM35_enuInit+0x6a>
		{
			Local_enuErrorState=DIO_enuSetPinDirection(DIO_u8PORTA,Copy_pstrLM->TR_u8NegPinID,DIO_u8INPUT);
    34ea:	ea 81       	ldd	r30, Y+2	; 0x02
    34ec:	fb 81       	ldd	r31, Y+3	; 0x03
    34ee:	91 81       	ldd	r25, Z+1	; 0x01
    34f0:	80 e0       	ldi	r24, 0x00	; 0
    34f2:	69 2f       	mov	r22, r25
    34f4:	40 e0       	ldi	r20, 0x00	; 0
    34f6:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <DIO_enuSetPinDirection>
    34fa:	89 83       	std	Y+1, r24	; 0x01
    34fc:	02 c0       	rjmp	.+4      	; 0x3502 <LM35_enuInit+0x6a>
		}

	}
	else
	{
		Local_enuErrorState=ES_NULL_POINTER;
    34fe:	82 e0       	ldi	r24, 0x02	; 2
    3500:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    3502:	89 81       	ldd	r24, Y+1	; 0x01
}
    3504:	0f 90       	pop	r0
    3506:	0f 90       	pop	r0
    3508:	0f 90       	pop	r0
    350a:	cf 91       	pop	r28
    350c:	df 91       	pop	r29
    350e:	08 95       	ret

00003510 <LM35_enuGetTemp>:

ES_t LM35_enuGetTemp(f32 * Copy_pf32Temp)
{
    3510:	df 93       	push	r29
    3512:	cf 93       	push	r28
    3514:	00 d0       	rcall	.+0      	; 0x3516 <LM35_enuGetTemp+0x6>
    3516:	00 d0       	rcall	.+0      	; 0x3518 <LM35_enuGetTemp+0x8>
    3518:	0f 92       	push	r0
    351a:	cd b7       	in	r28, 0x3d	; 61
    351c:	de b7       	in	r29, 0x3e	; 62
    351e:	9d 83       	std	Y+5, r25	; 0x05
    3520:	8c 83       	std	Y+4, r24	; 0x04
	ES_t Local_enuErrorState=ES_NOK;
    3522:	19 82       	std	Y+1, r1	; 0x01

	u16 Local_u16ADCread=0;
    3524:	1b 82       	std	Y+3, r1	; 0x03
    3526:	1a 82       	std	Y+2, r1	; 0x02
	ADC_enuRead(&Local_u16ADCread);
    3528:	ce 01       	movw	r24, r28
    352a:	02 96       	adiw	r24, 0x02	; 2
    352c:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <ADC_enuRead>
	*Copy_pf32Temp=((Local_u16ADCread*4.88)/10.00);
    3530:	8a 81       	ldd	r24, Y+2	; 0x02
    3532:	9b 81       	ldd	r25, Y+3	; 0x03
    3534:	cc 01       	movw	r24, r24
    3536:	a0 e0       	ldi	r26, 0x00	; 0
    3538:	b0 e0       	ldi	r27, 0x00	; 0
    353a:	bc 01       	movw	r22, r24
    353c:	cd 01       	movw	r24, r26
    353e:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    3542:	dc 01       	movw	r26, r24
    3544:	cb 01       	movw	r24, r22
    3546:	bc 01       	movw	r22, r24
    3548:	cd 01       	movw	r24, r26
    354a:	26 ef       	ldi	r18, 0xF6	; 246
    354c:	38 e2       	ldi	r19, 0x28	; 40
    354e:	4c e9       	ldi	r20, 0x9C	; 156
    3550:	50 e4       	ldi	r21, 0x40	; 64
    3552:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3556:	dc 01       	movw	r26, r24
    3558:	cb 01       	movw	r24, r22
    355a:	bc 01       	movw	r22, r24
    355c:	cd 01       	movw	r24, r26
    355e:	20 e0       	ldi	r18, 0x00	; 0
    3560:	30 e0       	ldi	r19, 0x00	; 0
    3562:	40 e2       	ldi	r20, 0x20	; 32
    3564:	51 e4       	ldi	r21, 0x41	; 65
    3566:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    356a:	dc 01       	movw	r26, r24
    356c:	cb 01       	movw	r24, r22
    356e:	ec 81       	ldd	r30, Y+4	; 0x04
    3570:	fd 81       	ldd	r31, Y+5	; 0x05
    3572:	80 83       	st	Z, r24
    3574:	91 83       	std	Z+1, r25	; 0x01
    3576:	a2 83       	std	Z+2, r26	; 0x02
    3578:	b3 83       	std	Z+3, r27	; 0x03

	return Local_enuErrorState;
    357a:	89 81       	ldd	r24, Y+1	; 0x01
}
    357c:	0f 90       	pop	r0
    357e:	0f 90       	pop	r0
    3580:	0f 90       	pop	r0
    3582:	0f 90       	pop	r0
    3584:	0f 90       	pop	r0
    3586:	cf 91       	pop	r28
    3588:	df 91       	pop	r29
    358a:	08 95       	ret

0000358c <LCD_enuInit>:
#include "LCD_priv.h"

#include "util/delay.h"

ES_t LCD_enuInit(void)
{
    358c:	0f 93       	push	r16
    358e:	1f 93       	push	r17
    3590:	df 93       	push	r29
    3592:	cf 93       	push	r28
    3594:	cd b7       	in	r28, 0x3d	; 61
    3596:	de b7       	in	r29, 0x3e	; 62
    3598:	c7 54       	subi	r28, 0x47	; 71
    359a:	d0 40       	sbci	r29, 0x00	; 0
    359c:	0f b6       	in	r0, 0x3f	; 63
    359e:	f8 94       	cli
    35a0:	de bf       	out	0x3e, r29	; 62
    35a2:	0f be       	out	0x3f, r0	; 63
    35a4:	cd bf       	out	0x3d, r28	; 61
	ES_t Local_enuErrorState=ES_NOK;
    35a6:	fe 01       	movw	r30, r28
    35a8:	e9 5b       	subi	r30, 0xB9	; 185
    35aa:	ff 4f       	sbci	r31, 0xFF	; 255
    35ac:	10 82       	st	Z, r1
    35ae:	fe 01       	movw	r30, r28
    35b0:	ed 5b       	subi	r30, 0xBD	; 189
    35b2:	ff 4f       	sbci	r31, 0xFF	; 255
    35b4:	80 e0       	ldi	r24, 0x00	; 0
    35b6:	90 e0       	ldi	r25, 0x00	; 0
    35b8:	ac e0       	ldi	r26, 0x0C	; 12
    35ba:	b2 e4       	ldi	r27, 0x42	; 66
    35bc:	80 83       	st	Z, r24
    35be:	91 83       	std	Z+1, r25	; 0x01
    35c0:	a2 83       	std	Z+2, r26	; 0x02
    35c2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35c4:	8e 01       	movw	r16, r28
    35c6:	01 5c       	subi	r16, 0xC1	; 193
    35c8:	1f 4f       	sbci	r17, 0xFF	; 255
    35ca:	fe 01       	movw	r30, r28
    35cc:	ed 5b       	subi	r30, 0xBD	; 189
    35ce:	ff 4f       	sbci	r31, 0xFF	; 255
    35d0:	60 81       	ld	r22, Z
    35d2:	71 81       	ldd	r23, Z+1	; 0x01
    35d4:	82 81       	ldd	r24, Z+2	; 0x02
    35d6:	93 81       	ldd	r25, Z+3	; 0x03
    35d8:	20 e0       	ldi	r18, 0x00	; 0
    35da:	30 e0       	ldi	r19, 0x00	; 0
    35dc:	4a ef       	ldi	r20, 0xFA	; 250
    35de:	54 e4       	ldi	r21, 0x44	; 68
    35e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35e4:	dc 01       	movw	r26, r24
    35e6:	cb 01       	movw	r24, r22
    35e8:	f8 01       	movw	r30, r16
    35ea:	80 83       	st	Z, r24
    35ec:	91 83       	std	Z+1, r25	; 0x01
    35ee:	a2 83       	std	Z+2, r26	; 0x02
    35f0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    35f2:	fe 01       	movw	r30, r28
    35f4:	ff 96       	adiw	r30, 0x3f	; 63
    35f6:	60 81       	ld	r22, Z
    35f8:	71 81       	ldd	r23, Z+1	; 0x01
    35fa:	82 81       	ldd	r24, Z+2	; 0x02
    35fc:	93 81       	ldd	r25, Z+3	; 0x03
    35fe:	20 e0       	ldi	r18, 0x00	; 0
    3600:	30 e0       	ldi	r19, 0x00	; 0
    3602:	40 e8       	ldi	r20, 0x80	; 128
    3604:	5f e3       	ldi	r21, 0x3F	; 63
    3606:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    360a:	88 23       	and	r24, r24
    360c:	2c f4       	brge	.+10     	; 0x3618 <LCD_enuInit+0x8c>
		__ticks = 1;
    360e:	81 e0       	ldi	r24, 0x01	; 1
    3610:	90 e0       	ldi	r25, 0x00	; 0
    3612:	9e af       	std	Y+62, r25	; 0x3e
    3614:	8d af       	std	Y+61, r24	; 0x3d
    3616:	46 c0       	rjmp	.+140    	; 0x36a4 <LCD_enuInit+0x118>
	else if (__tmp > 65535)
    3618:	fe 01       	movw	r30, r28
    361a:	ff 96       	adiw	r30, 0x3f	; 63
    361c:	60 81       	ld	r22, Z
    361e:	71 81       	ldd	r23, Z+1	; 0x01
    3620:	82 81       	ldd	r24, Z+2	; 0x02
    3622:	93 81       	ldd	r25, Z+3	; 0x03
    3624:	20 e0       	ldi	r18, 0x00	; 0
    3626:	3f ef       	ldi	r19, 0xFF	; 255
    3628:	4f e7       	ldi	r20, 0x7F	; 127
    362a:	57 e4       	ldi	r21, 0x47	; 71
    362c:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3630:	18 16       	cp	r1, r24
    3632:	64 f5       	brge	.+88     	; 0x368c <LCD_enuInit+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3634:	fe 01       	movw	r30, r28
    3636:	ed 5b       	subi	r30, 0xBD	; 189
    3638:	ff 4f       	sbci	r31, 0xFF	; 255
    363a:	60 81       	ld	r22, Z
    363c:	71 81       	ldd	r23, Z+1	; 0x01
    363e:	82 81       	ldd	r24, Z+2	; 0x02
    3640:	93 81       	ldd	r25, Z+3	; 0x03
    3642:	20 e0       	ldi	r18, 0x00	; 0
    3644:	30 e0       	ldi	r19, 0x00	; 0
    3646:	40 e2       	ldi	r20, 0x20	; 32
    3648:	51 e4       	ldi	r21, 0x41	; 65
    364a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    364e:	dc 01       	movw	r26, r24
    3650:	cb 01       	movw	r24, r22
    3652:	bc 01       	movw	r22, r24
    3654:	cd 01       	movw	r24, r26
    3656:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    365a:	dc 01       	movw	r26, r24
    365c:	cb 01       	movw	r24, r22
    365e:	9e af       	std	Y+62, r25	; 0x3e
    3660:	8d af       	std	Y+61, r24	; 0x3d
    3662:	0f c0       	rjmp	.+30     	; 0x3682 <LCD_enuInit+0xf6>
    3664:	88 ec       	ldi	r24, 0xC8	; 200
    3666:	90 e0       	ldi	r25, 0x00	; 0
    3668:	9c af       	std	Y+60, r25	; 0x3c
    366a:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    366c:	8b ad       	ldd	r24, Y+59	; 0x3b
    366e:	9c ad       	ldd	r25, Y+60	; 0x3c
    3670:	01 97       	sbiw	r24, 0x01	; 1
    3672:	f1 f7       	brne	.-4      	; 0x3670 <LCD_enuInit+0xe4>
    3674:	9c af       	std	Y+60, r25	; 0x3c
    3676:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3678:	8d ad       	ldd	r24, Y+61	; 0x3d
    367a:	9e ad       	ldd	r25, Y+62	; 0x3e
    367c:	01 97       	sbiw	r24, 0x01	; 1
    367e:	9e af       	std	Y+62, r25	; 0x3e
    3680:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3682:	8d ad       	ldd	r24, Y+61	; 0x3d
    3684:	9e ad       	ldd	r25, Y+62	; 0x3e
    3686:	00 97       	sbiw	r24, 0x00	; 0
    3688:	69 f7       	brne	.-38     	; 0x3664 <LCD_enuInit+0xd8>
    368a:	16 c0       	rjmp	.+44     	; 0x36b8 <LCD_enuInit+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    368c:	fe 01       	movw	r30, r28
    368e:	ff 96       	adiw	r30, 0x3f	; 63
    3690:	60 81       	ld	r22, Z
    3692:	71 81       	ldd	r23, Z+1	; 0x01
    3694:	82 81       	ldd	r24, Z+2	; 0x02
    3696:	93 81       	ldd	r25, Z+3	; 0x03
    3698:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    369c:	dc 01       	movw	r26, r24
    369e:	cb 01       	movw	r24, r22
    36a0:	9e af       	std	Y+62, r25	; 0x3e
    36a2:	8d af       	std	Y+61, r24	; 0x3d
    36a4:	8d ad       	ldd	r24, Y+61	; 0x3d
    36a6:	9e ad       	ldd	r25, Y+62	; 0x3e
    36a8:	9a af       	std	Y+58, r25	; 0x3a
    36aa:	89 af       	std	Y+57, r24	; 0x39
    36ac:	89 ad       	ldd	r24, Y+57	; 0x39
    36ae:	9a ad       	ldd	r25, Y+58	; 0x3a
    36b0:	01 97       	sbiw	r24, 0x01	; 1
    36b2:	f1 f7       	brne	.-4      	; 0x36b0 <LCD_enuInit+0x124>
    36b4:	9a af       	std	Y+58, r25	; 0x3a
    36b6:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(35);
	DIO_enuSetPinDirection(RS_PORT,RS_PIN,DIO_u8OUTPUT);
    36b8:	83 e0       	ldi	r24, 0x03	; 3
    36ba:	60 e0       	ldi	r22, 0x00	; 0
    36bc:	41 e0       	ldi	r20, 0x01	; 1
    36be:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(RW_PORT,RW_PIN,DIO_u8OUTPUT);
    36c2:	83 e0       	ldi	r24, 0x03	; 3
    36c4:	61 e0       	ldi	r22, 0x01	; 1
    36c6:	41 e0       	ldi	r20, 0x01	; 1
    36c8:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(EN_PORT,EN_PIN,DIO_u8OUTPUT);
    36cc:	83 e0       	ldi	r24, 0x03	; 3
    36ce:	63 e0       	ldi	r22, 0x03	; 3
    36d0:	41 e0       	ldi	r20, 0x01	; 1
    36d2:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <DIO_enuSetPinDirection>

	DIO_enuSetPinDirection(D7_PORT,D7_PIN,DIO_u8OUTPUT);
    36d6:	82 e0       	ldi	r24, 0x02	; 2
    36d8:	67 e0       	ldi	r22, 0x07	; 7
    36da:	41 e0       	ldi	r20, 0x01	; 1
    36dc:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D6_PORT,D6_PIN,DIO_u8OUTPUT);
    36e0:	82 e0       	ldi	r24, 0x02	; 2
    36e2:	66 e0       	ldi	r22, 0x06	; 6
    36e4:	41 e0       	ldi	r20, 0x01	; 1
    36e6:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D5_PORT,D5_PIN,DIO_u8OUTPUT);
    36ea:	82 e0       	ldi	r24, 0x02	; 2
    36ec:	65 e0       	ldi	r22, 0x05	; 5
    36ee:	41 e0       	ldi	r20, 0x01	; 1
    36f0:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D4_PORT,D4_PIN,DIO_u8OUTPUT);
    36f4:	82 e0       	ldi	r24, 0x02	; 2
    36f6:	64 e0       	ldi	r22, 0x04	; 4
    36f8:	41 e0       	ldi	r20, 0x01	; 1
    36fa:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <DIO_enuSetPinDirection>

	//FUNCTION SET
#if LCD_MODE==EIGHT_BIT
	DIO_enuSetPinDirection(D3_PORT,D3_PIN,DIO_u8OUTPUT);
    36fe:	82 e0       	ldi	r24, 0x02	; 2
    3700:	63 e0       	ldi	r22, 0x03	; 3
    3702:	41 e0       	ldi	r20, 0x01	; 1
    3704:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D2_PORT,D2_PIN,DIO_u8OUTPUT);
    3708:	82 e0       	ldi	r24, 0x02	; 2
    370a:	62 e0       	ldi	r22, 0x02	; 2
    370c:	41 e0       	ldi	r20, 0x01	; 1
    370e:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D1_PORT,D1_PIN,DIO_u8OUTPUT);
    3712:	82 e0       	ldi	r24, 0x02	; 2
    3714:	61 e0       	ldi	r22, 0x01	; 1
    3716:	41 e0       	ldi	r20, 0x01	; 1
    3718:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D0_PORT,D0_PIN,DIO_u8OUTPUT);
    371c:	82 e0       	ldi	r24, 0x02	; 2
    371e:	60 e0       	ldi	r22, 0x00	; 0
    3720:	41 e0       	ldi	r20, 0x01	; 1
    3722:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <DIO_enuSetPinDirection>

	//FUNCTION SET
	LCD_invidSendCommand(EIGHT_BIT_MODE);
    3726:	88 e3       	ldi	r24, 0x38	; 56
    3728:	0e 94 e8 20 	call	0x41d0	; 0x41d0 <LCD_invidSendCommand>

	Local_enuErrorState=ES_OK;
    372c:	fe 01       	movw	r30, r28
    372e:	e9 5b       	subi	r30, 0xB9	; 185
    3730:	ff 4f       	sbci	r31, 0xFF	; 255
    3732:	81 e0       	ldi	r24, 0x01	; 1
    3734:	80 83       	st	Z, r24
    3736:	80 e0       	ldi	r24, 0x00	; 0
    3738:	90 e0       	ldi	r25, 0x00	; 0
    373a:	a0 e8       	ldi	r26, 0x80	; 128
    373c:	bf e3       	ldi	r27, 0x3F	; 63
    373e:	8d ab       	std	Y+53, r24	; 0x35
    3740:	9e ab       	std	Y+54, r25	; 0x36
    3742:	af ab       	std	Y+55, r26	; 0x37
    3744:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3746:	6d a9       	ldd	r22, Y+53	; 0x35
    3748:	7e a9       	ldd	r23, Y+54	; 0x36
    374a:	8f a9       	ldd	r24, Y+55	; 0x37
    374c:	98 ad       	ldd	r25, Y+56	; 0x38
    374e:	20 e0       	ldi	r18, 0x00	; 0
    3750:	30 e0       	ldi	r19, 0x00	; 0
    3752:	4a ef       	ldi	r20, 0xFA	; 250
    3754:	54 e4       	ldi	r21, 0x44	; 68
    3756:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    375a:	dc 01       	movw	r26, r24
    375c:	cb 01       	movw	r24, r22
    375e:	89 ab       	std	Y+49, r24	; 0x31
    3760:	9a ab       	std	Y+50, r25	; 0x32
    3762:	ab ab       	std	Y+51, r26	; 0x33
    3764:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3766:	69 a9       	ldd	r22, Y+49	; 0x31
    3768:	7a a9       	ldd	r23, Y+50	; 0x32
    376a:	8b a9       	ldd	r24, Y+51	; 0x33
    376c:	9c a9       	ldd	r25, Y+52	; 0x34
    376e:	20 e0       	ldi	r18, 0x00	; 0
    3770:	30 e0       	ldi	r19, 0x00	; 0
    3772:	40 e8       	ldi	r20, 0x80	; 128
    3774:	5f e3       	ldi	r21, 0x3F	; 63
    3776:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    377a:	88 23       	and	r24, r24
    377c:	2c f4       	brge	.+10     	; 0x3788 <LCD_enuInit+0x1fc>
		__ticks = 1;
    377e:	81 e0       	ldi	r24, 0x01	; 1
    3780:	90 e0       	ldi	r25, 0x00	; 0
    3782:	98 ab       	std	Y+48, r25	; 0x30
    3784:	8f a7       	std	Y+47, r24	; 0x2f
    3786:	3f c0       	rjmp	.+126    	; 0x3806 <LCD_enuInit+0x27a>
	else if (__tmp > 65535)
    3788:	69 a9       	ldd	r22, Y+49	; 0x31
    378a:	7a a9       	ldd	r23, Y+50	; 0x32
    378c:	8b a9       	ldd	r24, Y+51	; 0x33
    378e:	9c a9       	ldd	r25, Y+52	; 0x34
    3790:	20 e0       	ldi	r18, 0x00	; 0
    3792:	3f ef       	ldi	r19, 0xFF	; 255
    3794:	4f e7       	ldi	r20, 0x7F	; 127
    3796:	57 e4       	ldi	r21, 0x47	; 71
    3798:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    379c:	18 16       	cp	r1, r24
    379e:	4c f5       	brge	.+82     	; 0x37f2 <LCD_enuInit+0x266>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    37a0:	6d a9       	ldd	r22, Y+53	; 0x35
    37a2:	7e a9       	ldd	r23, Y+54	; 0x36
    37a4:	8f a9       	ldd	r24, Y+55	; 0x37
    37a6:	98 ad       	ldd	r25, Y+56	; 0x38
    37a8:	20 e0       	ldi	r18, 0x00	; 0
    37aa:	30 e0       	ldi	r19, 0x00	; 0
    37ac:	40 e2       	ldi	r20, 0x20	; 32
    37ae:	51 e4       	ldi	r21, 0x41	; 65
    37b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37b4:	dc 01       	movw	r26, r24
    37b6:	cb 01       	movw	r24, r22
    37b8:	bc 01       	movw	r22, r24
    37ba:	cd 01       	movw	r24, r26
    37bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37c0:	dc 01       	movw	r26, r24
    37c2:	cb 01       	movw	r24, r22
    37c4:	98 ab       	std	Y+48, r25	; 0x30
    37c6:	8f a7       	std	Y+47, r24	; 0x2f
    37c8:	0f c0       	rjmp	.+30     	; 0x37e8 <LCD_enuInit+0x25c>
    37ca:	88 ec       	ldi	r24, 0xC8	; 200
    37cc:	90 e0       	ldi	r25, 0x00	; 0
    37ce:	9e a7       	std	Y+46, r25	; 0x2e
    37d0:	8d a7       	std	Y+45, r24	; 0x2d
    37d2:	8d a5       	ldd	r24, Y+45	; 0x2d
    37d4:	9e a5       	ldd	r25, Y+46	; 0x2e
    37d6:	01 97       	sbiw	r24, 0x01	; 1
    37d8:	f1 f7       	brne	.-4      	; 0x37d6 <LCD_enuInit+0x24a>
    37da:	9e a7       	std	Y+46, r25	; 0x2e
    37dc:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37de:	8f a5       	ldd	r24, Y+47	; 0x2f
    37e0:	98 a9       	ldd	r25, Y+48	; 0x30
    37e2:	01 97       	sbiw	r24, 0x01	; 1
    37e4:	98 ab       	std	Y+48, r25	; 0x30
    37e6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37e8:	8f a5       	ldd	r24, Y+47	; 0x2f
    37ea:	98 a9       	ldd	r25, Y+48	; 0x30
    37ec:	00 97       	sbiw	r24, 0x00	; 0
    37ee:	69 f7       	brne	.-38     	; 0x37ca <LCD_enuInit+0x23e>
    37f0:	14 c0       	rjmp	.+40     	; 0x381a <LCD_enuInit+0x28e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37f2:	69 a9       	ldd	r22, Y+49	; 0x31
    37f4:	7a a9       	ldd	r23, Y+50	; 0x32
    37f6:	8b a9       	ldd	r24, Y+51	; 0x33
    37f8:	9c a9       	ldd	r25, Y+52	; 0x34
    37fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37fe:	dc 01       	movw	r26, r24
    3800:	cb 01       	movw	r24, r22
    3802:	98 ab       	std	Y+48, r25	; 0x30
    3804:	8f a7       	std	Y+47, r24	; 0x2f
    3806:	8f a5       	ldd	r24, Y+47	; 0x2f
    3808:	98 a9       	ldd	r25, Y+48	; 0x30
    380a:	9c a7       	std	Y+44, r25	; 0x2c
    380c:	8b a7       	std	Y+43, r24	; 0x2b
    380e:	8b a5       	ldd	r24, Y+43	; 0x2b
    3810:	9c a5       	ldd	r25, Y+44	; 0x2c
    3812:	01 97       	sbiw	r24, 0x01	; 1
    3814:	f1 f7       	brne	.-4      	; 0x3812 <LCD_enuInit+0x286>
    3816:	9c a7       	std	Y+44, r25	; 0x2c
    3818:	8b a7       	std	Y+43, r24	; 0x2b
#endif

	_delay_ms(1);
	//display on/off
	//LCD_invidSendCommand(0x0f);
	LCD_invidSendCommand(DISPLAY_ON_CURSOR_BLINK);
    381a:	8e e0       	ldi	r24, 0x0E	; 14
    381c:	0e 94 e8 20 	call	0x41d0	; 0x41d0 <LCD_invidSendCommand>
    3820:	80 e0       	ldi	r24, 0x00	; 0
    3822:	90 e0       	ldi	r25, 0x00	; 0
    3824:	a0 e8       	ldi	r26, 0x80	; 128
    3826:	bf e3       	ldi	r27, 0x3F	; 63
    3828:	8f a3       	std	Y+39, r24	; 0x27
    382a:	98 a7       	std	Y+40, r25	; 0x28
    382c:	a9 a7       	std	Y+41, r26	; 0x29
    382e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3830:	6f a1       	ldd	r22, Y+39	; 0x27
    3832:	78 a5       	ldd	r23, Y+40	; 0x28
    3834:	89 a5       	ldd	r24, Y+41	; 0x29
    3836:	9a a5       	ldd	r25, Y+42	; 0x2a
    3838:	20 e0       	ldi	r18, 0x00	; 0
    383a:	30 e0       	ldi	r19, 0x00	; 0
    383c:	4a ef       	ldi	r20, 0xFA	; 250
    383e:	54 e4       	ldi	r21, 0x44	; 68
    3840:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3844:	dc 01       	movw	r26, r24
    3846:	cb 01       	movw	r24, r22
    3848:	8b a3       	std	Y+35, r24	; 0x23
    384a:	9c a3       	std	Y+36, r25	; 0x24
    384c:	ad a3       	std	Y+37, r26	; 0x25
    384e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3850:	6b a1       	ldd	r22, Y+35	; 0x23
    3852:	7c a1       	ldd	r23, Y+36	; 0x24
    3854:	8d a1       	ldd	r24, Y+37	; 0x25
    3856:	9e a1       	ldd	r25, Y+38	; 0x26
    3858:	20 e0       	ldi	r18, 0x00	; 0
    385a:	30 e0       	ldi	r19, 0x00	; 0
    385c:	40 e8       	ldi	r20, 0x80	; 128
    385e:	5f e3       	ldi	r21, 0x3F	; 63
    3860:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3864:	88 23       	and	r24, r24
    3866:	2c f4       	brge	.+10     	; 0x3872 <LCD_enuInit+0x2e6>
		__ticks = 1;
    3868:	81 e0       	ldi	r24, 0x01	; 1
    386a:	90 e0       	ldi	r25, 0x00	; 0
    386c:	9a a3       	std	Y+34, r25	; 0x22
    386e:	89 a3       	std	Y+33, r24	; 0x21
    3870:	3f c0       	rjmp	.+126    	; 0x38f0 <LCD_enuInit+0x364>
	else if (__tmp > 65535)
    3872:	6b a1       	ldd	r22, Y+35	; 0x23
    3874:	7c a1       	ldd	r23, Y+36	; 0x24
    3876:	8d a1       	ldd	r24, Y+37	; 0x25
    3878:	9e a1       	ldd	r25, Y+38	; 0x26
    387a:	20 e0       	ldi	r18, 0x00	; 0
    387c:	3f ef       	ldi	r19, 0xFF	; 255
    387e:	4f e7       	ldi	r20, 0x7F	; 127
    3880:	57 e4       	ldi	r21, 0x47	; 71
    3882:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3886:	18 16       	cp	r1, r24
    3888:	4c f5       	brge	.+82     	; 0x38dc <LCD_enuInit+0x350>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    388a:	6f a1       	ldd	r22, Y+39	; 0x27
    388c:	78 a5       	ldd	r23, Y+40	; 0x28
    388e:	89 a5       	ldd	r24, Y+41	; 0x29
    3890:	9a a5       	ldd	r25, Y+42	; 0x2a
    3892:	20 e0       	ldi	r18, 0x00	; 0
    3894:	30 e0       	ldi	r19, 0x00	; 0
    3896:	40 e2       	ldi	r20, 0x20	; 32
    3898:	51 e4       	ldi	r21, 0x41	; 65
    389a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    389e:	dc 01       	movw	r26, r24
    38a0:	cb 01       	movw	r24, r22
    38a2:	bc 01       	movw	r22, r24
    38a4:	cd 01       	movw	r24, r26
    38a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38aa:	dc 01       	movw	r26, r24
    38ac:	cb 01       	movw	r24, r22
    38ae:	9a a3       	std	Y+34, r25	; 0x22
    38b0:	89 a3       	std	Y+33, r24	; 0x21
    38b2:	0f c0       	rjmp	.+30     	; 0x38d2 <LCD_enuInit+0x346>
    38b4:	88 ec       	ldi	r24, 0xC8	; 200
    38b6:	90 e0       	ldi	r25, 0x00	; 0
    38b8:	98 a3       	std	Y+32, r25	; 0x20
    38ba:	8f 8f       	std	Y+31, r24	; 0x1f
    38bc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    38be:	98 a1       	ldd	r25, Y+32	; 0x20
    38c0:	01 97       	sbiw	r24, 0x01	; 1
    38c2:	f1 f7       	brne	.-4      	; 0x38c0 <LCD_enuInit+0x334>
    38c4:	98 a3       	std	Y+32, r25	; 0x20
    38c6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    38c8:	89 a1       	ldd	r24, Y+33	; 0x21
    38ca:	9a a1       	ldd	r25, Y+34	; 0x22
    38cc:	01 97       	sbiw	r24, 0x01	; 1
    38ce:	9a a3       	std	Y+34, r25	; 0x22
    38d0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    38d2:	89 a1       	ldd	r24, Y+33	; 0x21
    38d4:	9a a1       	ldd	r25, Y+34	; 0x22
    38d6:	00 97       	sbiw	r24, 0x00	; 0
    38d8:	69 f7       	brne	.-38     	; 0x38b4 <LCD_enuInit+0x328>
    38da:	14 c0       	rjmp	.+40     	; 0x3904 <LCD_enuInit+0x378>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    38dc:	6b a1       	ldd	r22, Y+35	; 0x23
    38de:	7c a1       	ldd	r23, Y+36	; 0x24
    38e0:	8d a1       	ldd	r24, Y+37	; 0x25
    38e2:	9e a1       	ldd	r25, Y+38	; 0x26
    38e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38e8:	dc 01       	movw	r26, r24
    38ea:	cb 01       	movw	r24, r22
    38ec:	9a a3       	std	Y+34, r25	; 0x22
    38ee:	89 a3       	std	Y+33, r24	; 0x21
    38f0:	89 a1       	ldd	r24, Y+33	; 0x21
    38f2:	9a a1       	ldd	r25, Y+34	; 0x22
    38f4:	9e 8f       	std	Y+30, r25	; 0x1e
    38f6:	8d 8f       	std	Y+29, r24	; 0x1d
    38f8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    38fa:	9e 8d       	ldd	r25, Y+30	; 0x1e
    38fc:	01 97       	sbiw	r24, 0x01	; 1
    38fe:	f1 f7       	brne	.-4      	; 0x38fc <LCD_enuInit+0x370>
    3900:	9e 8f       	std	Y+30, r25	; 0x1e
    3902:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	//display clear
	LCD_invidSendCommand(CLEAR_DISPLAY);
    3904:	81 e0       	ldi	r24, 0x01	; 1
    3906:	0e 94 e8 20 	call	0x41d0	; 0x41d0 <LCD_invidSendCommand>
    390a:	80 e0       	ldi	r24, 0x00	; 0
    390c:	90 e0       	ldi	r25, 0x00	; 0
    390e:	a0 e0       	ldi	r26, 0x00	; 0
    3910:	b0 e4       	ldi	r27, 0x40	; 64
    3912:	89 8f       	std	Y+25, r24	; 0x19
    3914:	9a 8f       	std	Y+26, r25	; 0x1a
    3916:	ab 8f       	std	Y+27, r26	; 0x1b
    3918:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    391a:	69 8d       	ldd	r22, Y+25	; 0x19
    391c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    391e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3920:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3922:	20 e0       	ldi	r18, 0x00	; 0
    3924:	30 e0       	ldi	r19, 0x00	; 0
    3926:	4a ef       	ldi	r20, 0xFA	; 250
    3928:	54 e4       	ldi	r21, 0x44	; 68
    392a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    392e:	dc 01       	movw	r26, r24
    3930:	cb 01       	movw	r24, r22
    3932:	8d 8b       	std	Y+21, r24	; 0x15
    3934:	9e 8b       	std	Y+22, r25	; 0x16
    3936:	af 8b       	std	Y+23, r26	; 0x17
    3938:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    393a:	6d 89       	ldd	r22, Y+21	; 0x15
    393c:	7e 89       	ldd	r23, Y+22	; 0x16
    393e:	8f 89       	ldd	r24, Y+23	; 0x17
    3940:	98 8d       	ldd	r25, Y+24	; 0x18
    3942:	20 e0       	ldi	r18, 0x00	; 0
    3944:	30 e0       	ldi	r19, 0x00	; 0
    3946:	40 e8       	ldi	r20, 0x80	; 128
    3948:	5f e3       	ldi	r21, 0x3F	; 63
    394a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    394e:	88 23       	and	r24, r24
    3950:	2c f4       	brge	.+10     	; 0x395c <LCD_enuInit+0x3d0>
		__ticks = 1;
    3952:	81 e0       	ldi	r24, 0x01	; 1
    3954:	90 e0       	ldi	r25, 0x00	; 0
    3956:	9c 8b       	std	Y+20, r25	; 0x14
    3958:	8b 8b       	std	Y+19, r24	; 0x13
    395a:	3f c0       	rjmp	.+126    	; 0x39da <LCD_enuInit+0x44e>
	else if (__tmp > 65535)
    395c:	6d 89       	ldd	r22, Y+21	; 0x15
    395e:	7e 89       	ldd	r23, Y+22	; 0x16
    3960:	8f 89       	ldd	r24, Y+23	; 0x17
    3962:	98 8d       	ldd	r25, Y+24	; 0x18
    3964:	20 e0       	ldi	r18, 0x00	; 0
    3966:	3f ef       	ldi	r19, 0xFF	; 255
    3968:	4f e7       	ldi	r20, 0x7F	; 127
    396a:	57 e4       	ldi	r21, 0x47	; 71
    396c:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3970:	18 16       	cp	r1, r24
    3972:	4c f5       	brge	.+82     	; 0x39c6 <LCD_enuInit+0x43a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3974:	69 8d       	ldd	r22, Y+25	; 0x19
    3976:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3978:	8b 8d       	ldd	r24, Y+27	; 0x1b
    397a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    397c:	20 e0       	ldi	r18, 0x00	; 0
    397e:	30 e0       	ldi	r19, 0x00	; 0
    3980:	40 e2       	ldi	r20, 0x20	; 32
    3982:	51 e4       	ldi	r21, 0x41	; 65
    3984:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3988:	dc 01       	movw	r26, r24
    398a:	cb 01       	movw	r24, r22
    398c:	bc 01       	movw	r22, r24
    398e:	cd 01       	movw	r24, r26
    3990:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3994:	dc 01       	movw	r26, r24
    3996:	cb 01       	movw	r24, r22
    3998:	9c 8b       	std	Y+20, r25	; 0x14
    399a:	8b 8b       	std	Y+19, r24	; 0x13
    399c:	0f c0       	rjmp	.+30     	; 0x39bc <LCD_enuInit+0x430>
    399e:	88 ec       	ldi	r24, 0xC8	; 200
    39a0:	90 e0       	ldi	r25, 0x00	; 0
    39a2:	9a 8b       	std	Y+18, r25	; 0x12
    39a4:	89 8b       	std	Y+17, r24	; 0x11
    39a6:	89 89       	ldd	r24, Y+17	; 0x11
    39a8:	9a 89       	ldd	r25, Y+18	; 0x12
    39aa:	01 97       	sbiw	r24, 0x01	; 1
    39ac:	f1 f7       	brne	.-4      	; 0x39aa <LCD_enuInit+0x41e>
    39ae:	9a 8b       	std	Y+18, r25	; 0x12
    39b0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39b2:	8b 89       	ldd	r24, Y+19	; 0x13
    39b4:	9c 89       	ldd	r25, Y+20	; 0x14
    39b6:	01 97       	sbiw	r24, 0x01	; 1
    39b8:	9c 8b       	std	Y+20, r25	; 0x14
    39ba:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39bc:	8b 89       	ldd	r24, Y+19	; 0x13
    39be:	9c 89       	ldd	r25, Y+20	; 0x14
    39c0:	00 97       	sbiw	r24, 0x00	; 0
    39c2:	69 f7       	brne	.-38     	; 0x399e <LCD_enuInit+0x412>
    39c4:	14 c0       	rjmp	.+40     	; 0x39ee <LCD_enuInit+0x462>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    39c6:	6d 89       	ldd	r22, Y+21	; 0x15
    39c8:	7e 89       	ldd	r23, Y+22	; 0x16
    39ca:	8f 89       	ldd	r24, Y+23	; 0x17
    39cc:	98 8d       	ldd	r25, Y+24	; 0x18
    39ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39d2:	dc 01       	movw	r26, r24
    39d4:	cb 01       	movw	r24, r22
    39d6:	9c 8b       	std	Y+20, r25	; 0x14
    39d8:	8b 8b       	std	Y+19, r24	; 0x13
    39da:	8b 89       	ldd	r24, Y+19	; 0x13
    39dc:	9c 89       	ldd	r25, Y+20	; 0x14
    39de:	98 8b       	std	Y+16, r25	; 0x10
    39e0:	8f 87       	std	Y+15, r24	; 0x0f
    39e2:	8f 85       	ldd	r24, Y+15	; 0x0f
    39e4:	98 89       	ldd	r25, Y+16	; 0x10
    39e6:	01 97       	sbiw	r24, 0x01	; 1
    39e8:	f1 f7       	brne	.-4      	; 0x39e6 <LCD_enuInit+0x45a>
    39ea:	98 8b       	std	Y+16, r25	; 0x10
    39ec:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	//Entry mode set
	LCD_invidSendCommand(INCREMENT_CURSOR_TO_RIGHT);
    39ee:	86 e0       	ldi	r24, 0x06	; 6
    39f0:	0e 94 e8 20 	call	0x41d0	; 0x41d0 <LCD_invidSendCommand>
    39f4:	80 e0       	ldi	r24, 0x00	; 0
    39f6:	90 e0       	ldi	r25, 0x00	; 0
    39f8:	a0 e8       	ldi	r26, 0x80	; 128
    39fa:	bf e3       	ldi	r27, 0x3F	; 63
    39fc:	8b 87       	std	Y+11, r24	; 0x0b
    39fe:	9c 87       	std	Y+12, r25	; 0x0c
    3a00:	ad 87       	std	Y+13, r26	; 0x0d
    3a02:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a04:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a06:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a08:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a0a:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a0c:	20 e0       	ldi	r18, 0x00	; 0
    3a0e:	30 e0       	ldi	r19, 0x00	; 0
    3a10:	4a ef       	ldi	r20, 0xFA	; 250
    3a12:	54 e4       	ldi	r21, 0x44	; 68
    3a14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a18:	dc 01       	movw	r26, r24
    3a1a:	cb 01       	movw	r24, r22
    3a1c:	8f 83       	std	Y+7, r24	; 0x07
    3a1e:	98 87       	std	Y+8, r25	; 0x08
    3a20:	a9 87       	std	Y+9, r26	; 0x09
    3a22:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3a24:	6f 81       	ldd	r22, Y+7	; 0x07
    3a26:	78 85       	ldd	r23, Y+8	; 0x08
    3a28:	89 85       	ldd	r24, Y+9	; 0x09
    3a2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a2c:	20 e0       	ldi	r18, 0x00	; 0
    3a2e:	30 e0       	ldi	r19, 0x00	; 0
    3a30:	40 e8       	ldi	r20, 0x80	; 128
    3a32:	5f e3       	ldi	r21, 0x3F	; 63
    3a34:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3a38:	88 23       	and	r24, r24
    3a3a:	2c f4       	brge	.+10     	; 0x3a46 <LCD_enuInit+0x4ba>
		__ticks = 1;
    3a3c:	81 e0       	ldi	r24, 0x01	; 1
    3a3e:	90 e0       	ldi	r25, 0x00	; 0
    3a40:	9e 83       	std	Y+6, r25	; 0x06
    3a42:	8d 83       	std	Y+5, r24	; 0x05
    3a44:	3f c0       	rjmp	.+126    	; 0x3ac4 <LCD_enuInit+0x538>
	else if (__tmp > 65535)
    3a46:	6f 81       	ldd	r22, Y+7	; 0x07
    3a48:	78 85       	ldd	r23, Y+8	; 0x08
    3a4a:	89 85       	ldd	r24, Y+9	; 0x09
    3a4c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a4e:	20 e0       	ldi	r18, 0x00	; 0
    3a50:	3f ef       	ldi	r19, 0xFF	; 255
    3a52:	4f e7       	ldi	r20, 0x7F	; 127
    3a54:	57 e4       	ldi	r21, 0x47	; 71
    3a56:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3a5a:	18 16       	cp	r1, r24
    3a5c:	4c f5       	brge	.+82     	; 0x3ab0 <LCD_enuInit+0x524>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a5e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a60:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a62:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a64:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a66:	20 e0       	ldi	r18, 0x00	; 0
    3a68:	30 e0       	ldi	r19, 0x00	; 0
    3a6a:	40 e2       	ldi	r20, 0x20	; 32
    3a6c:	51 e4       	ldi	r21, 0x41	; 65
    3a6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a72:	dc 01       	movw	r26, r24
    3a74:	cb 01       	movw	r24, r22
    3a76:	bc 01       	movw	r22, r24
    3a78:	cd 01       	movw	r24, r26
    3a7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a7e:	dc 01       	movw	r26, r24
    3a80:	cb 01       	movw	r24, r22
    3a82:	9e 83       	std	Y+6, r25	; 0x06
    3a84:	8d 83       	std	Y+5, r24	; 0x05
    3a86:	0f c0       	rjmp	.+30     	; 0x3aa6 <LCD_enuInit+0x51a>
    3a88:	88 ec       	ldi	r24, 0xC8	; 200
    3a8a:	90 e0       	ldi	r25, 0x00	; 0
    3a8c:	9c 83       	std	Y+4, r25	; 0x04
    3a8e:	8b 83       	std	Y+3, r24	; 0x03
    3a90:	8b 81       	ldd	r24, Y+3	; 0x03
    3a92:	9c 81       	ldd	r25, Y+4	; 0x04
    3a94:	01 97       	sbiw	r24, 0x01	; 1
    3a96:	f1 f7       	brne	.-4      	; 0x3a94 <LCD_enuInit+0x508>
    3a98:	9c 83       	std	Y+4, r25	; 0x04
    3a9a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a9c:	8d 81       	ldd	r24, Y+5	; 0x05
    3a9e:	9e 81       	ldd	r25, Y+6	; 0x06
    3aa0:	01 97       	sbiw	r24, 0x01	; 1
    3aa2:	9e 83       	std	Y+6, r25	; 0x06
    3aa4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3aa6:	8d 81       	ldd	r24, Y+5	; 0x05
    3aa8:	9e 81       	ldd	r25, Y+6	; 0x06
    3aaa:	00 97       	sbiw	r24, 0x00	; 0
    3aac:	69 f7       	brne	.-38     	; 0x3a88 <LCD_enuInit+0x4fc>
    3aae:	14 c0       	rjmp	.+40     	; 0x3ad8 <LCD_enuInit+0x54c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ab0:	6f 81       	ldd	r22, Y+7	; 0x07
    3ab2:	78 85       	ldd	r23, Y+8	; 0x08
    3ab4:	89 85       	ldd	r24, Y+9	; 0x09
    3ab6:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ab8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3abc:	dc 01       	movw	r26, r24
    3abe:	cb 01       	movw	r24, r22
    3ac0:	9e 83       	std	Y+6, r25	; 0x06
    3ac2:	8d 83       	std	Y+5, r24	; 0x05
    3ac4:	8d 81       	ldd	r24, Y+5	; 0x05
    3ac6:	9e 81       	ldd	r25, Y+6	; 0x06
    3ac8:	9a 83       	std	Y+2, r25	; 0x02
    3aca:	89 83       	std	Y+1, r24	; 0x01
    3acc:	89 81       	ldd	r24, Y+1	; 0x01
    3ace:	9a 81       	ldd	r25, Y+2	; 0x02
    3ad0:	01 97       	sbiw	r24, 0x01	; 1
    3ad2:	f1 f7       	brne	.-4      	; 0x3ad0 <LCD_enuInit+0x544>
    3ad4:	9a 83       	std	Y+2, r25	; 0x02
    3ad6:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(1);
	LCD_invidSendCommand(FORCE_CURSOR_START_FIRST_LINE);
    3ad8:	80 e8       	ldi	r24, 0x80	; 128
    3ada:	0e 94 e8 20 	call	0x41d0	; 0x41d0 <LCD_invidSendCommand>


	return Local_enuErrorState;
    3ade:	fe 01       	movw	r30, r28
    3ae0:	e9 5b       	subi	r30, 0xB9	; 185
    3ae2:	ff 4f       	sbci	r31, 0xFF	; 255
    3ae4:	80 81       	ld	r24, Z
}
    3ae6:	c9 5b       	subi	r28, 0xB9	; 185
    3ae8:	df 4f       	sbci	r29, 0xFF	; 255
    3aea:	0f b6       	in	r0, 0x3f	; 63
    3aec:	f8 94       	cli
    3aee:	de bf       	out	0x3e, r29	; 62
    3af0:	0f be       	out	0x3f, r0	; 63
    3af2:	cd bf       	out	0x3d, r28	; 61
    3af4:	cf 91       	pop	r28
    3af6:	df 91       	pop	r29
    3af8:	1f 91       	pop	r17
    3afa:	0f 91       	pop	r16
    3afc:	08 95       	ret

00003afe <LCD_enuDisplayChar>:

ES_t LCD_enuDisplayChar(u8 Copy_u8Data)
{
    3afe:	df 93       	push	r29
    3b00:	cf 93       	push	r28
    3b02:	00 d0       	rcall	.+0      	; 0x3b04 <LCD_enuDisplayChar+0x6>
    3b04:	cd b7       	in	r28, 0x3d	; 61
    3b06:	de b7       	in	r29, 0x3e	; 62
    3b08:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState=ES_NOK;
    3b0a:	19 82       	std	Y+1, r1	; 0x01

	//set RS as data
	Local_enuErrorState=DIO_enuSetPinValue(RS_PORT,RS_PIN,DIO_u8HIGH);
    3b0c:	83 e0       	ldi	r24, 0x03	; 3
    3b0e:	60 e0       	ldi	r22, 0x00	; 0
    3b10:	41 e0       	ldi	r20, 0x01	; 1
    3b12:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <DIO_enuSetPinValue>
    3b16:	89 83       	std	Y+1, r24	; 0x01

	LCD_vidLatch(Copy_u8Data);
    3b18:	8a 81       	ldd	r24, Y+2	; 0x02
    3b1a:	0e 94 8b 1f 	call	0x3f16	; 0x3f16 <LCD_vidLatch>

	return Local_enuErrorState;
    3b1e:	89 81       	ldd	r24, Y+1	; 0x01
}
    3b20:	0f 90       	pop	r0
    3b22:	0f 90       	pop	r0
    3b24:	cf 91       	pop	r28
    3b26:	df 91       	pop	r29
    3b28:	08 95       	ret

00003b2a <LCD_enuDisplayString>:

ES_t LCD_enuDisplayString(u8 *Copy_pu8Data)
{
    3b2a:	df 93       	push	r29
    3b2c:	cf 93       	push	r28
    3b2e:	00 d0       	rcall	.+0      	; 0x3b30 <LCD_enuDisplayString+0x6>
    3b30:	0f 92       	push	r0
    3b32:	cd b7       	in	r28, 0x3d	; 61
    3b34:	de b7       	in	r29, 0x3e	; 62
    3b36:	9b 83       	std	Y+3, r25	; 0x03
    3b38:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState=ES_NOK;
    3b3a:	19 82       	std	Y+1, r1	; 0x01
    3b3c:	13 c0       	rjmp	.+38     	; 0x3b64 <LCD_enuDisplayString+0x3a>
	{
		Local_enuErrorState=LCD_enuDisplayChar(Copy_pu8Data[Local_u8Counter]);
	}*/
	while(*Copy_pu8Data)
		{
			LCD_enuDisplayChar(*Copy_pu8Data);
    3b3e:	ea 81       	ldd	r30, Y+2	; 0x02
    3b40:	fb 81       	ldd	r31, Y+3	; 0x03
    3b42:	80 81       	ld	r24, Z
    3b44:	0e 94 7f 1d 	call	0x3afe	; 0x3afe <LCD_enuDisplayChar>
			if (!(*(Copy_pu8Data+1))) {Local_enuErrorState =ES_OK;}
    3b48:	8a 81       	ldd	r24, Y+2	; 0x02
    3b4a:	9b 81       	ldd	r25, Y+3	; 0x03
    3b4c:	fc 01       	movw	r30, r24
    3b4e:	31 96       	adiw	r30, 0x01	; 1
    3b50:	80 81       	ld	r24, Z
    3b52:	88 23       	and	r24, r24
    3b54:	11 f4       	brne	.+4      	; 0x3b5a <LCD_enuDisplayString+0x30>
    3b56:	81 e0       	ldi	r24, 0x01	; 1
    3b58:	89 83       	std	Y+1, r24	; 0x01
			Copy_pu8Data++;
    3b5a:	8a 81       	ldd	r24, Y+2	; 0x02
    3b5c:	9b 81       	ldd	r25, Y+3	; 0x03
    3b5e:	01 96       	adiw	r24, 0x01	; 1
    3b60:	9b 83       	std	Y+3, r25	; 0x03
    3b62:	8a 83       	std	Y+2, r24	; 0x02
	/*u8 Local_u8Counter;
	for(Local_u8Counter=0;Copy_pu8Data;Local_u8Counter++)
	{
		Local_enuErrorState=LCD_enuDisplayChar(Copy_pu8Data[Local_u8Counter]);
	}*/
	while(*Copy_pu8Data)
    3b64:	ea 81       	ldd	r30, Y+2	; 0x02
    3b66:	fb 81       	ldd	r31, Y+3	; 0x03
    3b68:	80 81       	ld	r24, Z
    3b6a:	88 23       	and	r24, r24
    3b6c:	41 f7       	brne	.-48     	; 0x3b3e <LCD_enuDisplayString+0x14>
			LCD_enuDisplayChar(*Copy_pu8Data);
			if (!(*(Copy_pu8Data+1))) {Local_enuErrorState =ES_OK;}
			Copy_pu8Data++;
		}

	return Local_enuErrorState;
    3b6e:	89 81       	ldd	r24, Y+1	; 0x01
}
    3b70:	0f 90       	pop	r0
    3b72:	0f 90       	pop	r0
    3b74:	0f 90       	pop	r0
    3b76:	cf 91       	pop	r28
    3b78:	df 91       	pop	r29
    3b7a:	08 95       	ret

00003b7c <LCD_enuSendCommand>:

ES_t LCD_enuSendCommand(u8 Copy_u8Command)
{
    3b7c:	df 93       	push	r29
    3b7e:	cf 93       	push	r28
    3b80:	00 d0       	rcall	.+0      	; 0x3b82 <LCD_enuSendCommand+0x6>
    3b82:	cd b7       	in	r28, 0x3d	; 61
    3b84:	de b7       	in	r29, 0x3e	; 62
    3b86:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState=ES_NOK;
    3b88:	19 82       	std	Y+1, r1	; 0x01

	//set RS as command
	Local_enuErrorState=DIO_enuSetPinValue(RS_PORT,RS_PIN,DIO_u8LOW);
    3b8a:	83 e0       	ldi	r24, 0x03	; 3
    3b8c:	60 e0       	ldi	r22, 0x00	; 0
    3b8e:	40 e0       	ldi	r20, 0x00	; 0
    3b90:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <DIO_enuSetPinValue>
    3b94:	89 83       	std	Y+1, r24	; 0x01

	LCD_vidLatch(Copy_u8Command);
    3b96:	8a 81       	ldd	r24, Y+2	; 0x02
    3b98:	0e 94 8b 1f 	call	0x3f16	; 0x3f16 <LCD_vidLatch>

	return Local_enuErrorState;
    3b9c:	89 81       	ldd	r24, Y+1	; 0x01
}
    3b9e:	0f 90       	pop	r0
    3ba0:	0f 90       	pop	r0
    3ba2:	cf 91       	pop	r28
    3ba4:	df 91       	pop	r29
    3ba6:	08 95       	ret

00003ba8 <LCD_enuGoToPosition>:

ES_t LCD_enuGoToPosition (u8 Copy_u8Row , u8 Copy_u8Col)
{
    3ba8:	df 93       	push	r29
    3baa:	cf 93       	push	r28
    3bac:	00 d0       	rcall	.+0      	; 0x3bae <LCD_enuGoToPosition+0x6>
    3bae:	00 d0       	rcall	.+0      	; 0x3bb0 <LCD_enuGoToPosition+0x8>
    3bb0:	0f 92       	push	r0
    3bb2:	cd b7       	in	r28, 0x3d	; 61
    3bb4:	de b7       	in	r29, 0x3e	; 62
    3bb6:	8c 83       	std	Y+4, r24	; 0x04
    3bb8:	6d 83       	std	Y+5, r22	; 0x05
	ES_t Local_enuErrorState=ES_NOK;
    3bba:	19 82       	std	Y+1, r1	; 0x01

	u8 Local_u8RowLocation [] = {FORCE_CURSOR_START_FIRST_LINE,FORCE_CURSOR_START_SECOND_LINE};
    3bbc:	80 e8       	ldi	r24, 0x80	; 128
    3bbe:	8a 83       	std	Y+2, r24	; 0x02
    3bc0:	80 ec       	ldi	r24, 0xC0	; 192
    3bc2:	8b 83       	std	Y+3, r24	; 0x03

	LCD_enuSendCommand(Local_u8RowLocation[Copy_u8Row-1]+(Copy_u8Col-1));
    3bc4:	8c 81       	ldd	r24, Y+4	; 0x04
    3bc6:	88 2f       	mov	r24, r24
    3bc8:	90 e0       	ldi	r25, 0x00	; 0
    3bca:	9c 01       	movw	r18, r24
    3bcc:	21 50       	subi	r18, 0x01	; 1
    3bce:	30 40       	sbci	r19, 0x00	; 0
    3bd0:	ce 01       	movw	r24, r28
    3bd2:	02 96       	adiw	r24, 0x02	; 2
    3bd4:	fc 01       	movw	r30, r24
    3bd6:	e2 0f       	add	r30, r18
    3bd8:	f3 1f       	adc	r31, r19
    3bda:	90 81       	ld	r25, Z
    3bdc:	8d 81       	ldd	r24, Y+5	; 0x05
    3bde:	89 0f       	add	r24, r25
    3be0:	81 50       	subi	r24, 0x01	; 1
    3be2:	0e 94 be 1d 	call	0x3b7c	; 0x3b7c <LCD_enuSendCommand>

	Local_enuErrorState=ES_OK;
    3be6:	81 e0       	ldi	r24, 0x01	; 1
    3be8:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    3bea:	89 81       	ldd	r24, Y+1	; 0x01
}
    3bec:	0f 90       	pop	r0
    3bee:	0f 90       	pop	r0
    3bf0:	0f 90       	pop	r0
    3bf2:	0f 90       	pop	r0
    3bf4:	0f 90       	pop	r0
    3bf6:	cf 91       	pop	r28
    3bf8:	df 91       	pop	r29
    3bfa:	08 95       	ret

00003bfc <LCD_enuDisplayNum>:

ES_t LCD_enuDisplayNum(u8 Copy_u8Num)
{
    3bfc:	df 93       	push	r29
    3bfe:	cf 93       	push	r28
    3c00:	cd b7       	in	r28, 0x3d	; 61
    3c02:	de b7       	in	r29, 0x3e	; 62
    3c04:	28 97       	sbiw	r28, 0x08	; 8
    3c06:	0f b6       	in	r0, 0x3f	; 63
    3c08:	f8 94       	cli
    3c0a:	de bf       	out	0x3e, r29	; 62
    3c0c:	0f be       	out	0x3f, r0	; 63
    3c0e:	cd bf       	out	0x3d, r28	; 61
    3c10:	88 87       	std	Y+8, r24	; 0x08
	ES_t Local_enuErrorState=ES_NOK;
    3c12:	1f 82       	std	Y+7, r1	; 0x07

	if(Copy_u8Num>=0 && Copy_u8Num<=9)
    3c14:	88 85       	ldd	r24, Y+8	; 0x08
    3c16:	8a 30       	cpi	r24, 0x0A	; 10
    3c18:	28 f4       	brcc	.+10     	; 0x3c24 <LCD_enuDisplayNum+0x28>
	{
		LCD_enuDisplayChar(0x30+Copy_u8Num);
    3c1a:	88 85       	ldd	r24, Y+8	; 0x08
    3c1c:	80 5d       	subi	r24, 0xD0	; 208
    3c1e:	0e 94 7f 1d 	call	0x3afe	; 0x3afe <LCD_enuDisplayChar>
    3c22:	86 c0       	rjmp	.+268    	; 0x3d30 <LCD_enuDisplayNum+0x134>
	}
	else
	{
		u8 Local_u8Iterator=0;
    3c24:	1e 82       	std	Y+6, r1	; 0x06
		u32 Local_u8Divisor=10;
    3c26:	8a e0       	ldi	r24, 0x0A	; 10
    3c28:	90 e0       	ldi	r25, 0x00	; 0
    3c2a:	a0 e0       	ldi	r26, 0x00	; 0
    3c2c:	b0 e0       	ldi	r27, 0x00	; 0
    3c2e:	8a 83       	std	Y+2, r24	; 0x02
    3c30:	9b 83       	std	Y+3, r25	; 0x03
    3c32:	ac 83       	std	Y+4, r26	; 0x04
    3c34:	bd 83       	std	Y+5, r27	; 0x05

		while(1)
		{
			if((Copy_u8Num/Local_u8Divisor)==0)
    3c36:	88 85       	ldd	r24, Y+8	; 0x08
    3c38:	88 2f       	mov	r24, r24
    3c3a:	90 e0       	ldi	r25, 0x00	; 0
    3c3c:	a0 e0       	ldi	r26, 0x00	; 0
    3c3e:	b0 e0       	ldi	r27, 0x00	; 0
    3c40:	2a 81       	ldd	r18, Y+2	; 0x02
    3c42:	3b 81       	ldd	r19, Y+3	; 0x03
    3c44:	4c 81       	ldd	r20, Y+4	; 0x04
    3c46:	5d 81       	ldd	r21, Y+5	; 0x05
    3c48:	bc 01       	movw	r22, r24
    3c4a:	cd 01       	movw	r24, r26
    3c4c:	0e 94 e3 24 	call	0x49c6	; 0x49c6 <__udivmodsi4>
    3c50:	da 01       	movw	r26, r20
    3c52:	c9 01       	movw	r24, r18
    3c54:	00 97       	sbiw	r24, 0x00	; 0
    3c56:	a1 05       	cpc	r26, r1
    3c58:	b1 05       	cpc	r27, r1
    3c5a:	09 f0       	breq	.+2      	; 0x3c5e <LCD_enuDisplayNum+0x62>
    3c5c:	53 c0       	rjmp	.+166    	; 0x3d04 <LCD_enuDisplayNum+0x108>
			{
				for(u8 Local_u8Iter=0; Local_u8Iter<=Local_u8Iterator ;Local_u8Iter++)
    3c5e:	19 82       	std	Y+1, r1	; 0x01
    3c60:	4b c0       	rjmp	.+150    	; 0x3cf8 <LCD_enuDisplayNum+0xfc>
				{
					Local_u8Divisor=Local_u8Divisor/10;
    3c62:	8a 81       	ldd	r24, Y+2	; 0x02
    3c64:	9b 81       	ldd	r25, Y+3	; 0x03
    3c66:	ac 81       	ldd	r26, Y+4	; 0x04
    3c68:	bd 81       	ldd	r27, Y+5	; 0x05
    3c6a:	2a e0       	ldi	r18, 0x0A	; 10
    3c6c:	30 e0       	ldi	r19, 0x00	; 0
    3c6e:	40 e0       	ldi	r20, 0x00	; 0
    3c70:	50 e0       	ldi	r21, 0x00	; 0
    3c72:	bc 01       	movw	r22, r24
    3c74:	cd 01       	movw	r24, r26
    3c76:	0e 94 e3 24 	call	0x49c6	; 0x49c6 <__udivmodsi4>
    3c7a:	da 01       	movw	r26, r20
    3c7c:	c9 01       	movw	r24, r18
    3c7e:	8a 83       	std	Y+2, r24	; 0x02
    3c80:	9b 83       	std	Y+3, r25	; 0x03
    3c82:	ac 83       	std	Y+4, r26	; 0x04
    3c84:	bd 83       	std	Y+5, r27	; 0x05
					if((Copy_u8Num/Local_u8Divisor)>=0  && (Copy_u8Num/Local_u8Divisor)<=9 )
    3c86:	88 85       	ldd	r24, Y+8	; 0x08
    3c88:	88 2f       	mov	r24, r24
    3c8a:	90 e0       	ldi	r25, 0x00	; 0
    3c8c:	a0 e0       	ldi	r26, 0x00	; 0
    3c8e:	b0 e0       	ldi	r27, 0x00	; 0
    3c90:	2a 81       	ldd	r18, Y+2	; 0x02
    3c92:	3b 81       	ldd	r19, Y+3	; 0x03
    3c94:	4c 81       	ldd	r20, Y+4	; 0x04
    3c96:	5d 81       	ldd	r21, Y+5	; 0x05
    3c98:	bc 01       	movw	r22, r24
    3c9a:	cd 01       	movw	r24, r26
    3c9c:	0e 94 e3 24 	call	0x49c6	; 0x49c6 <__udivmodsi4>
    3ca0:	da 01       	movw	r26, r20
    3ca2:	c9 01       	movw	r24, r18
    3ca4:	8a 30       	cpi	r24, 0x0A	; 10
    3ca6:	91 05       	cpc	r25, r1
    3ca8:	a1 05       	cpc	r26, r1
    3caa:	b1 05       	cpc	r27, r1
    3cac:	90 f4       	brcc	.+36     	; 0x3cd2 <LCD_enuDisplayNum+0xd6>
					{
						//LCD_enuDisplayChar(Array_u8Num[(Copy_u8Num/Local_u8Divisor)]);
						//LCD_enuDisplayChar('0'+(Copy_u8Num/Local_u8Divisor));
						LCD_enuDisplayChar(0x30+(Copy_u8Num/Local_u8Divisor));
    3cae:	88 85       	ldd	r24, Y+8	; 0x08
    3cb0:	88 2f       	mov	r24, r24
    3cb2:	90 e0       	ldi	r25, 0x00	; 0
    3cb4:	a0 e0       	ldi	r26, 0x00	; 0
    3cb6:	b0 e0       	ldi	r27, 0x00	; 0
    3cb8:	2a 81       	ldd	r18, Y+2	; 0x02
    3cba:	3b 81       	ldd	r19, Y+3	; 0x03
    3cbc:	4c 81       	ldd	r20, Y+4	; 0x04
    3cbe:	5d 81       	ldd	r21, Y+5	; 0x05
    3cc0:	bc 01       	movw	r22, r24
    3cc2:	cd 01       	movw	r24, r26
    3cc4:	0e 94 e3 24 	call	0x49c6	; 0x49c6 <__udivmodsi4>
    3cc8:	da 01       	movw	r26, r20
    3cca:	c9 01       	movw	r24, r18
    3ccc:	80 5d       	subi	r24, 0xD0	; 208
    3cce:	0e 94 7f 1d 	call	0x3afe	; 0x3afe <LCD_enuDisplayChar>
					}
					Copy_u8Num= Copy_u8Num % Local_u8Divisor;
    3cd2:	88 85       	ldd	r24, Y+8	; 0x08
    3cd4:	88 2f       	mov	r24, r24
    3cd6:	90 e0       	ldi	r25, 0x00	; 0
    3cd8:	a0 e0       	ldi	r26, 0x00	; 0
    3cda:	b0 e0       	ldi	r27, 0x00	; 0
    3cdc:	2a 81       	ldd	r18, Y+2	; 0x02
    3cde:	3b 81       	ldd	r19, Y+3	; 0x03
    3ce0:	4c 81       	ldd	r20, Y+4	; 0x04
    3ce2:	5d 81       	ldd	r21, Y+5	; 0x05
    3ce4:	bc 01       	movw	r22, r24
    3ce6:	cd 01       	movw	r24, r26
    3ce8:	0e 94 e3 24 	call	0x49c6	; 0x49c6 <__udivmodsi4>
    3cec:	dc 01       	movw	r26, r24
    3cee:	cb 01       	movw	r24, r22
    3cf0:	88 87       	std	Y+8, r24	; 0x08

		while(1)
		{
			if((Copy_u8Num/Local_u8Divisor)==0)
			{
				for(u8 Local_u8Iter=0; Local_u8Iter<=Local_u8Iterator ;Local_u8Iter++)
    3cf2:	89 81       	ldd	r24, Y+1	; 0x01
    3cf4:	8f 5f       	subi	r24, 0xFF	; 255
    3cf6:	89 83       	std	Y+1, r24	; 0x01
    3cf8:	99 81       	ldd	r25, Y+1	; 0x01
    3cfa:	8e 81       	ldd	r24, Y+6	; 0x06
    3cfc:	89 17       	cp	r24, r25
    3cfe:	08 f0       	brcs	.+2      	; 0x3d02 <LCD_enuDisplayNum+0x106>
    3d00:	b0 cf       	rjmp	.-160    	; 0x3c62 <LCD_enuDisplayNum+0x66>
    3d02:	16 c0       	rjmp	.+44     	; 0x3d30 <LCD_enuDisplayNum+0x134>
				}
				break;
			}
			else
			{
				Local_u8Divisor=Local_u8Divisor*10;
    3d04:	8a 81       	ldd	r24, Y+2	; 0x02
    3d06:	9b 81       	ldd	r25, Y+3	; 0x03
    3d08:	ac 81       	ldd	r26, Y+4	; 0x04
    3d0a:	bd 81       	ldd	r27, Y+5	; 0x05
    3d0c:	2a e0       	ldi	r18, 0x0A	; 10
    3d0e:	30 e0       	ldi	r19, 0x00	; 0
    3d10:	40 e0       	ldi	r20, 0x00	; 0
    3d12:	50 e0       	ldi	r21, 0x00	; 0
    3d14:	bc 01       	movw	r22, r24
    3d16:	cd 01       	movw	r24, r26
    3d18:	0e 94 b0 24 	call	0x4960	; 0x4960 <__mulsi3>
    3d1c:	dc 01       	movw	r26, r24
    3d1e:	cb 01       	movw	r24, r22
    3d20:	8a 83       	std	Y+2, r24	; 0x02
    3d22:	9b 83       	std	Y+3, r25	; 0x03
    3d24:	ac 83       	std	Y+4, r26	; 0x04
    3d26:	bd 83       	std	Y+5, r27	; 0x05
				Local_u8Iterator++;
    3d28:	8e 81       	ldd	r24, Y+6	; 0x06
    3d2a:	8f 5f       	subi	r24, 0xFF	; 255
    3d2c:	8e 83       	std	Y+6, r24	; 0x06
    3d2e:	83 cf       	rjmp	.-250    	; 0x3c36 <LCD_enuDisplayNum+0x3a>
			}
		}
	}

		Local_enuErrorState=ES_OK;
    3d30:	81 e0       	ldi	r24, 0x01	; 1
    3d32:	8f 83       	std	Y+7, r24	; 0x07

		return Local_enuErrorState;
    3d34:	8f 81       	ldd	r24, Y+7	; 0x07
}
    3d36:	28 96       	adiw	r28, 0x08	; 8
    3d38:	0f b6       	in	r0, 0x3f	; 63
    3d3a:	f8 94       	cli
    3d3c:	de bf       	out	0x3e, r29	; 62
    3d3e:	0f be       	out	0x3f, r0	; 63
    3d40:	cd bf       	out	0x3d, r28	; 61
    3d42:	cf 91       	pop	r28
    3d44:	df 91       	pop	r29
    3d46:	08 95       	ret

00003d48 <LCD_enuSendSpecialNumber>:

ES_t LCD_enuSendSpecialNumber(u32 Copy_u32Number)
{
    3d48:	df 93       	push	r29
    3d4a:	cf 93       	push	r28
    3d4c:	cd b7       	in	r28, 0x3d	; 61
    3d4e:	de b7       	in	r29, 0x3e	; 62
    3d50:	2f 97       	sbiw	r28, 0x0f	; 15
    3d52:	0f b6       	in	r0, 0x3f	; 63
    3d54:	f8 94       	cli
    3d56:	de bf       	out	0x3e, r29	; 62
    3d58:	0f be       	out	0x3f, r0	; 63
    3d5a:	cd bf       	out	0x3d, r28	; 61
    3d5c:	6c 87       	std	Y+12, r22	; 0x0c
    3d5e:	7d 87       	std	Y+13, r23	; 0x0d
    3d60:	8e 87       	std	Y+14, r24	; 0x0e
    3d62:	9f 87       	std	Y+15, r25	; 0x0f
	ES_t error_enuState = ES_NOK;
    3d64:	1b 86       	std	Y+11, r1	; 0x0b

	u8 Local_u8Iteration , Local_u8NumOfDigits=LCD_ZERO;
    3d66:	19 86       	std	Y+9, r1	; 0x09
	u32 Local_u32Reminder , Local_u8PowerTen ;
	Local_u32Reminder=Copy_u32Number;
    3d68:	8c 85       	ldd	r24, Y+12	; 0x0c
    3d6a:	9d 85       	ldd	r25, Y+13	; 0x0d
    3d6c:	ae 85       	ldd	r26, Y+14	; 0x0e
    3d6e:	bf 85       	ldd	r27, Y+15	; 0x0f
    3d70:	8d 83       	std	Y+5, r24	; 0x05
    3d72:	9e 83       	std	Y+6, r25	; 0x06
    3d74:	af 83       	std	Y+7, r26	; 0x07
    3d76:	b8 87       	std	Y+8, r27	; 0x08

	for (Local_u8Iteration = LCD_ONE ;  ; Local_u8Iteration++)
    3d78:	81 e0       	ldi	r24, 0x01	; 1
    3d7a:	8a 87       	std	Y+10, r24	; 0x0a
	{
		Copy_u32Number=Local_u32Reminder;
    3d7c:	8d 81       	ldd	r24, Y+5	; 0x05
    3d7e:	9e 81       	ldd	r25, Y+6	; 0x06
    3d80:	af 81       	ldd	r26, Y+7	; 0x07
    3d82:	b8 85       	ldd	r27, Y+8	; 0x08
    3d84:	8c 87       	std	Y+12, r24	; 0x0c
    3d86:	9d 87       	std	Y+13, r25	; 0x0d
    3d88:	ae 87       	std	Y+14, r26	; 0x0e
    3d8a:	bf 87       	std	Y+15, r27	; 0x0f
		Local_u8PowerTen=POWER_u32PowerNumbers( LCD_TEN , Local_u8Iteration);
    3d8c:	6a e0       	ldi	r22, 0x0A	; 10
    3d8e:	70 e0       	ldi	r23, 0x00	; 0
    3d90:	80 e0       	ldi	r24, 0x00	; 0
    3d92:	90 e0       	ldi	r25, 0x00	; 0
    3d94:	4a 85       	ldd	r20, Y+10	; 0x0a
    3d96:	0e 94 49 1f 	call	0x3e92	; 0x3e92 <POWER_u32PowerNumbers>
    3d9a:	dc 01       	movw	r26, r24
    3d9c:	cb 01       	movw	r24, r22
    3d9e:	89 83       	std	Y+1, r24	; 0x01
    3da0:	9a 83       	std	Y+2, r25	; 0x02
    3da2:	ab 83       	std	Y+3, r26	; 0x03
    3da4:	bc 83       	std	Y+4, r27	; 0x04
		Copy_u32Number /= Local_u8PowerTen;
    3da6:	8c 85       	ldd	r24, Y+12	; 0x0c
    3da8:	9d 85       	ldd	r25, Y+13	; 0x0d
    3daa:	ae 85       	ldd	r26, Y+14	; 0x0e
    3dac:	bf 85       	ldd	r27, Y+15	; 0x0f
    3dae:	29 81       	ldd	r18, Y+1	; 0x01
    3db0:	3a 81       	ldd	r19, Y+2	; 0x02
    3db2:	4b 81       	ldd	r20, Y+3	; 0x03
    3db4:	5c 81       	ldd	r21, Y+4	; 0x04
    3db6:	bc 01       	movw	r22, r24
    3db8:	cd 01       	movw	r24, r26
    3dba:	0e 94 e3 24 	call	0x49c6	; 0x49c6 <__udivmodsi4>
    3dbe:	da 01       	movw	r26, r20
    3dc0:	c9 01       	movw	r24, r18
    3dc2:	8c 87       	std	Y+12, r24	; 0x0c
    3dc4:	9d 87       	std	Y+13, r25	; 0x0d
    3dc6:	ae 87       	std	Y+14, r26	; 0x0e
    3dc8:	bf 87       	std	Y+15, r27	; 0x0f

		if (! (Copy_u32Number))
    3dca:	8c 85       	ldd	r24, Y+12	; 0x0c
    3dcc:	9d 85       	ldd	r25, Y+13	; 0x0d
    3dce:	ae 85       	ldd	r26, Y+14	; 0x0e
    3dd0:	bf 85       	ldd	r27, Y+15	; 0x0f
    3dd2:	00 97       	sbiw	r24, 0x00	; 0
    3dd4:	a1 05       	cpc	r26, r1
    3dd6:	b1 05       	cpc	r27, r1
    3dd8:	29 f4       	brne	.+10     	; 0x3de4 <LCD_enuSendSpecialNumber+0x9c>
		{
			Local_u8NumOfDigits=Local_u8Iteration;
    3dda:	8a 85       	ldd	r24, Y+10	; 0x0a
    3ddc:	89 87       	std	Y+9, r24	; 0x09
			break;
		}
	}

	for (Local_u8Iteration = Local_u8NumOfDigits ; Local_u8Iteration > LCD_ZERO ;Local_u8Iteration--)
    3dde:	89 85       	ldd	r24, Y+9	; 0x09
    3de0:	8a 87       	std	Y+10, r24	; 0x0a
    3de2:	47 c0       	rjmp	.+142    	; 0x3e72 <LCD_enuSendSpecialNumber+0x12a>

	u8 Local_u8Iteration , Local_u8NumOfDigits=LCD_ZERO;
	u32 Local_u32Reminder , Local_u8PowerTen ;
	Local_u32Reminder=Copy_u32Number;

	for (Local_u8Iteration = LCD_ONE ;  ; Local_u8Iteration++)
    3de4:	8a 85       	ldd	r24, Y+10	; 0x0a
    3de6:	8f 5f       	subi	r24, 0xFF	; 255
    3de8:	8a 87       	std	Y+10, r24	; 0x0a
    3dea:	c8 cf       	rjmp	.-112    	; 0x3d7c <LCD_enuSendSpecialNumber+0x34>
		}
	}

	for (Local_u8Iteration = Local_u8NumOfDigits ; Local_u8Iteration > LCD_ZERO ;Local_u8Iteration--)
	{
		Copy_u32Number=Local_u32Reminder;
    3dec:	8d 81       	ldd	r24, Y+5	; 0x05
    3dee:	9e 81       	ldd	r25, Y+6	; 0x06
    3df0:	af 81       	ldd	r26, Y+7	; 0x07
    3df2:	b8 85       	ldd	r27, Y+8	; 0x08
    3df4:	8c 87       	std	Y+12, r24	; 0x0c
    3df6:	9d 87       	std	Y+13, r25	; 0x0d
    3df8:	ae 87       	std	Y+14, r26	; 0x0e
    3dfa:	bf 87       	std	Y+15, r27	; 0x0f
		Local_u8PowerTen=POWER_u32PowerNumbers( LCD_TEN , Local_u8Iteration - LCD_ONE);
    3dfc:	8a 85       	ldd	r24, Y+10	; 0x0a
    3dfe:	28 2f       	mov	r18, r24
    3e00:	21 50       	subi	r18, 0x01	; 1
    3e02:	6a e0       	ldi	r22, 0x0A	; 10
    3e04:	70 e0       	ldi	r23, 0x00	; 0
    3e06:	80 e0       	ldi	r24, 0x00	; 0
    3e08:	90 e0       	ldi	r25, 0x00	; 0
    3e0a:	42 2f       	mov	r20, r18
    3e0c:	0e 94 49 1f 	call	0x3e92	; 0x3e92 <POWER_u32PowerNumbers>
    3e10:	dc 01       	movw	r26, r24
    3e12:	cb 01       	movw	r24, r22
    3e14:	89 83       	std	Y+1, r24	; 0x01
    3e16:	9a 83       	std	Y+2, r25	; 0x02
    3e18:	ab 83       	std	Y+3, r26	; 0x03
    3e1a:	bc 83       	std	Y+4, r27	; 0x04

		Local_u32Reminder  %= Local_u8PowerTen;
    3e1c:	8d 81       	ldd	r24, Y+5	; 0x05
    3e1e:	9e 81       	ldd	r25, Y+6	; 0x06
    3e20:	af 81       	ldd	r26, Y+7	; 0x07
    3e22:	b8 85       	ldd	r27, Y+8	; 0x08
    3e24:	29 81       	ldd	r18, Y+1	; 0x01
    3e26:	3a 81       	ldd	r19, Y+2	; 0x02
    3e28:	4b 81       	ldd	r20, Y+3	; 0x03
    3e2a:	5c 81       	ldd	r21, Y+4	; 0x04
    3e2c:	bc 01       	movw	r22, r24
    3e2e:	cd 01       	movw	r24, r26
    3e30:	0e 94 e3 24 	call	0x49c6	; 0x49c6 <__udivmodsi4>
    3e34:	dc 01       	movw	r26, r24
    3e36:	cb 01       	movw	r24, r22
    3e38:	8d 83       	std	Y+5, r24	; 0x05
    3e3a:	9e 83       	std	Y+6, r25	; 0x06
    3e3c:	af 83       	std	Y+7, r26	; 0x07
    3e3e:	b8 87       	std	Y+8, r27	; 0x08

		Copy_u32Number /= (Local_u8PowerTen);
    3e40:	8c 85       	ldd	r24, Y+12	; 0x0c
    3e42:	9d 85       	ldd	r25, Y+13	; 0x0d
    3e44:	ae 85       	ldd	r26, Y+14	; 0x0e
    3e46:	bf 85       	ldd	r27, Y+15	; 0x0f
    3e48:	29 81       	ldd	r18, Y+1	; 0x01
    3e4a:	3a 81       	ldd	r19, Y+2	; 0x02
    3e4c:	4b 81       	ldd	r20, Y+3	; 0x03
    3e4e:	5c 81       	ldd	r21, Y+4	; 0x04
    3e50:	bc 01       	movw	r22, r24
    3e52:	cd 01       	movw	r24, r26
    3e54:	0e 94 e3 24 	call	0x49c6	; 0x49c6 <__udivmodsi4>
    3e58:	da 01       	movw	r26, r20
    3e5a:	c9 01       	movw	r24, r18
    3e5c:	8c 87       	std	Y+12, r24	; 0x0c
    3e5e:	9d 87       	std	Y+13, r25	; 0x0d
    3e60:	ae 87       	std	Y+14, r26	; 0x0e
    3e62:	bf 87       	std	Y+15, r27	; 0x0f

		LCD_enuDisplayChar(Copy_u32Number+'0');
    3e64:	8c 85       	ldd	r24, Y+12	; 0x0c
    3e66:	80 5d       	subi	r24, 0xD0	; 208
    3e68:	0e 94 7f 1d 	call	0x3afe	; 0x3afe <LCD_enuDisplayChar>
			Local_u8NumOfDigits=Local_u8Iteration;
			break;
		}
	}

	for (Local_u8Iteration = Local_u8NumOfDigits ; Local_u8Iteration > LCD_ZERO ;Local_u8Iteration--)
    3e6c:	8a 85       	ldd	r24, Y+10	; 0x0a
    3e6e:	81 50       	subi	r24, 0x01	; 1
    3e70:	8a 87       	std	Y+10, r24	; 0x0a
    3e72:	8a 85       	ldd	r24, Y+10	; 0x0a
    3e74:	88 23       	and	r24, r24
    3e76:	09 f0       	breq	.+2      	; 0x3e7a <LCD_enuSendSpecialNumber+0x132>
    3e78:	b9 cf       	rjmp	.-142    	; 0x3dec <LCD_enuSendSpecialNumber+0xa4>

		Copy_u32Number /= (Local_u8PowerTen);

		LCD_enuDisplayChar(Copy_u32Number+'0');
	}
	error_enuState = ES_OK;
    3e7a:	81 e0       	ldi	r24, 0x01	; 1
    3e7c:	8b 87       	std	Y+11, r24	; 0x0b

	return error_enuState;
    3e7e:	8b 85       	ldd	r24, Y+11	; 0x0b
}
    3e80:	2f 96       	adiw	r28, 0x0f	; 15
    3e82:	0f b6       	in	r0, 0x3f	; 63
    3e84:	f8 94       	cli
    3e86:	de bf       	out	0x3e, r29	; 62
    3e88:	0f be       	out	0x3f, r0	; 63
    3e8a:	cd bf       	out	0x3d, r28	; 61
    3e8c:	cf 91       	pop	r28
    3e8e:	df 91       	pop	r29
    3e90:	08 95       	ret

00003e92 <POWER_u32PowerNumbers>:

u32 POWER_u32PowerNumbers(u32 Copy_u32Number , u8 Copy_u8Power)
{
    3e92:	df 93       	push	r29
    3e94:	cf 93       	push	r28
    3e96:	cd b7       	in	r28, 0x3d	; 61
    3e98:	de b7       	in	r29, 0x3e	; 62
    3e9a:	2a 97       	sbiw	r28, 0x0a	; 10
    3e9c:	0f b6       	in	r0, 0x3f	; 63
    3e9e:	f8 94       	cli
    3ea0:	de bf       	out	0x3e, r29	; 62
    3ea2:	0f be       	out	0x3f, r0	; 63
    3ea4:	cd bf       	out	0x3d, r28	; 61
    3ea6:	6e 83       	std	Y+6, r22	; 0x06
    3ea8:	7f 83       	std	Y+7, r23	; 0x07
    3eaa:	88 87       	std	Y+8, r24	; 0x08
    3eac:	99 87       	std	Y+9, r25	; 0x09
    3eae:	4a 87       	std	Y+10, r20	; 0x0a
	u32 Local_u32Result = LCD_ONE ;
    3eb0:	81 e0       	ldi	r24, 0x01	; 1
    3eb2:	90 e0       	ldi	r25, 0x00	; 0
    3eb4:	a0 e0       	ldi	r26, 0x00	; 0
    3eb6:	b0 e0       	ldi	r27, 0x00	; 0
    3eb8:	8a 83       	std	Y+2, r24	; 0x02
    3eba:	9b 83       	std	Y+3, r25	; 0x03
    3ebc:	ac 83       	std	Y+4, r26	; 0x04
    3ebe:	bd 83       	std	Y+5, r27	; 0x05
	u8 Local_u8Iteration ;

	for (Local_u8Iteration = LCD_ONE ; Local_u8Iteration <= Copy_u8Power ; Local_u8Iteration++)
    3ec0:	81 e0       	ldi	r24, 0x01	; 1
    3ec2:	89 83       	std	Y+1, r24	; 0x01
    3ec4:	15 c0       	rjmp	.+42     	; 0x3ef0 <POWER_u32PowerNumbers+0x5e>
	{
		Local_u32Result *=Copy_u32Number ;
    3ec6:	8a 81       	ldd	r24, Y+2	; 0x02
    3ec8:	9b 81       	ldd	r25, Y+3	; 0x03
    3eca:	ac 81       	ldd	r26, Y+4	; 0x04
    3ecc:	bd 81       	ldd	r27, Y+5	; 0x05
    3ece:	2e 81       	ldd	r18, Y+6	; 0x06
    3ed0:	3f 81       	ldd	r19, Y+7	; 0x07
    3ed2:	48 85       	ldd	r20, Y+8	; 0x08
    3ed4:	59 85       	ldd	r21, Y+9	; 0x09
    3ed6:	bc 01       	movw	r22, r24
    3ed8:	cd 01       	movw	r24, r26
    3eda:	0e 94 b0 24 	call	0x4960	; 0x4960 <__mulsi3>
    3ede:	dc 01       	movw	r26, r24
    3ee0:	cb 01       	movw	r24, r22
    3ee2:	8a 83       	std	Y+2, r24	; 0x02
    3ee4:	9b 83       	std	Y+3, r25	; 0x03
    3ee6:	ac 83       	std	Y+4, r26	; 0x04
    3ee8:	bd 83       	std	Y+5, r27	; 0x05
u32 POWER_u32PowerNumbers(u32 Copy_u32Number , u8 Copy_u8Power)
{
	u32 Local_u32Result = LCD_ONE ;
	u8 Local_u8Iteration ;

	for (Local_u8Iteration = LCD_ONE ; Local_u8Iteration <= Copy_u8Power ; Local_u8Iteration++)
    3eea:	89 81       	ldd	r24, Y+1	; 0x01
    3eec:	8f 5f       	subi	r24, 0xFF	; 255
    3eee:	89 83       	std	Y+1, r24	; 0x01
    3ef0:	99 81       	ldd	r25, Y+1	; 0x01
    3ef2:	8a 85       	ldd	r24, Y+10	; 0x0a
    3ef4:	89 17       	cp	r24, r25
    3ef6:	38 f7       	brcc	.-50     	; 0x3ec6 <POWER_u32PowerNumbers+0x34>
	{
		Local_u32Result *=Copy_u32Number ;
	}

	return Local_u32Result ;
    3ef8:	8a 81       	ldd	r24, Y+2	; 0x02
    3efa:	9b 81       	ldd	r25, Y+3	; 0x03
    3efc:	ac 81       	ldd	r26, Y+4	; 0x04
    3efe:	bd 81       	ldd	r27, Y+5	; 0x05
}
    3f00:	bc 01       	movw	r22, r24
    3f02:	cd 01       	movw	r24, r26
    3f04:	2a 96       	adiw	r28, 0x0a	; 10
    3f06:	0f b6       	in	r0, 0x3f	; 63
    3f08:	f8 94       	cli
    3f0a:	de bf       	out	0x3e, r29	; 62
    3f0c:	0f be       	out	0x3f, r0	; 63
    3f0e:	cd bf       	out	0x3d, r28	; 61
    3f10:	cf 91       	pop	r28
    3f12:	df 91       	pop	r29
    3f14:	08 95       	ret

00003f16 <LCD_vidLatch>:


static void LCD_vidLatch(u8 Copy_u8Data)
{
    3f16:	df 93       	push	r29
    3f18:	cf 93       	push	r28
    3f1a:	cd b7       	in	r28, 0x3d	; 61
    3f1c:	de b7       	in	r29, 0x3e	; 62
    3f1e:	6d 97       	sbiw	r28, 0x1d	; 29
    3f20:	0f b6       	in	r0, 0x3f	; 63
    3f22:	f8 94       	cli
    3f24:	de bf       	out	0x3e, r29	; 62
    3f26:	0f be       	out	0x3f, r0	; 63
    3f28:	cd bf       	out	0x3d, r28	; 61
    3f2a:	8d 8f       	std	Y+29, r24	; 0x1d
	//set EN as low
		DIO_enuSetPinValue(EN_PORT,EN_PIN,DIO_u8LOW);
    3f2c:	83 e0       	ldi	r24, 0x03	; 3
    3f2e:	63 e0       	ldi	r22, 0x03	; 3
    3f30:	40 e0       	ldi	r20, 0x00	; 0
    3f32:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <DIO_enuSetPinValue>
		//set RW as write operation
		DIO_enuSetPinValue(RW_PORT,RW_PIN,DIO_u8LOW);
    3f36:	83 e0       	ldi	r24, 0x03	; 3
    3f38:	61 e0       	ldi	r22, 0x01	; 1
    3f3a:	40 e0       	ldi	r20, 0x00	; 0
    3f3c:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <DIO_enuSetPinValue>
		//write data
		DIO_enuSetPinValue(D7_PORT,D7_PIN,((Copy_u8Data>>7)&LCD_MASK_BIT));
    3f40:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3f42:	98 2f       	mov	r25, r24
    3f44:	99 1f       	adc	r25, r25
    3f46:	99 27       	eor	r25, r25
    3f48:	99 1f       	adc	r25, r25
    3f4a:	82 e0       	ldi	r24, 0x02	; 2
    3f4c:	67 e0       	ldi	r22, 0x07	; 7
    3f4e:	49 2f       	mov	r20, r25
    3f50:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(D6_PORT,D6_PIN,((Copy_u8Data>>6)&LCD_MASK_BIT));
    3f54:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3f56:	82 95       	swap	r24
    3f58:	86 95       	lsr	r24
    3f5a:	86 95       	lsr	r24
    3f5c:	83 70       	andi	r24, 0x03	; 3
    3f5e:	98 2f       	mov	r25, r24
    3f60:	91 70       	andi	r25, 0x01	; 1
    3f62:	82 e0       	ldi	r24, 0x02	; 2
    3f64:	66 e0       	ldi	r22, 0x06	; 6
    3f66:	49 2f       	mov	r20, r25
    3f68:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(D5_PORT,D5_PIN,((Copy_u8Data>>5)&LCD_MASK_BIT));
    3f6c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3f6e:	82 95       	swap	r24
    3f70:	86 95       	lsr	r24
    3f72:	87 70       	andi	r24, 0x07	; 7
    3f74:	98 2f       	mov	r25, r24
    3f76:	91 70       	andi	r25, 0x01	; 1
    3f78:	82 e0       	ldi	r24, 0x02	; 2
    3f7a:	65 e0       	ldi	r22, 0x05	; 5
    3f7c:	49 2f       	mov	r20, r25
    3f7e:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(D4_PORT,D4_PIN,((Copy_u8Data>>4)&LCD_MASK_BIT));
    3f82:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3f84:	82 95       	swap	r24
    3f86:	8f 70       	andi	r24, 0x0F	; 15
    3f88:	98 2f       	mov	r25, r24
    3f8a:	91 70       	andi	r25, 0x01	; 1
    3f8c:	82 e0       	ldi	r24, 0x02	; 2
    3f8e:	64 e0       	ldi	r22, 0x04	; 4
    3f90:	49 2f       	mov	r20, r25
    3f92:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <DIO_enuSetPinValue>
#if LCD_MODE==EIGHT_BIT
		DIO_enuSetPinValue(D3_PORT,D3_PIN,((Copy_u8Data>>3)&LCD_MASK_BIT));
    3f96:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3f98:	86 95       	lsr	r24
    3f9a:	86 95       	lsr	r24
    3f9c:	86 95       	lsr	r24
    3f9e:	98 2f       	mov	r25, r24
    3fa0:	91 70       	andi	r25, 0x01	; 1
    3fa2:	82 e0       	ldi	r24, 0x02	; 2
    3fa4:	63 e0       	ldi	r22, 0x03	; 3
    3fa6:	49 2f       	mov	r20, r25
    3fa8:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(D2_PORT,D2_PIN,((Copy_u8Data>>2)&LCD_MASK_BIT));
    3fac:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3fae:	86 95       	lsr	r24
    3fb0:	86 95       	lsr	r24
    3fb2:	98 2f       	mov	r25, r24
    3fb4:	91 70       	andi	r25, 0x01	; 1
    3fb6:	82 e0       	ldi	r24, 0x02	; 2
    3fb8:	62 e0       	ldi	r22, 0x02	; 2
    3fba:	49 2f       	mov	r20, r25
    3fbc:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(D1_PORT,D1_PIN,((Copy_u8Data>>1)&LCD_MASK_BIT));
    3fc0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3fc2:	86 95       	lsr	r24
    3fc4:	98 2f       	mov	r25, r24
    3fc6:	91 70       	andi	r25, 0x01	; 1
    3fc8:	82 e0       	ldi	r24, 0x02	; 2
    3fca:	61 e0       	ldi	r22, 0x01	; 1
    3fcc:	49 2f       	mov	r20, r25
    3fce:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(D0_PORT,D0_PIN,((Copy_u8Data>>0)&LCD_MASK_BIT));
    3fd2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3fd4:	98 2f       	mov	r25, r24
    3fd6:	91 70       	andi	r25, 0x01	; 1
    3fd8:	82 e0       	ldi	r24, 0x02	; 2
    3fda:	60 e0       	ldi	r22, 0x00	; 0
    3fdc:	49 2f       	mov	r20, r25
    3fde:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <DIO_enuSetPinValue>
#else
#error"your LCD_MODE has a wrong selection"
#endif

		//enable latch
		DIO_enuSetPinValue(EN_PORT,EN_PIN,DIO_u8HIGH);
    3fe2:	83 e0       	ldi	r24, 0x03	; 3
    3fe4:	63 e0       	ldi	r22, 0x03	; 3
    3fe6:	41 e0       	ldi	r20, 0x01	; 1
    3fe8:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <DIO_enuSetPinValue>
    3fec:	80 e0       	ldi	r24, 0x00	; 0
    3fee:	90 e0       	ldi	r25, 0x00	; 0
    3ff0:	a0 e2       	ldi	r26, 0x20	; 32
    3ff2:	b1 e4       	ldi	r27, 0x41	; 65
    3ff4:	89 8f       	std	Y+25, r24	; 0x19
    3ff6:	9a 8f       	std	Y+26, r25	; 0x1a
    3ff8:	ab 8f       	std	Y+27, r26	; 0x1b
    3ffa:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ffc:	69 8d       	ldd	r22, Y+25	; 0x19
    3ffe:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4000:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4002:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4004:	20 e0       	ldi	r18, 0x00	; 0
    4006:	30 e0       	ldi	r19, 0x00	; 0
    4008:	4a ef       	ldi	r20, 0xFA	; 250
    400a:	54 e4       	ldi	r21, 0x44	; 68
    400c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4010:	dc 01       	movw	r26, r24
    4012:	cb 01       	movw	r24, r22
    4014:	8d 8b       	std	Y+21, r24	; 0x15
    4016:	9e 8b       	std	Y+22, r25	; 0x16
    4018:	af 8b       	std	Y+23, r26	; 0x17
    401a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    401c:	6d 89       	ldd	r22, Y+21	; 0x15
    401e:	7e 89       	ldd	r23, Y+22	; 0x16
    4020:	8f 89       	ldd	r24, Y+23	; 0x17
    4022:	98 8d       	ldd	r25, Y+24	; 0x18
    4024:	20 e0       	ldi	r18, 0x00	; 0
    4026:	30 e0       	ldi	r19, 0x00	; 0
    4028:	40 e8       	ldi	r20, 0x80	; 128
    402a:	5f e3       	ldi	r21, 0x3F	; 63
    402c:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    4030:	88 23       	and	r24, r24
    4032:	2c f4       	brge	.+10     	; 0x403e <LCD_vidLatch+0x128>
		__ticks = 1;
    4034:	81 e0       	ldi	r24, 0x01	; 1
    4036:	90 e0       	ldi	r25, 0x00	; 0
    4038:	9c 8b       	std	Y+20, r25	; 0x14
    403a:	8b 8b       	std	Y+19, r24	; 0x13
    403c:	3f c0       	rjmp	.+126    	; 0x40bc <LCD_vidLatch+0x1a6>
	else if (__tmp > 65535)
    403e:	6d 89       	ldd	r22, Y+21	; 0x15
    4040:	7e 89       	ldd	r23, Y+22	; 0x16
    4042:	8f 89       	ldd	r24, Y+23	; 0x17
    4044:	98 8d       	ldd	r25, Y+24	; 0x18
    4046:	20 e0       	ldi	r18, 0x00	; 0
    4048:	3f ef       	ldi	r19, 0xFF	; 255
    404a:	4f e7       	ldi	r20, 0x7F	; 127
    404c:	57 e4       	ldi	r21, 0x47	; 71
    404e:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    4052:	18 16       	cp	r1, r24
    4054:	4c f5       	brge	.+82     	; 0x40a8 <LCD_vidLatch+0x192>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4056:	69 8d       	ldd	r22, Y+25	; 0x19
    4058:	7a 8d       	ldd	r23, Y+26	; 0x1a
    405a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    405c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    405e:	20 e0       	ldi	r18, 0x00	; 0
    4060:	30 e0       	ldi	r19, 0x00	; 0
    4062:	40 e2       	ldi	r20, 0x20	; 32
    4064:	51 e4       	ldi	r21, 0x41	; 65
    4066:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    406a:	dc 01       	movw	r26, r24
    406c:	cb 01       	movw	r24, r22
    406e:	bc 01       	movw	r22, r24
    4070:	cd 01       	movw	r24, r26
    4072:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4076:	dc 01       	movw	r26, r24
    4078:	cb 01       	movw	r24, r22
    407a:	9c 8b       	std	Y+20, r25	; 0x14
    407c:	8b 8b       	std	Y+19, r24	; 0x13
    407e:	0f c0       	rjmp	.+30     	; 0x409e <LCD_vidLatch+0x188>
    4080:	88 ec       	ldi	r24, 0xC8	; 200
    4082:	90 e0       	ldi	r25, 0x00	; 0
    4084:	9a 8b       	std	Y+18, r25	; 0x12
    4086:	89 8b       	std	Y+17, r24	; 0x11
    4088:	89 89       	ldd	r24, Y+17	; 0x11
    408a:	9a 89       	ldd	r25, Y+18	; 0x12
    408c:	01 97       	sbiw	r24, 0x01	; 1
    408e:	f1 f7       	brne	.-4      	; 0x408c <LCD_vidLatch+0x176>
    4090:	9a 8b       	std	Y+18, r25	; 0x12
    4092:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4094:	8b 89       	ldd	r24, Y+19	; 0x13
    4096:	9c 89       	ldd	r25, Y+20	; 0x14
    4098:	01 97       	sbiw	r24, 0x01	; 1
    409a:	9c 8b       	std	Y+20, r25	; 0x14
    409c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    409e:	8b 89       	ldd	r24, Y+19	; 0x13
    40a0:	9c 89       	ldd	r25, Y+20	; 0x14
    40a2:	00 97       	sbiw	r24, 0x00	; 0
    40a4:	69 f7       	brne	.-38     	; 0x4080 <LCD_vidLatch+0x16a>
    40a6:	14 c0       	rjmp	.+40     	; 0x40d0 <LCD_vidLatch+0x1ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    40a8:	6d 89       	ldd	r22, Y+21	; 0x15
    40aa:	7e 89       	ldd	r23, Y+22	; 0x16
    40ac:	8f 89       	ldd	r24, Y+23	; 0x17
    40ae:	98 8d       	ldd	r25, Y+24	; 0x18
    40b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40b4:	dc 01       	movw	r26, r24
    40b6:	cb 01       	movw	r24, r22
    40b8:	9c 8b       	std	Y+20, r25	; 0x14
    40ba:	8b 8b       	std	Y+19, r24	; 0x13
    40bc:	8b 89       	ldd	r24, Y+19	; 0x13
    40be:	9c 89       	ldd	r25, Y+20	; 0x14
    40c0:	98 8b       	std	Y+16, r25	; 0x10
    40c2:	8f 87       	std	Y+15, r24	; 0x0f
    40c4:	8f 85       	ldd	r24, Y+15	; 0x0f
    40c6:	98 89       	ldd	r25, Y+16	; 0x10
    40c8:	01 97       	sbiw	r24, 0x01	; 1
    40ca:	f1 f7       	brne	.-4      	; 0x40c8 <LCD_vidLatch+0x1b2>
    40cc:	98 8b       	std	Y+16, r25	; 0x10
    40ce:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(10);
		DIO_enuSetPinValue(EN_PORT,EN_PIN,DIO_u8LOW);
    40d0:	83 e0       	ldi	r24, 0x03	; 3
    40d2:	63 e0       	ldi	r22, 0x03	; 3
    40d4:	40 e0       	ldi	r20, 0x00	; 0
    40d6:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <DIO_enuSetPinValue>
    40da:	80 e0       	ldi	r24, 0x00	; 0
    40dc:	90 e0       	ldi	r25, 0x00	; 0
    40de:	a0 e2       	ldi	r26, 0x20	; 32
    40e0:	b1 e4       	ldi	r27, 0x41	; 65
    40e2:	8b 87       	std	Y+11, r24	; 0x0b
    40e4:	9c 87       	std	Y+12, r25	; 0x0c
    40e6:	ad 87       	std	Y+13, r26	; 0x0d
    40e8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    40ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    40ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    40ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    40f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    40f2:	20 e0       	ldi	r18, 0x00	; 0
    40f4:	30 e0       	ldi	r19, 0x00	; 0
    40f6:	4a ef       	ldi	r20, 0xFA	; 250
    40f8:	54 e4       	ldi	r21, 0x44	; 68
    40fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40fe:	dc 01       	movw	r26, r24
    4100:	cb 01       	movw	r24, r22
    4102:	8f 83       	std	Y+7, r24	; 0x07
    4104:	98 87       	std	Y+8, r25	; 0x08
    4106:	a9 87       	std	Y+9, r26	; 0x09
    4108:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    410a:	6f 81       	ldd	r22, Y+7	; 0x07
    410c:	78 85       	ldd	r23, Y+8	; 0x08
    410e:	89 85       	ldd	r24, Y+9	; 0x09
    4110:	9a 85       	ldd	r25, Y+10	; 0x0a
    4112:	20 e0       	ldi	r18, 0x00	; 0
    4114:	30 e0       	ldi	r19, 0x00	; 0
    4116:	40 e8       	ldi	r20, 0x80	; 128
    4118:	5f e3       	ldi	r21, 0x3F	; 63
    411a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    411e:	88 23       	and	r24, r24
    4120:	2c f4       	brge	.+10     	; 0x412c <LCD_vidLatch+0x216>
		__ticks = 1;
    4122:	81 e0       	ldi	r24, 0x01	; 1
    4124:	90 e0       	ldi	r25, 0x00	; 0
    4126:	9e 83       	std	Y+6, r25	; 0x06
    4128:	8d 83       	std	Y+5, r24	; 0x05
    412a:	3f c0       	rjmp	.+126    	; 0x41aa <LCD_vidLatch+0x294>
	else if (__tmp > 65535)
    412c:	6f 81       	ldd	r22, Y+7	; 0x07
    412e:	78 85       	ldd	r23, Y+8	; 0x08
    4130:	89 85       	ldd	r24, Y+9	; 0x09
    4132:	9a 85       	ldd	r25, Y+10	; 0x0a
    4134:	20 e0       	ldi	r18, 0x00	; 0
    4136:	3f ef       	ldi	r19, 0xFF	; 255
    4138:	4f e7       	ldi	r20, 0x7F	; 127
    413a:	57 e4       	ldi	r21, 0x47	; 71
    413c:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    4140:	18 16       	cp	r1, r24
    4142:	4c f5       	brge	.+82     	; 0x4196 <LCD_vidLatch+0x280>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4144:	6b 85       	ldd	r22, Y+11	; 0x0b
    4146:	7c 85       	ldd	r23, Y+12	; 0x0c
    4148:	8d 85       	ldd	r24, Y+13	; 0x0d
    414a:	9e 85       	ldd	r25, Y+14	; 0x0e
    414c:	20 e0       	ldi	r18, 0x00	; 0
    414e:	30 e0       	ldi	r19, 0x00	; 0
    4150:	40 e2       	ldi	r20, 0x20	; 32
    4152:	51 e4       	ldi	r21, 0x41	; 65
    4154:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4158:	dc 01       	movw	r26, r24
    415a:	cb 01       	movw	r24, r22
    415c:	bc 01       	movw	r22, r24
    415e:	cd 01       	movw	r24, r26
    4160:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4164:	dc 01       	movw	r26, r24
    4166:	cb 01       	movw	r24, r22
    4168:	9e 83       	std	Y+6, r25	; 0x06
    416a:	8d 83       	std	Y+5, r24	; 0x05
    416c:	0f c0       	rjmp	.+30     	; 0x418c <LCD_vidLatch+0x276>
    416e:	88 ec       	ldi	r24, 0xC8	; 200
    4170:	90 e0       	ldi	r25, 0x00	; 0
    4172:	9c 83       	std	Y+4, r25	; 0x04
    4174:	8b 83       	std	Y+3, r24	; 0x03
    4176:	8b 81       	ldd	r24, Y+3	; 0x03
    4178:	9c 81       	ldd	r25, Y+4	; 0x04
    417a:	01 97       	sbiw	r24, 0x01	; 1
    417c:	f1 f7       	brne	.-4      	; 0x417a <LCD_vidLatch+0x264>
    417e:	9c 83       	std	Y+4, r25	; 0x04
    4180:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4182:	8d 81       	ldd	r24, Y+5	; 0x05
    4184:	9e 81       	ldd	r25, Y+6	; 0x06
    4186:	01 97       	sbiw	r24, 0x01	; 1
    4188:	9e 83       	std	Y+6, r25	; 0x06
    418a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    418c:	8d 81       	ldd	r24, Y+5	; 0x05
    418e:	9e 81       	ldd	r25, Y+6	; 0x06
    4190:	00 97       	sbiw	r24, 0x00	; 0
    4192:	69 f7       	brne	.-38     	; 0x416e <LCD_vidLatch+0x258>
    4194:	14 c0       	rjmp	.+40     	; 0x41be <LCD_vidLatch+0x2a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4196:	6f 81       	ldd	r22, Y+7	; 0x07
    4198:	78 85       	ldd	r23, Y+8	; 0x08
    419a:	89 85       	ldd	r24, Y+9	; 0x09
    419c:	9a 85       	ldd	r25, Y+10	; 0x0a
    419e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41a2:	dc 01       	movw	r26, r24
    41a4:	cb 01       	movw	r24, r22
    41a6:	9e 83       	std	Y+6, r25	; 0x06
    41a8:	8d 83       	std	Y+5, r24	; 0x05
    41aa:	8d 81       	ldd	r24, Y+5	; 0x05
    41ac:	9e 81       	ldd	r25, Y+6	; 0x06
    41ae:	9a 83       	std	Y+2, r25	; 0x02
    41b0:	89 83       	std	Y+1, r24	; 0x01
    41b2:	89 81       	ldd	r24, Y+1	; 0x01
    41b4:	9a 81       	ldd	r25, Y+2	; 0x02
    41b6:	01 97       	sbiw	r24, 0x01	; 1
    41b8:	f1 f7       	brne	.-4      	; 0x41b6 <LCD_vidLatch+0x2a0>
    41ba:	9a 83       	std	Y+2, r25	; 0x02
    41bc:	89 83       	std	Y+1, r24	; 0x01

		// solve prob of freq of atmega bigger than lcd (appear in real time)
		_delay_ms(10);
}
    41be:	6d 96       	adiw	r28, 0x1d	; 29
    41c0:	0f b6       	in	r0, 0x3f	; 63
    41c2:	f8 94       	cli
    41c4:	de bf       	out	0x3e, r29	; 62
    41c6:	0f be       	out	0x3f, r0	; 63
    41c8:	cd bf       	out	0x3d, r28	; 61
    41ca:	cf 91       	pop	r28
    41cc:	df 91       	pop	r29
    41ce:	08 95       	ret

000041d0 <LCD_invidSendCommand>:

static inline void LCD_invidSendCommand(u8 Copy_u8Command)
{
    41d0:	df 93       	push	r29
    41d2:	cf 93       	push	r28
    41d4:	cd b7       	in	r28, 0x3d	; 61
    41d6:	de b7       	in	r29, 0x3e	; 62
    41d8:	2f 97       	sbiw	r28, 0x0f	; 15
    41da:	0f b6       	in	r0, 0x3f	; 63
    41dc:	f8 94       	cli
    41de:	de bf       	out	0x3e, r29	; 62
    41e0:	0f be       	out	0x3f, r0	; 63
    41e2:	cd bf       	out	0x3d, r28	; 61
    41e4:	8f 87       	std	Y+15, r24	; 0x0f

	//set RS as command
	DIO_enuSetPinValue(RS_PORT,RS_PIN,DIO_u8LOW);
    41e6:	83 e0       	ldi	r24, 0x03	; 3
    41e8:	60 e0       	ldi	r22, 0x00	; 0
    41ea:	40 e0       	ldi	r20, 0x00	; 0
    41ec:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <DIO_enuSetPinValue>
	//set EN as low
	DIO_enuSetPinValue(EN_PORT,EN_PIN,DIO_u8LOW);
    41f0:	83 e0       	ldi	r24, 0x03	; 3
    41f2:	63 e0       	ldi	r22, 0x03	; 3
    41f4:	40 e0       	ldi	r20, 0x00	; 0
    41f6:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <DIO_enuSetPinValue>
	//set RW as write operation
	DIO_enuSetPinValue(RW_PORT,RW_PIN,DIO_u8LOW);
    41fa:	83 e0       	ldi	r24, 0x03	; 3
    41fc:	61 e0       	ldi	r22, 0x01	; 1
    41fe:	40 e0       	ldi	r20, 0x00	; 0
    4200:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <DIO_enuSetPinValue>
	//write data
	DIO_enuSetPinValue(D7_PORT,D7_PIN,((Copy_u8Command>>7)&LCD_MASK_BIT));
    4204:	8f 85       	ldd	r24, Y+15	; 0x0f
    4206:	98 2f       	mov	r25, r24
    4208:	99 1f       	adc	r25, r25
    420a:	99 27       	eor	r25, r25
    420c:	99 1f       	adc	r25, r25
    420e:	82 e0       	ldi	r24, 0x02	; 2
    4210:	67 e0       	ldi	r22, 0x07	; 7
    4212:	49 2f       	mov	r20, r25
    4214:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D6_PORT,D6_PIN,((Copy_u8Command>>6)&LCD_MASK_BIT));
    4218:	8f 85       	ldd	r24, Y+15	; 0x0f
    421a:	82 95       	swap	r24
    421c:	86 95       	lsr	r24
    421e:	86 95       	lsr	r24
    4220:	83 70       	andi	r24, 0x03	; 3
    4222:	98 2f       	mov	r25, r24
    4224:	91 70       	andi	r25, 0x01	; 1
    4226:	82 e0       	ldi	r24, 0x02	; 2
    4228:	66 e0       	ldi	r22, 0x06	; 6
    422a:	49 2f       	mov	r20, r25
    422c:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D5_PORT,D5_PIN,((Copy_u8Command>>5)&LCD_MASK_BIT));
    4230:	8f 85       	ldd	r24, Y+15	; 0x0f
    4232:	82 95       	swap	r24
    4234:	86 95       	lsr	r24
    4236:	87 70       	andi	r24, 0x07	; 7
    4238:	98 2f       	mov	r25, r24
    423a:	91 70       	andi	r25, 0x01	; 1
    423c:	82 e0       	ldi	r24, 0x02	; 2
    423e:	65 e0       	ldi	r22, 0x05	; 5
    4240:	49 2f       	mov	r20, r25
    4242:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D4_PORT,D4_PIN,((Copy_u8Command>>4)&LCD_MASK_BIT));
    4246:	8f 85       	ldd	r24, Y+15	; 0x0f
    4248:	82 95       	swap	r24
    424a:	8f 70       	andi	r24, 0x0F	; 15
    424c:	98 2f       	mov	r25, r24
    424e:	91 70       	andi	r25, 0x01	; 1
    4250:	82 e0       	ldi	r24, 0x02	; 2
    4252:	64 e0       	ldi	r22, 0x04	; 4
    4254:	49 2f       	mov	r20, r25
    4256:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D3_PORT,D3_PIN,((Copy_u8Command>>3)&LCD_MASK_BIT));
    425a:	8f 85       	ldd	r24, Y+15	; 0x0f
    425c:	86 95       	lsr	r24
    425e:	86 95       	lsr	r24
    4260:	86 95       	lsr	r24
    4262:	98 2f       	mov	r25, r24
    4264:	91 70       	andi	r25, 0x01	; 1
    4266:	82 e0       	ldi	r24, 0x02	; 2
    4268:	63 e0       	ldi	r22, 0x03	; 3
    426a:	49 2f       	mov	r20, r25
    426c:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D2_PORT,D2_PIN,((Copy_u8Command>>2)&LCD_MASK_BIT));
    4270:	8f 85       	ldd	r24, Y+15	; 0x0f
    4272:	86 95       	lsr	r24
    4274:	86 95       	lsr	r24
    4276:	98 2f       	mov	r25, r24
    4278:	91 70       	andi	r25, 0x01	; 1
    427a:	82 e0       	ldi	r24, 0x02	; 2
    427c:	62 e0       	ldi	r22, 0x02	; 2
    427e:	49 2f       	mov	r20, r25
    4280:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D1_PORT,D1_PIN,((Copy_u8Command>>1)&LCD_MASK_BIT));
    4284:	8f 85       	ldd	r24, Y+15	; 0x0f
    4286:	86 95       	lsr	r24
    4288:	98 2f       	mov	r25, r24
    428a:	91 70       	andi	r25, 0x01	; 1
    428c:	82 e0       	ldi	r24, 0x02	; 2
    428e:	61 e0       	ldi	r22, 0x01	; 1
    4290:	49 2f       	mov	r20, r25
    4292:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D0_PORT,D0_PIN,((Copy_u8Command>>0)&LCD_MASK_BIT));
    4296:	8f 85       	ldd	r24, Y+15	; 0x0f
    4298:	98 2f       	mov	r25, r24
    429a:	91 70       	andi	r25, 0x01	; 1
    429c:	82 e0       	ldi	r24, 0x02	; 2
    429e:	60 e0       	ldi	r22, 0x00	; 0
    42a0:	49 2f       	mov	r20, r25
    42a2:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <DIO_enuSetPinValue>

	//enable latch
	DIO_enuSetPinValue(EN_PORT,EN_PIN,DIO_u8HIGH);
    42a6:	83 e0       	ldi	r24, 0x03	; 3
    42a8:	63 e0       	ldi	r22, 0x03	; 3
    42aa:	41 e0       	ldi	r20, 0x01	; 1
    42ac:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <DIO_enuSetPinValue>
    42b0:	80 e0       	ldi	r24, 0x00	; 0
    42b2:	90 e0       	ldi	r25, 0x00	; 0
    42b4:	a0 e2       	ldi	r26, 0x20	; 32
    42b6:	b1 e4       	ldi	r27, 0x41	; 65
    42b8:	8b 87       	std	Y+11, r24	; 0x0b
    42ba:	9c 87       	std	Y+12, r25	; 0x0c
    42bc:	ad 87       	std	Y+13, r26	; 0x0d
    42be:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    42c0:	6b 85       	ldd	r22, Y+11	; 0x0b
    42c2:	7c 85       	ldd	r23, Y+12	; 0x0c
    42c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    42c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    42c8:	20 e0       	ldi	r18, 0x00	; 0
    42ca:	30 e0       	ldi	r19, 0x00	; 0
    42cc:	4a ef       	ldi	r20, 0xFA	; 250
    42ce:	54 e4       	ldi	r21, 0x44	; 68
    42d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    42d4:	dc 01       	movw	r26, r24
    42d6:	cb 01       	movw	r24, r22
    42d8:	8f 83       	std	Y+7, r24	; 0x07
    42da:	98 87       	std	Y+8, r25	; 0x08
    42dc:	a9 87       	std	Y+9, r26	; 0x09
    42de:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    42e0:	6f 81       	ldd	r22, Y+7	; 0x07
    42e2:	78 85       	ldd	r23, Y+8	; 0x08
    42e4:	89 85       	ldd	r24, Y+9	; 0x09
    42e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    42e8:	20 e0       	ldi	r18, 0x00	; 0
    42ea:	30 e0       	ldi	r19, 0x00	; 0
    42ec:	40 e8       	ldi	r20, 0x80	; 128
    42ee:	5f e3       	ldi	r21, 0x3F	; 63
    42f0:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    42f4:	88 23       	and	r24, r24
    42f6:	2c f4       	brge	.+10     	; 0x4302 <LCD_invidSendCommand+0x132>
		__ticks = 1;
    42f8:	81 e0       	ldi	r24, 0x01	; 1
    42fa:	90 e0       	ldi	r25, 0x00	; 0
    42fc:	9e 83       	std	Y+6, r25	; 0x06
    42fe:	8d 83       	std	Y+5, r24	; 0x05
    4300:	3f c0       	rjmp	.+126    	; 0x4380 <LCD_invidSendCommand+0x1b0>
	else if (__tmp > 65535)
    4302:	6f 81       	ldd	r22, Y+7	; 0x07
    4304:	78 85       	ldd	r23, Y+8	; 0x08
    4306:	89 85       	ldd	r24, Y+9	; 0x09
    4308:	9a 85       	ldd	r25, Y+10	; 0x0a
    430a:	20 e0       	ldi	r18, 0x00	; 0
    430c:	3f ef       	ldi	r19, 0xFF	; 255
    430e:	4f e7       	ldi	r20, 0x7F	; 127
    4310:	57 e4       	ldi	r21, 0x47	; 71
    4312:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    4316:	18 16       	cp	r1, r24
    4318:	4c f5       	brge	.+82     	; 0x436c <LCD_invidSendCommand+0x19c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    431a:	6b 85       	ldd	r22, Y+11	; 0x0b
    431c:	7c 85       	ldd	r23, Y+12	; 0x0c
    431e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4320:	9e 85       	ldd	r25, Y+14	; 0x0e
    4322:	20 e0       	ldi	r18, 0x00	; 0
    4324:	30 e0       	ldi	r19, 0x00	; 0
    4326:	40 e2       	ldi	r20, 0x20	; 32
    4328:	51 e4       	ldi	r21, 0x41	; 65
    432a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    432e:	dc 01       	movw	r26, r24
    4330:	cb 01       	movw	r24, r22
    4332:	bc 01       	movw	r22, r24
    4334:	cd 01       	movw	r24, r26
    4336:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    433a:	dc 01       	movw	r26, r24
    433c:	cb 01       	movw	r24, r22
    433e:	9e 83       	std	Y+6, r25	; 0x06
    4340:	8d 83       	std	Y+5, r24	; 0x05
    4342:	0f c0       	rjmp	.+30     	; 0x4362 <LCD_invidSendCommand+0x192>
    4344:	88 ec       	ldi	r24, 0xC8	; 200
    4346:	90 e0       	ldi	r25, 0x00	; 0
    4348:	9c 83       	std	Y+4, r25	; 0x04
    434a:	8b 83       	std	Y+3, r24	; 0x03
    434c:	8b 81       	ldd	r24, Y+3	; 0x03
    434e:	9c 81       	ldd	r25, Y+4	; 0x04
    4350:	01 97       	sbiw	r24, 0x01	; 1
    4352:	f1 f7       	brne	.-4      	; 0x4350 <LCD_invidSendCommand+0x180>
    4354:	9c 83       	std	Y+4, r25	; 0x04
    4356:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4358:	8d 81       	ldd	r24, Y+5	; 0x05
    435a:	9e 81       	ldd	r25, Y+6	; 0x06
    435c:	01 97       	sbiw	r24, 0x01	; 1
    435e:	9e 83       	std	Y+6, r25	; 0x06
    4360:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4362:	8d 81       	ldd	r24, Y+5	; 0x05
    4364:	9e 81       	ldd	r25, Y+6	; 0x06
    4366:	00 97       	sbiw	r24, 0x00	; 0
    4368:	69 f7       	brne	.-38     	; 0x4344 <LCD_invidSendCommand+0x174>
    436a:	14 c0       	rjmp	.+40     	; 0x4394 <LCD_invidSendCommand+0x1c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    436c:	6f 81       	ldd	r22, Y+7	; 0x07
    436e:	78 85       	ldd	r23, Y+8	; 0x08
    4370:	89 85       	ldd	r24, Y+9	; 0x09
    4372:	9a 85       	ldd	r25, Y+10	; 0x0a
    4374:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4378:	dc 01       	movw	r26, r24
    437a:	cb 01       	movw	r24, r22
    437c:	9e 83       	std	Y+6, r25	; 0x06
    437e:	8d 83       	std	Y+5, r24	; 0x05
    4380:	8d 81       	ldd	r24, Y+5	; 0x05
    4382:	9e 81       	ldd	r25, Y+6	; 0x06
    4384:	9a 83       	std	Y+2, r25	; 0x02
    4386:	89 83       	std	Y+1, r24	; 0x01
    4388:	89 81       	ldd	r24, Y+1	; 0x01
    438a:	9a 81       	ldd	r25, Y+2	; 0x02
    438c:	01 97       	sbiw	r24, 0x01	; 1
    438e:	f1 f7       	brne	.-4      	; 0x438c <LCD_invidSendCommand+0x1bc>
    4390:	9a 83       	std	Y+2, r25	; 0x02
    4392:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	DIO_enuSetPinValue(EN_PORT,EN_PIN,DIO_u8LOW);
    4394:	83 e0       	ldi	r24, 0x03	; 3
    4396:	63 e0       	ldi	r22, 0x03	; 3
    4398:	40 e0       	ldi	r20, 0x00	; 0
    439a:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <DIO_enuSetPinValue>


}
    439e:	2f 96       	adiw	r28, 0x0f	; 15
    43a0:	0f b6       	in	r0, 0x3f	; 63
    43a2:	f8 94       	cli
    43a4:	de bf       	out	0x3e, r29	; 62
    43a6:	0f be       	out	0x3f, r0	; 63
    43a8:	cd bf       	out	0x3d, r28	; 61
    43aa:	cf 91       	pop	r28
    43ac:	df 91       	pop	r29
    43ae:	08 95       	ret

000043b0 <LCD_enuClearLcd>:

ES_t LCD_enuClearLcd()
{
    43b0:	df 93       	push	r29
    43b2:	cf 93       	push	r28
    43b4:	0f 92       	push	r0
    43b6:	cd b7       	in	r28, 0x3d	; 61
    43b8:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState=ES_NOK;
    43ba:	19 82       	std	Y+1, r1	; 0x01

	Local_enuErrorState=LCD_enuSendCommand(CLEAR_DISPLAY);
    43bc:	81 e0       	ldi	r24, 0x01	; 1
    43be:	0e 94 be 1d 	call	0x3b7c	; 0x3b7c <LCD_enuSendCommand>
    43c2:	89 83       	std	Y+1, r24	; 0x01


	return Local_enuErrorState;
    43c4:	89 81       	ldd	r24, Y+1	; 0x01
}
    43c6:	0f 90       	pop	r0
    43c8:	cf 91       	pop	r28
    43ca:	df 91       	pop	r29
    43cc:	08 95       	ret

000043ce <APP_enuInit>:

static volatile u8 Car_Led_State;
static  volatile u16 APP_TIMER0_u16Counter=0;

ES_t APP_enuInit(void)
{
    43ce:	df 93       	push	r29
    43d0:	cf 93       	push	r28
    43d2:	0f 92       	push	r0
    43d4:	cd b7       	in	r28, 0x3d	; 61
    43d6:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState=ES_NOK;
    43d8:	19 82       	std	Y+1, r1	; 0x01

	TIMER0_enuInit();
    43da:	0e 94 7d 09 	call	0x12fa	; 0x12fa <TIMER0_enuInit>
	TIMER0_enuSetPreload(208);
    43de:	80 ed       	ldi	r24, 0xD0	; 208
    43e0:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <TIMER0_enuSetPreload>
	GIE_enuDisable();
    43e4:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <GIE_enuDisable>

	EINT_enuInit(EINT_tstrEINTcofig);
    43e8:	8c e6       	ldi	r24, 0x6C	; 108
    43ea:	91 e0       	ldi	r25, 0x01	; 1
    43ec:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <EINT_enuInit>
	EINT_enuSelectSenceLevel(0,RISING_EDGE);
    43f0:	80 e0       	ldi	r24, 0x00	; 0
    43f2:	63 e0       	ldi	r22, 0x03	; 3
    43f4:	0e 94 83 10 	call	0x2106	; 0x2106 <EINT_enuSelectSenceLevel>
	EINT_enuCallBack(&Pedestraints,NULL,0);
    43f8:	83 e6       	ldi	r24, 0x63	; 99
    43fa:	92 e2       	ldi	r25, 0x22	; 34
    43fc:	60 e0       	ldi	r22, 0x00	; 0
    43fe:	70 e0       	ldi	r23, 0x00	; 0
    4400:	40 e0       	ldi	r20, 0x00	; 0
    4402:	0e 94 93 11 	call	0x2326	; 0x2326 <EINT_enuCallBack>
	EINT_enuEnableINT(0);
    4406:	80 e0       	ldi	r24, 0x00	; 0
    4408:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <EINT_enuEnableINT>

	DIO_enuSetPinDirection(NORMAL_MODE_PORT,RED_LED,DIO_u8OUTPUT);
    440c:	80 e0       	ldi	r24, 0x00	; 0
    440e:	62 e0       	ldi	r22, 0x02	; 2
    4410:	41 e0       	ldi	r20, 0x01	; 1
    4412:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(NORMAL_MODE_PORT,YELLOW_LED,DIO_u8OUTPUT);
    4416:	80 e0       	ldi	r24, 0x00	; 0
    4418:	61 e0       	ldi	r22, 0x01	; 1
    441a:	41 e0       	ldi	r20, 0x01	; 1
    441c:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(NORMAL_MODE_PORT,GREEN_LED,DIO_u8OUTPUT);
    4420:	80 e0       	ldi	r24, 0x00	; 0
    4422:	60 e0       	ldi	r22, 0x00	; 0
    4424:	41 e0       	ldi	r20, 0x01	; 1
    4426:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <DIO_enuSetPinDirection>

	DIO_enuSetPinDirection(PEDESTRAINS_MODE_PORT,RED_LED,DIO_u8OUTPUT);
    442a:	81 e0       	ldi	r24, 0x01	; 1
    442c:	62 e0       	ldi	r22, 0x02	; 2
    442e:	41 e0       	ldi	r20, 0x01	; 1
    4430:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(PEDESTRAINS_MODE_PORT,YELLOW_LED,DIO_u8OUTPUT);
    4434:	81 e0       	ldi	r24, 0x01	; 1
    4436:	61 e0       	ldi	r22, 0x01	; 1
    4438:	41 e0       	ldi	r20, 0x01	; 1
    443a:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(PEDESTRAINS_MODE_PORT,GREEN_LED,DIO_u8OUTPUT);
    443e:	81 e0       	ldi	r24, 0x01	; 1
    4440:	60 e0       	ldi	r22, 0x00	; 0
    4442:	41 e0       	ldi	r20, 0x01	; 1
    4444:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <DIO_enuSetPinDirection>

	DIO_enuSetPinValue(NORMAL_MODE_PORT,RED_LED,DIO_u8LOW);
    4448:	80 e0       	ldi	r24, 0x00	; 0
    444a:	62 e0       	ldi	r22, 0x02	; 2
    444c:	40 e0       	ldi	r20, 0x00	; 0
    444e:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(NORMAL_MODE_PORT,YELLOW_LED,DIO_u8LOW);
    4452:	80 e0       	ldi	r24, 0x00	; 0
    4454:	61 e0       	ldi	r22, 0x01	; 1
    4456:	40 e0       	ldi	r20, 0x00	; 0
    4458:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(NORMAL_MODE_PORT,GREEN_LED,DIO_u8LOW);
    445c:	80 e0       	ldi	r24, 0x00	; 0
    445e:	60 e0       	ldi	r22, 0x00	; 0
    4460:	40 e0       	ldi	r20, 0x00	; 0
    4462:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <DIO_enuSetPinValue>

	DIO_enuSetPinValue(PEDESTRAINS_MODE_PORT,RED_LED,DIO_u8LOW);
    4466:	81 e0       	ldi	r24, 0x01	; 1
    4468:	62 e0       	ldi	r22, 0x02	; 2
    446a:	40 e0       	ldi	r20, 0x00	; 0
    446c:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(PEDESTRAINS_MODE_PORT,YELLOW_LED,DIO_u8LOW);
    4470:	81 e0       	ldi	r24, 0x01	; 1
    4472:	61 e0       	ldi	r22, 0x01	; 1
    4474:	40 e0       	ldi	r20, 0x00	; 0
    4476:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(PEDESTRAINS_MODE_PORT,GREEN_LED,DIO_u8LOW);
    447a:	81 e0       	ldi	r24, 0x01	; 1
    447c:	60 e0       	ldi	r22, 0x00	; 0
    447e:	40 e0       	ldi	r20, 0x00	; 0
    4480:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <DIO_enuSetPinValue>

	DIO_enuSetPinDirection(DIO_u8PORTD,DIO_u8PIN2,DIO_u8INPUT);//INT0 PIN
    4484:	83 e0       	ldi	r24, 0x03	; 3
    4486:	62 e0       	ldi	r22, 0x02	; 2
    4488:	40 e0       	ldi	r20, 0x00	; 0
    448a:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <DIO_enuSetPinDirection>

	TIMER0_enuEnableOVFINTERRUPT();
    448e:	0e 94 6d 0a 	call	0x14da	; 0x14da <TIMER0_enuEnableOVFINTERRUPT>
	GIE_enuEnable();
    4492:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <GIE_enuEnable>

	return Local_enuErrorState;
    4496:	89 81       	ldd	r24, Y+1	; 0x01
}
    4498:	0f 90       	pop	r0
    449a:	cf 91       	pop	r28
    449c:	df 91       	pop	r29
    449e:	08 95       	ret

000044a0 <APP_enuStart>:

ES_t APP_enuStart(void)
{
    44a0:	df 93       	push	r29
    44a2:	cf 93       	push	r28
    44a4:	0f 92       	push	r0
    44a6:	cd b7       	in	r28, 0x3d	; 61
    44a8:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState=ES_NOK;
    44aa:	19 82       	std	Y+1, r1	; 0x01

	TIMER0_enuCallBackOVF(Normal_Mode,NULL);
    44ac:	84 e7       	ldi	r24, 0x74	; 116
    44ae:	92 e2       	ldi	r25, 0x22	; 34
    44b0:	60 e0       	ldi	r22, 0x00	; 0
    44b2:	70 e0       	ldi	r23, 0x00	; 0
    44b4:	0e 94 19 0a 	call	0x1432	; 0x1432 <TIMER0_enuCallBackOVF>
	Local_enuErrorState=ES_OK;
    44b8:	81 e0       	ldi	r24, 0x01	; 1
    44ba:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    44bc:	89 81       	ldd	r24, Y+1	; 0x01
}
    44be:	0f 90       	pop	r0
    44c0:	cf 91       	pop	r28
    44c2:	df 91       	pop	r29
    44c4:	08 95       	ret

000044c6 <Pedestraints>:


static void Pedestraints(void)
{
    44c6:	df 93       	push	r29
    44c8:	cf 93       	push	r28
    44ca:	cd b7       	in	r28, 0x3d	; 61
    44cc:	de b7       	in	r29, 0x3e	; 62
	APP_TIMER0_u16Counter=0;
    44ce:	10 92 d9 01 	sts	0x01D9, r1
    44d2:	10 92 d8 01 	sts	0x01D8, r1
	TIMER0_enuCallBackOVF(Pedestraints_Mode,NULL);
    44d6:	8b e3       	ldi	r24, 0x3B	; 59
    44d8:	93 e2       	ldi	r25, 0x23	; 35
    44da:	60 e0       	ldi	r22, 0x00	; 0
    44dc:	70 e0       	ldi	r23, 0x00	; 0
    44de:	0e 94 19 0a 	call	0x1432	; 0x1432 <TIMER0_enuCallBackOVF>

}
    44e2:	cf 91       	pop	r28
    44e4:	df 91       	pop	r29
    44e6:	08 95       	ret

000044e8 <Normal_Mode>:


static void Normal_Mode(void)
{
    44e8:	df 93       	push	r29
    44ea:	cf 93       	push	r28
    44ec:	cd b7       	in	r28, 0x3d	; 61
    44ee:	de b7       	in	r29, 0x3e	; 62


	APP_TIMER0_u16Counter++;
    44f0:	80 91 d8 01 	lds	r24, 0x01D8
    44f4:	90 91 d9 01 	lds	r25, 0x01D9
    44f8:	01 96       	adiw	r24, 0x01	; 1
    44fa:	90 93 d9 01 	sts	0x01D9, r25
    44fe:	80 93 d8 01 	sts	0x01D8, r24

	if(APP_TIMER0_u16Counter<154)
    4502:	80 91 d8 01 	lds	r24, 0x01D8
    4506:	90 91 d9 01 	lds	r25, 0x01D9
    450a:	8a 39       	cpi	r24, 0x9A	; 154
    450c:	91 05       	cpc	r25, r1
    450e:	40 f4       	brcc	.+16     	; 0x4520 <Normal_Mode+0x38>
	{
		CAR_GREEN_ON();
    4510:	80 e0       	ldi	r24, 0x00	; 0
    4512:	60 e0       	ldi	r22, 0x00	; 0
    4514:	41 e0       	ldi	r20, 0x01	; 1
    4516:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <DIO_enuSetPinValue>
		Car_Led_State=GREEN_LED;
    451a:	10 92 da 01 	sts	0x01DA, r1
    451e:	a8 c0       	rjmp	.+336    	; 0x4670 <Normal_Mode+0x188>

	}
	else if(APP_TIMER0_u16Counter>=154 && APP_TIMER0_u16Counter%10==0 && APP_TIMER0_u16Counter<290)//
    4520:	80 91 d8 01 	lds	r24, 0x01D8
    4524:	90 91 d9 01 	lds	r25, 0x01D9
    4528:	8a 39       	cpi	r24, 0x9A	; 154
    452a:	91 05       	cpc	r25, r1
    452c:	50 f1       	brcs	.+84     	; 0x4582 <Normal_Mode+0x9a>
    452e:	80 91 d8 01 	lds	r24, 0x01D8
    4532:	90 91 d9 01 	lds	r25, 0x01D9
    4536:	2a e0       	ldi	r18, 0x0A	; 10
    4538:	30 e0       	ldi	r19, 0x00	; 0
    453a:	b9 01       	movw	r22, r18
    453c:	0e 94 cf 24 	call	0x499e	; 0x499e <__udivmodhi4>
    4540:	00 97       	sbiw	r24, 0x00	; 0
    4542:	f9 f4       	brne	.+62     	; 0x4582 <Normal_Mode+0x9a>
    4544:	80 91 d8 01 	lds	r24, 0x01D8
    4548:	90 91 d9 01 	lds	r25, 0x01D9
    454c:	21 e0       	ldi	r18, 0x01	; 1
    454e:	82 32       	cpi	r24, 0x22	; 34
    4550:	92 07       	cpc	r25, r18
    4552:	b8 f4       	brcc	.+46     	; 0x4582 <Normal_Mode+0x9a>
	{
		if(APP_TIMER0_u16Counter==154)
    4554:	80 91 d8 01 	lds	r24, 0x01D8
    4558:	90 91 d9 01 	lds	r25, 0x01D9
    455c:	8a 39       	cpi	r24, 0x9A	; 154
    455e:	91 05       	cpc	r25, r1
    4560:	19 f4       	brne	.+6      	; 0x4568 <Normal_Mode+0x80>
		{
			TIMER0_enuSetPreload(208);
    4562:	80 ed       	ldi	r24, 0xD0	; 208
    4564:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <TIMER0_enuSetPreload>
		}
		CAR_GREEN_OFF();
    4568:	80 e0       	ldi	r24, 0x00	; 0
    456a:	60 e0       	ldi	r22, 0x00	; 0
    456c:	40 e0       	ldi	r20, 0x00	; 0
    456e:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <DIO_enuSetPinValue>
		CAR_YELLOW_BLINK();
    4572:	80 e0       	ldi	r24, 0x00	; 0
    4574:	61 e0       	ldi	r22, 0x01	; 1
    4576:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <DIO_enuTogPinValue>
		Car_Led_State=YELLOW_LED;
    457a:	81 e0       	ldi	r24, 0x01	; 1
    457c:	80 93 da 01 	sts	0x01DA, r24
    4580:	77 c0       	rjmp	.+238    	; 0x4670 <Normal_Mode+0x188>
	}
	else if(APP_TIMER0_u16Counter>=290 && APP_TIMER0_u16Counter<462 )
    4582:	80 91 d8 01 	lds	r24, 0x01D8
    4586:	90 91 d9 01 	lds	r25, 0x01D9
    458a:	21 e0       	ldi	r18, 0x01	; 1
    458c:	82 32       	cpi	r24, 0x22	; 34
    458e:	92 07       	cpc	r25, r18
    4590:	08 f1       	brcs	.+66     	; 0x45d4 <Normal_Mode+0xec>
    4592:	80 91 d8 01 	lds	r24, 0x01D8
    4596:	90 91 d9 01 	lds	r25, 0x01D9
    459a:	21 e0       	ldi	r18, 0x01	; 1
    459c:	8e 3c       	cpi	r24, 0xCE	; 206
    459e:	92 07       	cpc	r25, r18
    45a0:	c8 f4       	brcc	.+50     	; 0x45d4 <Normal_Mode+0xec>
	{
		if(APP_TIMER0_u16Counter==290)
    45a2:	80 91 d8 01 	lds	r24, 0x01D8
    45a6:	90 91 d9 01 	lds	r25, 0x01D9
    45aa:	21 e0       	ldi	r18, 0x01	; 1
    45ac:	82 32       	cpi	r24, 0x22	; 34
    45ae:	92 07       	cpc	r25, r18
    45b0:	19 f4       	brne	.+6      	; 0x45b8 <Normal_Mode+0xd0>
		{
			TIMER0_enuSetPreload(208);
    45b2:	80 ed       	ldi	r24, 0xD0	; 208
    45b4:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <TIMER0_enuSetPreload>
		}
		CAR_YELLOW_OFF();
    45b8:	80 e0       	ldi	r24, 0x00	; 0
    45ba:	61 e0       	ldi	r22, 0x01	; 1
    45bc:	40 e0       	ldi	r20, 0x00	; 0
    45be:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <DIO_enuSetPinValue>
		CAR_RED_ON();
    45c2:	80 e0       	ldi	r24, 0x00	; 0
    45c4:	62 e0       	ldi	r22, 0x02	; 2
    45c6:	41 e0       	ldi	r20, 0x01	; 1
    45c8:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <DIO_enuSetPinValue>
		Car_Led_State=RED_LED;
    45cc:	82 e0       	ldi	r24, 0x02	; 2
    45ce:	80 93 da 01 	sts	0x01DA, r24
    45d2:	4e c0       	rjmp	.+156    	; 0x4670 <Normal_Mode+0x188>
	}
	else if(APP_TIMER0_u16Counter>=462 && APP_TIMER0_u16Counter%10==0 && APP_TIMER0_u16Counter<616)//
    45d4:	80 91 d8 01 	lds	r24, 0x01D8
    45d8:	90 91 d9 01 	lds	r25, 0x01D9
    45dc:	21 e0       	ldi	r18, 0x01	; 1
    45de:	8e 3c       	cpi	r24, 0xCE	; 206
    45e0:	92 07       	cpc	r25, r18
    45e2:	58 f1       	brcs	.+86     	; 0x463a <Normal_Mode+0x152>
    45e4:	80 91 d8 01 	lds	r24, 0x01D8
    45e8:	90 91 d9 01 	lds	r25, 0x01D9
    45ec:	2a e0       	ldi	r18, 0x0A	; 10
    45ee:	30 e0       	ldi	r19, 0x00	; 0
    45f0:	b9 01       	movw	r22, r18
    45f2:	0e 94 cf 24 	call	0x499e	; 0x499e <__udivmodhi4>
    45f6:	00 97       	sbiw	r24, 0x00	; 0
    45f8:	01 f5       	brne	.+64     	; 0x463a <Normal_Mode+0x152>
    45fa:	80 91 d8 01 	lds	r24, 0x01D8
    45fe:	90 91 d9 01 	lds	r25, 0x01D9
    4602:	22 e0       	ldi	r18, 0x02	; 2
    4604:	88 36       	cpi	r24, 0x68	; 104
    4606:	92 07       	cpc	r25, r18
    4608:	c0 f4       	brcc	.+48     	; 0x463a <Normal_Mode+0x152>
	{
		if(APP_TIMER0_u16Counter==462)
    460a:	80 91 d8 01 	lds	r24, 0x01D8
    460e:	90 91 d9 01 	lds	r25, 0x01D9
    4612:	21 e0       	ldi	r18, 0x01	; 1
    4614:	8e 3c       	cpi	r24, 0xCE	; 206
    4616:	92 07       	cpc	r25, r18
    4618:	19 f4       	brne	.+6      	; 0x4620 <Normal_Mode+0x138>
		{
			TIMER0_enuSetPreload(208);
    461a:	80 ed       	ldi	r24, 0xD0	; 208
    461c:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <TIMER0_enuSetPreload>
		}
		CAR_RED_OFF();
    4620:	80 e0       	ldi	r24, 0x00	; 0
    4622:	62 e0       	ldi	r22, 0x02	; 2
    4624:	40 e0       	ldi	r20, 0x00	; 0
    4626:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <DIO_enuSetPinValue>
		CAR_YELLOW_BLINK();
    462a:	80 e0       	ldi	r24, 0x00	; 0
    462c:	61 e0       	ldi	r22, 0x01	; 1
    462e:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <DIO_enuTogPinValue>
		Car_Led_State=YELLOW_LED;
    4632:	81 e0       	ldi	r24, 0x01	; 1
    4634:	80 93 da 01 	sts	0x01DA, r24
    4638:	1b c0       	rjmp	.+54     	; 0x4670 <Normal_Mode+0x188>
	}
	else if(APP_TIMER0_u16Counter== 616)
    463a:	80 91 d8 01 	lds	r24, 0x01D8
    463e:	90 91 d9 01 	lds	r25, 0x01D9
    4642:	22 e0       	ldi	r18, 0x02	; 2
    4644:	88 36       	cpi	r24, 0x68	; 104
    4646:	92 07       	cpc	r25, r18
    4648:	99 f4       	brne	.+38     	; 0x4670 <Normal_Mode+0x188>
	{
		TIMER0_enuSetPreload(208);
    464a:	80 ed       	ldi	r24, 0xD0	; 208
    464c:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <TIMER0_enuSetPreload>
		CAR_YELLOW_OFF();
    4650:	80 e0       	ldi	r24, 0x00	; 0
    4652:	61 e0       	ldi	r22, 0x01	; 1
    4654:	40 e0       	ldi	r20, 0x00	; 0
    4656:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <DIO_enuSetPinValue>
		CAR_GREEN_ON();
    465a:	80 e0       	ldi	r24, 0x00	; 0
    465c:	60 e0       	ldi	r22, 0x00	; 0
    465e:	41 e0       	ldi	r20, 0x01	; 1
    4660:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <DIO_enuSetPinValue>
		Car_Led_State=GREEN_LED;
    4664:	10 92 da 01 	sts	0x01DA, r1
		APP_TIMER0_u16Counter=0;
    4668:	10 92 d9 01 	sts	0x01D9, r1
    466c:	10 92 d8 01 	sts	0x01D8, r1
	}

}
    4670:	cf 91       	pop	r28
    4672:	df 91       	pop	r29
    4674:	08 95       	ret

00004676 <Pedestraints_Mode>:

static void Pedestraints_Mode(void)
{
    4676:	df 93       	push	r29
    4678:	cf 93       	push	r28
    467a:	cd b7       	in	r28, 0x3d	; 61
    467c:	de b7       	in	r29, 0x3e	; 62
	APP_TIMER0_u16Counter++;
    467e:	80 91 d8 01 	lds	r24, 0x01D8
    4682:	90 91 d9 01 	lds	r25, 0x01D9
    4686:	01 96       	adiw	r24, 0x01	; 1
    4688:	90 93 d9 01 	sts	0x01D9, r25
    468c:	80 93 d8 01 	sts	0x01D8, r24


	if(APP_TIMER0_u16Counter==1)
    4690:	80 91 d8 01 	lds	r24, 0x01D8
    4694:	90 91 d9 01 	lds	r25, 0x01D9
    4698:	81 30       	cpi	r24, 0x01	; 1
    469a:	91 05       	cpc	r25, r1
    469c:	79 f4       	brne	.+30     	; 0x46bc <Pedestraints_Mode+0x46>
	{
		PED_GREEN_OFF();
    469e:	81 e0       	ldi	r24, 0x01	; 1
    46a0:	60 e0       	ldi	r22, 0x00	; 0
    46a2:	40 e0       	ldi	r20, 0x00	; 0
    46a4:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <DIO_enuSetPinValue>
		PED_RED_OFF();
    46a8:	81 e0       	ldi	r24, 0x01	; 1
    46aa:	62 e0       	ldi	r22, 0x02	; 2
    46ac:	40 e0       	ldi	r20, 0x00	; 0
    46ae:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <DIO_enuSetPinValue>
		PED_YELLOW_OFF();
    46b2:	81 e0       	ldi	r24, 0x01	; 1
    46b4:	61 e0       	ldi	r22, 0x01	; 1
    46b6:	40 e0       	ldi	r20, 0x00	; 0
    46b8:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <DIO_enuSetPinValue>
	}
	if(Car_Led_State==RED_LED )
    46bc:	80 91 da 01 	lds	r24, 0x01DA
    46c0:	82 30       	cpi	r24, 0x02	; 2
    46c2:	09 f0       	breq	.+2      	; 0x46c6 <Pedestraints_Mode+0x50>
    46c4:	79 c0       	rjmp	.+242    	; 0x47b8 <Pedestraints_Mode+0x142>
	{
		if(APP_TIMER0_u16Counter<154)
    46c6:	80 91 d8 01 	lds	r24, 0x01D8
    46ca:	90 91 d9 01 	lds	r25, 0x01D9
    46ce:	8a 39       	cpi	r24, 0x9A	; 154
    46d0:	91 05       	cpc	r25, r1
    46d2:	58 f4       	brcc	.+22     	; 0x46ea <Pedestraints_Mode+0x74>
		{
			PED_GREEN_ON();
    46d4:	81 e0       	ldi	r24, 0x01	; 1
    46d6:	60 e0       	ldi	r22, 0x00	; 0
    46d8:	41 e0       	ldi	r20, 0x01	; 1
    46da:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <DIO_enuSetPinValue>
			CAR_RED_ON();
    46de:	80 e0       	ldi	r24, 0x00	; 0
    46e0:	62 e0       	ldi	r22, 0x02	; 2
    46e2:	41 e0       	ldi	r20, 0x01	; 1
    46e4:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <DIO_enuSetPinValue>
    46e8:	2f c1       	rjmp	.+606    	; 0x4948 <Pedestraints_Mode+0x2d2>
		}
		else if(APP_TIMER0_u16Counter%10==0 && APP_TIMER0_u16Counter>=154 && APP_TIMER0_u16Counter<290)
    46ea:	80 91 d8 01 	lds	r24, 0x01D8
    46ee:	90 91 d9 01 	lds	r25, 0x01D9
    46f2:	2a e0       	ldi	r18, 0x0A	; 10
    46f4:	30 e0       	ldi	r19, 0x00	; 0
    46f6:	b9 01       	movw	r22, r18
    46f8:	0e 94 cf 24 	call	0x499e	; 0x499e <__udivmodhi4>
    46fc:	00 97       	sbiw	r24, 0x00	; 0
    46fe:	61 f5       	brne	.+88     	; 0x4758 <Pedestraints_Mode+0xe2>
    4700:	80 91 d8 01 	lds	r24, 0x01D8
    4704:	90 91 d9 01 	lds	r25, 0x01D9
    4708:	8a 39       	cpi	r24, 0x9A	; 154
    470a:	91 05       	cpc	r25, r1
    470c:	28 f1       	brcs	.+74     	; 0x4758 <Pedestraints_Mode+0xe2>
    470e:	80 91 d8 01 	lds	r24, 0x01D8
    4712:	90 91 d9 01 	lds	r25, 0x01D9
    4716:	21 e0       	ldi	r18, 0x01	; 1
    4718:	82 32       	cpi	r24, 0x22	; 34
    471a:	92 07       	cpc	r25, r18
    471c:	e8 f4       	brcc	.+58     	; 0x4758 <Pedestraints_Mode+0xe2>
		{
			if(APP_TIMER0_u16Counter==154)
    471e:	80 91 d8 01 	lds	r24, 0x01D8
    4722:	90 91 d9 01 	lds	r25, 0x01D9
    4726:	8a 39       	cpi	r24, 0x9A	; 154
    4728:	91 05       	cpc	r25, r1
    472a:	19 f4       	brne	.+6      	; 0x4732 <Pedestraints_Mode+0xbc>
			{
				TIMER0_enuSetPreload(208);
    472c:	80 ed       	ldi	r24, 0xD0	; 208
    472e:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <TIMER0_enuSetPreload>
			}
			CAR_RED_OFF();
    4732:	80 e0       	ldi	r24, 0x00	; 0
    4734:	62 e0       	ldi	r22, 0x02	; 2
    4736:	40 e0       	ldi	r20, 0x00	; 0
    4738:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <DIO_enuSetPinValue>
			PED_GREEN_ON();
    473c:	81 e0       	ldi	r24, 0x01	; 1
    473e:	60 e0       	ldi	r22, 0x00	; 0
    4740:	41 e0       	ldi	r20, 0x01	; 1
    4742:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <DIO_enuSetPinValue>
			CAR_YELLOW_BLINK();
    4746:	80 e0       	ldi	r24, 0x00	; 0
    4748:	61 e0       	ldi	r22, 0x01	; 1
    474a:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <DIO_enuTogPinValue>
			PED_YELLOW_BLINK();
    474e:	81 e0       	ldi	r24, 0x01	; 1
    4750:	61 e0       	ldi	r22, 0x01	; 1
    4752:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <DIO_enuTogPinValue>
    4756:	f8 c0       	rjmp	.+496    	; 0x4948 <Pedestraints_Mode+0x2d2>
		}
		else if(APP_TIMER0_u16Counter==290)
    4758:	80 91 d8 01 	lds	r24, 0x01D8
    475c:	90 91 d9 01 	lds	r25, 0x01D9
    4760:	21 e0       	ldi	r18, 0x01	; 1
    4762:	82 32       	cpi	r24, 0x22	; 34
    4764:	92 07       	cpc	r25, r18
    4766:	09 f0       	breq	.+2      	; 0x476a <Pedestraints_Mode+0xf4>
    4768:	ef c0       	rjmp	.+478    	; 0x4948 <Pedestraints_Mode+0x2d2>
		{
			PED_YELLOW_OFF();
    476a:	81 e0       	ldi	r24, 0x01	; 1
    476c:	61 e0       	ldi	r22, 0x01	; 1
    476e:	40 e0       	ldi	r20, 0x00	; 0
    4770:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <DIO_enuSetPinValue>
			PED_GREEN_OFF();
    4774:	81 e0       	ldi	r24, 0x01	; 1
    4776:	60 e0       	ldi	r22, 0x00	; 0
    4778:	40 e0       	ldi	r20, 0x00	; 0
    477a:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <DIO_enuSetPinValue>
			PED_RED_ON();
    477e:	81 e0       	ldi	r24, 0x01	; 1
    4780:	62 e0       	ldi	r22, 0x02	; 2
    4782:	41 e0       	ldi	r20, 0x01	; 1
    4784:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <DIO_enuSetPinValue>
			CAR_YELLOW_OFF();
    4788:	80 e0       	ldi	r24, 0x00	; 0
    478a:	61 e0       	ldi	r22, 0x01	; 1
    478c:	40 e0       	ldi	r20, 0x00	; 0
    478e:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <DIO_enuSetPinValue>
			CAR_GREEN_ON();
    4792:	80 e0       	ldi	r24, 0x00	; 0
    4794:	60 e0       	ldi	r22, 0x00	; 0
    4796:	41 e0       	ldi	r20, 0x01	; 1
    4798:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <DIO_enuSetPinValue>

			TIMER0_enuSetPreload(208);
    479c:	80 ed       	ldi	r24, 0xD0	; 208
    479e:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <TIMER0_enuSetPreload>
			APP_TIMER0_u16Counter=0;
    47a2:	10 92 d9 01 	sts	0x01D9, r1
    47a6:	10 92 d8 01 	sts	0x01D8, r1
			TIMER0_enuCallBackOVF(Normal_Mode,NULL);
    47aa:	84 e7       	ldi	r24, 0x74	; 116
    47ac:	92 e2       	ldi	r25, 0x22	; 34
    47ae:	60 e0       	ldi	r22, 0x00	; 0
    47b0:	70 e0       	ldi	r23, 0x00	; 0
    47b2:	0e 94 19 0a 	call	0x1432	; 0x1432 <TIMER0_enuCallBackOVF>
    47b6:	c8 c0       	rjmp	.+400    	; 0x4948 <Pedestraints_Mode+0x2d2>
		}
	}
	else if((Car_Led_State==GREEN_LED || Car_Led_State==YELLOW_LED) )
    47b8:	80 91 da 01 	lds	r24, 0x01DA
    47bc:	88 23       	and	r24, r24
    47be:	29 f0       	breq	.+10     	; 0x47ca <Pedestraints_Mode+0x154>
    47c0:	80 91 da 01 	lds	r24, 0x01DA
    47c4:	81 30       	cpi	r24, 0x01	; 1
    47c6:	09 f0       	breq	.+2      	; 0x47ca <Pedestraints_Mode+0x154>
    47c8:	bf c0       	rjmp	.+382    	; 0x4948 <Pedestraints_Mode+0x2d2>
	{
		if (APP_TIMER0_u16Counter%10==0 && APP_TIMER0_u16Counter<154)
    47ca:	80 91 d8 01 	lds	r24, 0x01D8
    47ce:	90 91 d9 01 	lds	r25, 0x01D9
    47d2:	2a e0       	ldi	r18, 0x0A	; 10
    47d4:	30 e0       	ldi	r19, 0x00	; 0
    47d6:	b9 01       	movw	r22, r18
    47d8:	0e 94 cf 24 	call	0x499e	; 0x499e <__udivmodhi4>
    47dc:	00 97       	sbiw	r24, 0x00	; 0
    47de:	a9 f4       	brne	.+42     	; 0x480a <Pedestraints_Mode+0x194>
    47e0:	80 91 d8 01 	lds	r24, 0x01D8
    47e4:	90 91 d9 01 	lds	r25, 0x01D9
    47e8:	8a 39       	cpi	r24, 0x9A	; 154
    47ea:	91 05       	cpc	r25, r1
    47ec:	70 f4       	brcc	.+28     	; 0x480a <Pedestraints_Mode+0x194>
		{
			PED_RED_ON();
    47ee:	81 e0       	ldi	r24, 0x01	; 1
    47f0:	62 e0       	ldi	r22, 0x02	; 2
    47f2:	41 e0       	ldi	r20, 0x01	; 1
    47f4:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <DIO_enuSetPinValue>
			CAR_YELLOW_BLINK();
    47f8:	80 e0       	ldi	r24, 0x00	; 0
    47fa:	61 e0       	ldi	r22, 0x01	; 1
    47fc:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <DIO_enuTogPinValue>
			PED_YELLOW_BLINK();
    4800:	81 e0       	ldi	r24, 0x01	; 1
    4802:	61 e0       	ldi	r22, 0x01	; 1
    4804:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <DIO_enuTogPinValue>
    4808:	9f c0       	rjmp	.+318    	; 0x4948 <Pedestraints_Mode+0x2d2>
		}
		else if(APP_TIMER0_u16Counter>=154 && APP_TIMER0_u16Counter<290)
    480a:	80 91 d8 01 	lds	r24, 0x01D8
    480e:	90 91 d9 01 	lds	r25, 0x01D9
    4812:	8a 39       	cpi	r24, 0x9A	; 154
    4814:	91 05       	cpc	r25, r1
    4816:	88 f1       	brcs	.+98     	; 0x487a <Pedestraints_Mode+0x204>
    4818:	80 91 d8 01 	lds	r24, 0x01D8
    481c:	90 91 d9 01 	lds	r25, 0x01D9
    4820:	21 e0       	ldi	r18, 0x01	; 1
    4822:	82 32       	cpi	r24, 0x22	; 34
    4824:	92 07       	cpc	r25, r18
    4826:	48 f5       	brcc	.+82     	; 0x487a <Pedestraints_Mode+0x204>
		{
			if (APP_TIMER0_u16Counter==154)
    4828:	80 91 d8 01 	lds	r24, 0x01D8
    482c:	90 91 d9 01 	lds	r25, 0x01D9
    4830:	8a 39       	cpi	r24, 0x9A	; 154
    4832:	91 05       	cpc	r25, r1
    4834:	19 f4       	brne	.+6      	; 0x483c <Pedestraints_Mode+0x1c6>
			{
				TIMER0_enuSetPreload(208);
    4836:	80 ed       	ldi	r24, 0xD0	; 208
    4838:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <TIMER0_enuSetPreload>
			}
			CAR_GREEN_OFF();
    483c:	80 e0       	ldi	r24, 0x00	; 0
    483e:	60 e0       	ldi	r22, 0x00	; 0
    4840:	40 e0       	ldi	r20, 0x00	; 0
    4842:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <DIO_enuSetPinValue>
			CAR_YELLOW_OFF();
    4846:	80 e0       	ldi	r24, 0x00	; 0
    4848:	61 e0       	ldi	r22, 0x01	; 1
    484a:	40 e0       	ldi	r20, 0x00	; 0
    484c:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <DIO_enuSetPinValue>
			PED_YELLOW_OFF();
    4850:	81 e0       	ldi	r24, 0x01	; 1
    4852:	61 e0       	ldi	r22, 0x01	; 1
    4854:	40 e0       	ldi	r20, 0x00	; 0
    4856:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <DIO_enuSetPinValue>
			CAR_RED_ON();
    485a:	80 e0       	ldi	r24, 0x00	; 0
    485c:	62 e0       	ldi	r22, 0x02	; 2
    485e:	41 e0       	ldi	r20, 0x01	; 1
    4860:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <DIO_enuSetPinValue>
			PED_RED_OFF();
    4864:	81 e0       	ldi	r24, 0x01	; 1
    4866:	62 e0       	ldi	r22, 0x02	; 2
    4868:	40 e0       	ldi	r20, 0x00	; 0
    486a:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <DIO_enuSetPinValue>
			PED_GREEN_ON();
    486e:	81 e0       	ldi	r24, 0x01	; 1
    4870:	60 e0       	ldi	r22, 0x00	; 0
    4872:	41 e0       	ldi	r20, 0x01	; 1
    4874:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <DIO_enuSetPinValue>
    4878:	67 c0       	rjmp	.+206    	; 0x4948 <Pedestraints_Mode+0x2d2>
		}
		else if(APP_TIMER0_u16Counter%10==0 && APP_TIMER0_u16Counter>290 && APP_TIMER0_u16Counter<462)
    487a:	80 91 d8 01 	lds	r24, 0x01D8
    487e:	90 91 d9 01 	lds	r25, 0x01D9
    4882:	2a e0       	ldi	r18, 0x0A	; 10
    4884:	30 e0       	ldi	r19, 0x00	; 0
    4886:	b9 01       	movw	r22, r18
    4888:	0e 94 cf 24 	call	0x499e	; 0x499e <__udivmodhi4>
    488c:	00 97       	sbiw	r24, 0x00	; 0
    488e:	71 f5       	brne	.+92     	; 0x48ec <Pedestraints_Mode+0x276>
    4890:	80 91 d8 01 	lds	r24, 0x01D8
    4894:	90 91 d9 01 	lds	r25, 0x01D9
    4898:	21 e0       	ldi	r18, 0x01	; 1
    489a:	83 32       	cpi	r24, 0x23	; 35
    489c:	92 07       	cpc	r25, r18
    489e:	30 f1       	brcs	.+76     	; 0x48ec <Pedestraints_Mode+0x276>
    48a0:	80 91 d8 01 	lds	r24, 0x01D8
    48a4:	90 91 d9 01 	lds	r25, 0x01D9
    48a8:	21 e0       	ldi	r18, 0x01	; 1
    48aa:	8e 3c       	cpi	r24, 0xCE	; 206
    48ac:	92 07       	cpc	r25, r18
    48ae:	f0 f4       	brcc	.+60     	; 0x48ec <Pedestraints_Mode+0x276>
		{
			if (APP_TIMER0_u16Counter==290)
    48b0:	80 91 d8 01 	lds	r24, 0x01D8
    48b4:	90 91 d9 01 	lds	r25, 0x01D9
    48b8:	21 e0       	ldi	r18, 0x01	; 1
    48ba:	82 32       	cpi	r24, 0x22	; 34
    48bc:	92 07       	cpc	r25, r18
    48be:	19 f4       	brne	.+6      	; 0x48c6 <Pedestraints_Mode+0x250>
			{
				TIMER0_enuSetPreload(208);
    48c0:	80 ed       	ldi	r24, 0xD0	; 208
    48c2:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <TIMER0_enuSetPreload>
			}
			CAR_RED_OFF();
    48c6:	80 e0       	ldi	r24, 0x00	; 0
    48c8:	62 e0       	ldi	r22, 0x02	; 2
    48ca:	40 e0       	ldi	r20, 0x00	; 0
    48cc:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <DIO_enuSetPinValue>
			PED_GREEN_ON();
    48d0:	81 e0       	ldi	r24, 0x01	; 1
    48d2:	60 e0       	ldi	r22, 0x00	; 0
    48d4:	41 e0       	ldi	r20, 0x01	; 1
    48d6:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <DIO_enuSetPinValue>
			CAR_YELLOW_BLINK();
    48da:	80 e0       	ldi	r24, 0x00	; 0
    48dc:	61 e0       	ldi	r22, 0x01	; 1
    48de:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <DIO_enuTogPinValue>
			PED_YELLOW_BLINK();
    48e2:	81 e0       	ldi	r24, 0x01	; 1
    48e4:	61 e0       	ldi	r22, 0x01	; 1
    48e6:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <DIO_enuTogPinValue>
    48ea:	2e c0       	rjmp	.+92     	; 0x4948 <Pedestraints_Mode+0x2d2>
		}
		else if(APP_TIMER0_u16Counter==462)
    48ec:	80 91 d8 01 	lds	r24, 0x01D8
    48f0:	90 91 d9 01 	lds	r25, 0x01D9
    48f4:	21 e0       	ldi	r18, 0x01	; 1
    48f6:	8e 3c       	cpi	r24, 0xCE	; 206
    48f8:	92 07       	cpc	r25, r18
    48fa:	31 f5       	brne	.+76     	; 0x4948 <Pedestraints_Mode+0x2d2>
		{
			PED_YELLOW_OFF();
    48fc:	81 e0       	ldi	r24, 0x01	; 1
    48fe:	61 e0       	ldi	r22, 0x01	; 1
    4900:	40 e0       	ldi	r20, 0x00	; 0
    4902:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <DIO_enuSetPinValue>
			PED_GREEN_OFF();
    4906:	81 e0       	ldi	r24, 0x01	; 1
    4908:	60 e0       	ldi	r22, 0x00	; 0
    490a:	40 e0       	ldi	r20, 0x00	; 0
    490c:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <DIO_enuSetPinValue>
			PED_RED_ON();
    4910:	81 e0       	ldi	r24, 0x01	; 1
    4912:	62 e0       	ldi	r22, 0x02	; 2
    4914:	41 e0       	ldi	r20, 0x01	; 1
    4916:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <DIO_enuSetPinValue>
			CAR_YELLOW_OFF();
    491a:	80 e0       	ldi	r24, 0x00	; 0
    491c:	61 e0       	ldi	r22, 0x01	; 1
    491e:	40 e0       	ldi	r20, 0x00	; 0
    4920:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <DIO_enuSetPinValue>
			CAR_GREEN_ON();
    4924:	80 e0       	ldi	r24, 0x00	; 0
    4926:	60 e0       	ldi	r22, 0x00	; 0
    4928:	41 e0       	ldi	r20, 0x01	; 1
    492a:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <DIO_enuSetPinValue>

			TIMER0_enuSetPreload(208);
    492e:	80 ed       	ldi	r24, 0xD0	; 208
    4930:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <TIMER0_enuSetPreload>
			APP_TIMER0_u16Counter=0;
    4934:	10 92 d9 01 	sts	0x01D9, r1
    4938:	10 92 d8 01 	sts	0x01D8, r1
			TIMER0_enuCallBackOVF(Normal_Mode,NULL);
    493c:	84 e7       	ldi	r24, 0x74	; 116
    493e:	92 e2       	ldi	r25, 0x22	; 34
    4940:	60 e0       	ldi	r22, 0x00	; 0
    4942:	70 e0       	ldi	r23, 0x00	; 0
    4944:	0e 94 19 0a 	call	0x1432	; 0x1432 <TIMER0_enuCallBackOVF>
		}

	}

}
    4948:	cf 91       	pop	r28
    494a:	df 91       	pop	r29
    494c:	08 95       	ret

0000494e <main>:

#include "APP_int.h"


int main()
{
    494e:	df 93       	push	r29
    4950:	cf 93       	push	r28
    4952:	cd b7       	in	r28, 0x3d	; 61
    4954:	de b7       	in	r29, 0x3e	; 62
	APP_enuInit();
    4956:	0e 94 e7 21 	call	0x43ce	; 0x43ce <APP_enuInit>
	APP_enuStart();
    495a:	0e 94 50 22 	call	0x44a0	; 0x44a0 <APP_enuStart>
    495e:	ff cf       	rjmp	.-2      	; 0x495e <main+0x10>

00004960 <__mulsi3>:
    4960:	62 9f       	mul	r22, r18
    4962:	d0 01       	movw	r26, r0
    4964:	73 9f       	mul	r23, r19
    4966:	f0 01       	movw	r30, r0
    4968:	82 9f       	mul	r24, r18
    496a:	e0 0d       	add	r30, r0
    496c:	f1 1d       	adc	r31, r1
    496e:	64 9f       	mul	r22, r20
    4970:	e0 0d       	add	r30, r0
    4972:	f1 1d       	adc	r31, r1
    4974:	92 9f       	mul	r25, r18
    4976:	f0 0d       	add	r31, r0
    4978:	83 9f       	mul	r24, r19
    497a:	f0 0d       	add	r31, r0
    497c:	74 9f       	mul	r23, r20
    497e:	f0 0d       	add	r31, r0
    4980:	65 9f       	mul	r22, r21
    4982:	f0 0d       	add	r31, r0
    4984:	99 27       	eor	r25, r25
    4986:	72 9f       	mul	r23, r18
    4988:	b0 0d       	add	r27, r0
    498a:	e1 1d       	adc	r30, r1
    498c:	f9 1f       	adc	r31, r25
    498e:	63 9f       	mul	r22, r19
    4990:	b0 0d       	add	r27, r0
    4992:	e1 1d       	adc	r30, r1
    4994:	f9 1f       	adc	r31, r25
    4996:	bd 01       	movw	r22, r26
    4998:	cf 01       	movw	r24, r30
    499a:	11 24       	eor	r1, r1
    499c:	08 95       	ret

0000499e <__udivmodhi4>:
    499e:	aa 1b       	sub	r26, r26
    49a0:	bb 1b       	sub	r27, r27
    49a2:	51 e1       	ldi	r21, 0x11	; 17
    49a4:	07 c0       	rjmp	.+14     	; 0x49b4 <__udivmodhi4_ep>

000049a6 <__udivmodhi4_loop>:
    49a6:	aa 1f       	adc	r26, r26
    49a8:	bb 1f       	adc	r27, r27
    49aa:	a6 17       	cp	r26, r22
    49ac:	b7 07       	cpc	r27, r23
    49ae:	10 f0       	brcs	.+4      	; 0x49b4 <__udivmodhi4_ep>
    49b0:	a6 1b       	sub	r26, r22
    49b2:	b7 0b       	sbc	r27, r23

000049b4 <__udivmodhi4_ep>:
    49b4:	88 1f       	adc	r24, r24
    49b6:	99 1f       	adc	r25, r25
    49b8:	5a 95       	dec	r21
    49ba:	a9 f7       	brne	.-22     	; 0x49a6 <__udivmodhi4_loop>
    49bc:	80 95       	com	r24
    49be:	90 95       	com	r25
    49c0:	bc 01       	movw	r22, r24
    49c2:	cd 01       	movw	r24, r26
    49c4:	08 95       	ret

000049c6 <__udivmodsi4>:
    49c6:	a1 e2       	ldi	r26, 0x21	; 33
    49c8:	1a 2e       	mov	r1, r26
    49ca:	aa 1b       	sub	r26, r26
    49cc:	bb 1b       	sub	r27, r27
    49ce:	fd 01       	movw	r30, r26
    49d0:	0d c0       	rjmp	.+26     	; 0x49ec <__udivmodsi4_ep>

000049d2 <__udivmodsi4_loop>:
    49d2:	aa 1f       	adc	r26, r26
    49d4:	bb 1f       	adc	r27, r27
    49d6:	ee 1f       	adc	r30, r30
    49d8:	ff 1f       	adc	r31, r31
    49da:	a2 17       	cp	r26, r18
    49dc:	b3 07       	cpc	r27, r19
    49de:	e4 07       	cpc	r30, r20
    49e0:	f5 07       	cpc	r31, r21
    49e2:	20 f0       	brcs	.+8      	; 0x49ec <__udivmodsi4_ep>
    49e4:	a2 1b       	sub	r26, r18
    49e6:	b3 0b       	sbc	r27, r19
    49e8:	e4 0b       	sbc	r30, r20
    49ea:	f5 0b       	sbc	r31, r21

000049ec <__udivmodsi4_ep>:
    49ec:	66 1f       	adc	r22, r22
    49ee:	77 1f       	adc	r23, r23
    49f0:	88 1f       	adc	r24, r24
    49f2:	99 1f       	adc	r25, r25
    49f4:	1a 94       	dec	r1
    49f6:	69 f7       	brne	.-38     	; 0x49d2 <__udivmodsi4_loop>
    49f8:	60 95       	com	r22
    49fa:	70 95       	com	r23
    49fc:	80 95       	com	r24
    49fe:	90 95       	com	r25
    4a00:	9b 01       	movw	r18, r22
    4a02:	ac 01       	movw	r20, r24
    4a04:	bd 01       	movw	r22, r26
    4a06:	cf 01       	movw	r24, r30
    4a08:	08 95       	ret

00004a0a <__prologue_saves__>:
    4a0a:	2f 92       	push	r2
    4a0c:	3f 92       	push	r3
    4a0e:	4f 92       	push	r4
    4a10:	5f 92       	push	r5
    4a12:	6f 92       	push	r6
    4a14:	7f 92       	push	r7
    4a16:	8f 92       	push	r8
    4a18:	9f 92       	push	r9
    4a1a:	af 92       	push	r10
    4a1c:	bf 92       	push	r11
    4a1e:	cf 92       	push	r12
    4a20:	df 92       	push	r13
    4a22:	ef 92       	push	r14
    4a24:	ff 92       	push	r15
    4a26:	0f 93       	push	r16
    4a28:	1f 93       	push	r17
    4a2a:	cf 93       	push	r28
    4a2c:	df 93       	push	r29
    4a2e:	cd b7       	in	r28, 0x3d	; 61
    4a30:	de b7       	in	r29, 0x3e	; 62
    4a32:	ca 1b       	sub	r28, r26
    4a34:	db 0b       	sbc	r29, r27
    4a36:	0f b6       	in	r0, 0x3f	; 63
    4a38:	f8 94       	cli
    4a3a:	de bf       	out	0x3e, r29	; 62
    4a3c:	0f be       	out	0x3f, r0	; 63
    4a3e:	cd bf       	out	0x3d, r28	; 61
    4a40:	09 94       	ijmp

00004a42 <__epilogue_restores__>:
    4a42:	2a 88       	ldd	r2, Y+18	; 0x12
    4a44:	39 88       	ldd	r3, Y+17	; 0x11
    4a46:	48 88       	ldd	r4, Y+16	; 0x10
    4a48:	5f 84       	ldd	r5, Y+15	; 0x0f
    4a4a:	6e 84       	ldd	r6, Y+14	; 0x0e
    4a4c:	7d 84       	ldd	r7, Y+13	; 0x0d
    4a4e:	8c 84       	ldd	r8, Y+12	; 0x0c
    4a50:	9b 84       	ldd	r9, Y+11	; 0x0b
    4a52:	aa 84       	ldd	r10, Y+10	; 0x0a
    4a54:	b9 84       	ldd	r11, Y+9	; 0x09
    4a56:	c8 84       	ldd	r12, Y+8	; 0x08
    4a58:	df 80       	ldd	r13, Y+7	; 0x07
    4a5a:	ee 80       	ldd	r14, Y+6	; 0x06
    4a5c:	fd 80       	ldd	r15, Y+5	; 0x05
    4a5e:	0c 81       	ldd	r16, Y+4	; 0x04
    4a60:	1b 81       	ldd	r17, Y+3	; 0x03
    4a62:	aa 81       	ldd	r26, Y+2	; 0x02
    4a64:	b9 81       	ldd	r27, Y+1	; 0x01
    4a66:	ce 0f       	add	r28, r30
    4a68:	d1 1d       	adc	r29, r1
    4a6a:	0f b6       	in	r0, 0x3f	; 63
    4a6c:	f8 94       	cli
    4a6e:	de bf       	out	0x3e, r29	; 62
    4a70:	0f be       	out	0x3f, r0	; 63
    4a72:	cd bf       	out	0x3d, r28	; 61
    4a74:	ed 01       	movw	r28, r26
    4a76:	08 95       	ret

00004a78 <_exit>:
    4a78:	f8 94       	cli

00004a7a <__stop_program>:
    4a7a:	ff cf       	rjmp	.-2      	; 0x4a7a <__stop_program>
